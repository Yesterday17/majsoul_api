// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: liqi.proto

package lq

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GamePlayerState int32

const (
	GamePlayerState_NULL    GamePlayerState = 0
	GamePlayerState_AUTH    GamePlayerState = 1
	GamePlayerState_SYNCING GamePlayerState = 2
	GamePlayerState_READY   GamePlayerState = 3
)

var GamePlayerState_name = map[int32]string{
	0: "NULL",
	1: "AUTH",
	2: "SYNCING",
	3: "READY",
}

var GamePlayerState_value = map[string]int32{
	"NULL":    0,
	"AUTH":    1,
	"SYNCING": 2,
	"READY":   3,
}

func (x GamePlayerState) String() string {
	return proto.EnumName(GamePlayerState_name, int32(x))
}

func (GamePlayerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{0}
}

type NotifyRoomGameStart struct {
	GameUrl              string   `protobuf:"bytes,1,opt,name=game_url,json=gameUrl,proto3" json:"game_url,omitempty"`
	ConnectToken         string   `protobuf:"bytes,2,opt,name=connect_token,json=connectToken,proto3" json:"connect_token,omitempty"`
	GameUuid             string   `protobuf:"bytes,3,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	Location             string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyRoomGameStart) Reset()         { *m = NotifyRoomGameStart{} }
func (m *NotifyRoomGameStart) String() string { return proto.CompactTextString(m) }
func (*NotifyRoomGameStart) ProtoMessage()    {}
func (*NotifyRoomGameStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{0}
}
func (m *NotifyRoomGameStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRoomGameStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRoomGameStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRoomGameStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRoomGameStart.Merge(m, src)
}
func (m *NotifyRoomGameStart) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRoomGameStart) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRoomGameStart.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRoomGameStart proto.InternalMessageInfo

func (m *NotifyRoomGameStart) GetGameUrl() string {
	if m != nil {
		return m.GameUrl
	}
	return ""
}

func (m *NotifyRoomGameStart) GetConnectToken() string {
	if m != nil {
		return m.ConnectToken
	}
	return ""
}

func (m *NotifyRoomGameStart) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

func (m *NotifyRoomGameStart) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type NotifyMatchGameStart struct {
	GameUrl              string   `protobuf:"bytes,1,opt,name=game_url,json=gameUrl,proto3" json:"game_url,omitempty"`
	ConnectToken         string   `protobuf:"bytes,2,opt,name=connect_token,json=connectToken,proto3" json:"connect_token,omitempty"`
	GameUuid             string   `protobuf:"bytes,3,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	MatchModeId          uint32   `protobuf:"varint,4,opt,name=match_mode_id,json=matchModeId,proto3" json:"match_mode_id,omitempty"`
	Location             string   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyMatchGameStart) Reset()         { *m = NotifyMatchGameStart{} }
func (m *NotifyMatchGameStart) String() string { return proto.CompactTextString(m) }
func (*NotifyMatchGameStart) ProtoMessage()    {}
func (*NotifyMatchGameStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{1}
}
func (m *NotifyMatchGameStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyMatchGameStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyMatchGameStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyMatchGameStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyMatchGameStart.Merge(m, src)
}
func (m *NotifyMatchGameStart) XXX_Size() int {
	return m.Size()
}
func (m *NotifyMatchGameStart) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyMatchGameStart.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyMatchGameStart proto.InternalMessageInfo

func (m *NotifyMatchGameStart) GetGameUrl() string {
	if m != nil {
		return m.GameUrl
	}
	return ""
}

func (m *NotifyMatchGameStart) GetConnectToken() string {
	if m != nil {
		return m.ConnectToken
	}
	return ""
}

func (m *NotifyMatchGameStart) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

func (m *NotifyMatchGameStart) GetMatchModeId() uint32 {
	if m != nil {
		return m.MatchModeId
	}
	return 0
}

func (m *NotifyMatchGameStart) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type NotifyRoomPlayerReady struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Ready                bool     `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyRoomPlayerReady) Reset()         { *m = NotifyRoomPlayerReady{} }
func (m *NotifyRoomPlayerReady) String() string { return proto.CompactTextString(m) }
func (*NotifyRoomPlayerReady) ProtoMessage()    {}
func (*NotifyRoomPlayerReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{2}
}
func (m *NotifyRoomPlayerReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRoomPlayerReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRoomPlayerReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRoomPlayerReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRoomPlayerReady.Merge(m, src)
}
func (m *NotifyRoomPlayerReady) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRoomPlayerReady) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRoomPlayerReady.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRoomPlayerReady proto.InternalMessageInfo

func (m *NotifyRoomPlayerReady) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *NotifyRoomPlayerReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type NotifyRoomPlayerUpdate struct {
	UpdateList           []*PlayerBaseView `protobuf:"bytes,1,rep,name=update_list,json=updateList,proto3" json:"update_list,omitempty"`
	RemoveList           []uint32          `protobuf:"varint,2,rep,packed,name=remove_list,json=removeList,proto3" json:"remove_list,omitempty"`
	OwnerId              uint32            `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	RobotCount           uint32            `protobuf:"varint,4,opt,name=robot_count,json=robotCount,proto3" json:"robot_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NotifyRoomPlayerUpdate) Reset()         { *m = NotifyRoomPlayerUpdate{} }
func (m *NotifyRoomPlayerUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyRoomPlayerUpdate) ProtoMessage()    {}
func (*NotifyRoomPlayerUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{3}
}
func (m *NotifyRoomPlayerUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRoomPlayerUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRoomPlayerUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRoomPlayerUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRoomPlayerUpdate.Merge(m, src)
}
func (m *NotifyRoomPlayerUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRoomPlayerUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRoomPlayerUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRoomPlayerUpdate proto.InternalMessageInfo

func (m *NotifyRoomPlayerUpdate) GetUpdateList() []*PlayerBaseView {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *NotifyRoomPlayerUpdate) GetRemoveList() []uint32 {
	if m != nil {
		return m.RemoveList
	}
	return nil
}

func (m *NotifyRoomPlayerUpdate) GetOwnerId() uint32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *NotifyRoomPlayerUpdate) GetRobotCount() uint32 {
	if m != nil {
		return m.RobotCount
	}
	return 0
}

type NotifyRoomKickOut struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyRoomKickOut) Reset()         { *m = NotifyRoomKickOut{} }
func (m *NotifyRoomKickOut) String() string { return proto.CompactTextString(m) }
func (*NotifyRoomKickOut) ProtoMessage()    {}
func (*NotifyRoomKickOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{4}
}
func (m *NotifyRoomKickOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRoomKickOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRoomKickOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRoomKickOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRoomKickOut.Merge(m, src)
}
func (m *NotifyRoomKickOut) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRoomKickOut) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRoomKickOut.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRoomKickOut proto.InternalMessageInfo

type NotifyMatchTimeout struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyMatchTimeout) Reset()         { *m = NotifyMatchTimeout{} }
func (m *NotifyMatchTimeout) String() string { return proto.CompactTextString(m) }
func (*NotifyMatchTimeout) ProtoMessage()    {}
func (*NotifyMatchTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{5}
}
func (m *NotifyMatchTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyMatchTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyMatchTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyMatchTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyMatchTimeout.Merge(m, src)
}
func (m *NotifyMatchTimeout) XXX_Size() int {
	return m.Size()
}
func (m *NotifyMatchTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyMatchTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyMatchTimeout proto.InternalMessageInfo

type NotifyFriendStateChange struct {
	TargetId             uint32              `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ActiveState          *AccountActiveState `protobuf:"bytes,2,opt,name=active_state,json=activeState,proto3" json:"active_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NotifyFriendStateChange) Reset()         { *m = NotifyFriendStateChange{} }
func (m *NotifyFriendStateChange) String() string { return proto.CompactTextString(m) }
func (*NotifyFriendStateChange) ProtoMessage()    {}
func (*NotifyFriendStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{6}
}
func (m *NotifyFriendStateChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyFriendStateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyFriendStateChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyFriendStateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyFriendStateChange.Merge(m, src)
}
func (m *NotifyFriendStateChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyFriendStateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyFriendStateChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyFriendStateChange proto.InternalMessageInfo

func (m *NotifyFriendStateChange) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *NotifyFriendStateChange) GetActiveState() *AccountActiveState {
	if m != nil {
		return m.ActiveState
	}
	return nil
}

type NotifyFriendViewChange struct {
	TargetId             uint32          `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Base                 *PlayerBaseView `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyFriendViewChange) Reset()         { *m = NotifyFriendViewChange{} }
func (m *NotifyFriendViewChange) String() string { return proto.CompactTextString(m) }
func (*NotifyFriendViewChange) ProtoMessage()    {}
func (*NotifyFriendViewChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{7}
}
func (m *NotifyFriendViewChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyFriendViewChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyFriendViewChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyFriendViewChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyFriendViewChange.Merge(m, src)
}
func (m *NotifyFriendViewChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyFriendViewChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyFriendViewChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyFriendViewChange proto.InternalMessageInfo

func (m *NotifyFriendViewChange) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *NotifyFriendViewChange) GetBase() *PlayerBaseView {
	if m != nil {
		return m.Base
	}
	return nil
}

type NotifyFriendChange struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Type                 uint32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Friend               *Friend  `protobuf:"bytes,3,opt,name=friend,proto3" json:"friend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyFriendChange) Reset()         { *m = NotifyFriendChange{} }
func (m *NotifyFriendChange) String() string { return proto.CompactTextString(m) }
func (*NotifyFriendChange) ProtoMessage()    {}
func (*NotifyFriendChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{8}
}
func (m *NotifyFriendChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyFriendChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyFriendChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyFriendChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyFriendChange.Merge(m, src)
}
func (m *NotifyFriendChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyFriendChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyFriendChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyFriendChange proto.InternalMessageInfo

func (m *NotifyFriendChange) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *NotifyFriendChange) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *NotifyFriendChange) GetFriend() *Friend {
	if m != nil {
		return m.Friend
	}
	return nil
}

type NotifyNewFriendApply struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplyTime            uint32   `protobuf:"varint,2,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	RemovedId            uint32   `protobuf:"varint,3,opt,name=removed_id,json=removedId,proto3" json:"removed_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyNewFriendApply) Reset()         { *m = NotifyNewFriendApply{} }
func (m *NotifyNewFriendApply) String() string { return proto.CompactTextString(m) }
func (*NotifyNewFriendApply) ProtoMessage()    {}
func (*NotifyNewFriendApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{9}
}
func (m *NotifyNewFriendApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyNewFriendApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyNewFriendApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyNewFriendApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyNewFriendApply.Merge(m, src)
}
func (m *NotifyNewFriendApply) XXX_Size() int {
	return m.Size()
}
func (m *NotifyNewFriendApply) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyNewFriendApply.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyNewFriendApply proto.InternalMessageInfo

func (m *NotifyNewFriendApply) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *NotifyNewFriendApply) GetApplyTime() uint32 {
	if m != nil {
		return m.ApplyTime
	}
	return 0
}

func (m *NotifyNewFriendApply) GetRemovedId() uint32 {
	if m != nil {
		return m.RemovedId
	}
	return 0
}

type NotifyClientMessage struct {
	Sender               *PlayerBaseView `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Type                 uint32          `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Content              string          `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyClientMessage) Reset()         { *m = NotifyClientMessage{} }
func (m *NotifyClientMessage) String() string { return proto.CompactTextString(m) }
func (*NotifyClientMessage) ProtoMessage()    {}
func (*NotifyClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{10}
}
func (m *NotifyClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyClientMessage.Merge(m, src)
}
func (m *NotifyClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *NotifyClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyClientMessage proto.InternalMessageInfo

func (m *NotifyClientMessage) GetSender() *PlayerBaseView {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *NotifyClientMessage) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *NotifyClientMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NotifyAccountUpdate struct {
	Update               *AccountUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NotifyAccountUpdate) Reset()         { *m = NotifyAccountUpdate{} }
func (m *NotifyAccountUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyAccountUpdate) ProtoMessage()    {}
func (*NotifyAccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{11}
}
func (m *NotifyAccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAccountUpdate.Merge(m, src)
}
func (m *NotifyAccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAccountUpdate proto.InternalMessageInfo

func (m *NotifyAccountUpdate) GetUpdate() *AccountUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type NotifyAnotherLogin struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyAnotherLogin) Reset()         { *m = NotifyAnotherLogin{} }
func (m *NotifyAnotherLogin) String() string { return proto.CompactTextString(m) }
func (*NotifyAnotherLogin) ProtoMessage()    {}
func (*NotifyAnotherLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{12}
}
func (m *NotifyAnotherLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAnotherLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAnotherLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAnotherLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAnotherLogin.Merge(m, src)
}
func (m *NotifyAnotherLogin) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAnotherLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAnotherLogin.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAnotherLogin proto.InternalMessageInfo

type NotifyAccountLogout struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyAccountLogout) Reset()         { *m = NotifyAccountLogout{} }
func (m *NotifyAccountLogout) String() string { return proto.CompactTextString(m) }
func (*NotifyAccountLogout) ProtoMessage()    {}
func (*NotifyAccountLogout) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{13}
}
func (m *NotifyAccountLogout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAccountLogout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAccountLogout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAccountLogout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAccountLogout.Merge(m, src)
}
func (m *NotifyAccountLogout) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAccountLogout) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAccountLogout.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAccountLogout proto.InternalMessageInfo

type NotifyAnnouncementUpdate struct {
	Announcements        []*Announcement `protobuf:"bytes,1,rep,name=announcements,proto3" json:"announcements,omitempty"`
	Sort                 []uint32        `protobuf:"varint,2,rep,packed,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyAnnouncementUpdate) Reset()         { *m = NotifyAnnouncementUpdate{} }
func (m *NotifyAnnouncementUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyAnnouncementUpdate) ProtoMessage()    {}
func (*NotifyAnnouncementUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{14}
}
func (m *NotifyAnnouncementUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAnnouncementUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAnnouncementUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAnnouncementUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAnnouncementUpdate.Merge(m, src)
}
func (m *NotifyAnnouncementUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAnnouncementUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAnnouncementUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAnnouncementUpdate proto.InternalMessageInfo

func (m *NotifyAnnouncementUpdate) GetAnnouncements() []*Announcement {
	if m != nil {
		return m.Announcements
	}
	return nil
}

func (m *NotifyAnnouncementUpdate) GetSort() []uint32 {
	if m != nil {
		return m.Sort
	}
	return nil
}

type NotifyNewMail struct {
	Mail                 *Mail    `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyNewMail) Reset()         { *m = NotifyNewMail{} }
func (m *NotifyNewMail) String() string { return proto.CompactTextString(m) }
func (*NotifyNewMail) ProtoMessage()    {}
func (*NotifyNewMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{15}
}
func (m *NotifyNewMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyNewMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyNewMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyNewMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyNewMail.Merge(m, src)
}
func (m *NotifyNewMail) XXX_Size() int {
	return m.Size()
}
func (m *NotifyNewMail) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyNewMail.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyNewMail proto.InternalMessageInfo

func (m *NotifyNewMail) GetMail() *Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

type NotifyDeleteMail struct {
	MailIdList           []uint32 `protobuf:"varint,1,rep,packed,name=mail_id_list,json=mailIdList,proto3" json:"mail_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyDeleteMail) Reset()         { *m = NotifyDeleteMail{} }
func (m *NotifyDeleteMail) String() string { return proto.CompactTextString(m) }
func (*NotifyDeleteMail) ProtoMessage()    {}
func (*NotifyDeleteMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{16}
}
func (m *NotifyDeleteMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyDeleteMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyDeleteMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyDeleteMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyDeleteMail.Merge(m, src)
}
func (m *NotifyDeleteMail) XXX_Size() int {
	return m.Size()
}
func (m *NotifyDeleteMail) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyDeleteMail.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyDeleteMail proto.InternalMessageInfo

func (m *NotifyDeleteMail) GetMailIdList() []uint32 {
	if m != nil {
		return m.MailIdList
	}
	return nil
}

type NotifyReviveCoinUpdate struct {
	HasGained            bool     `protobuf:"varint,1,opt,name=has_gained,json=hasGained,proto3" json:"has_gained,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyReviveCoinUpdate) Reset()         { *m = NotifyReviveCoinUpdate{} }
func (m *NotifyReviveCoinUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyReviveCoinUpdate) ProtoMessage()    {}
func (*NotifyReviveCoinUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{17}
}
func (m *NotifyReviveCoinUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyReviveCoinUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyReviveCoinUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyReviveCoinUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyReviveCoinUpdate.Merge(m, src)
}
func (m *NotifyReviveCoinUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyReviveCoinUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyReviveCoinUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyReviveCoinUpdate proto.InternalMessageInfo

func (m *NotifyReviveCoinUpdate) GetHasGained() bool {
	if m != nil {
		return m.HasGained
	}
	return false
}

type NotifyDailyTaskUpdate struct {
	Progresses           []*TaskProgress `protobuf:"bytes,1,rep,name=progresses,proto3" json:"progresses,omitempty"`
	MaxDailyTaskCount    uint32          `protobuf:"varint,2,opt,name=max_daily_task_count,json=maxDailyTaskCount,proto3" json:"max_daily_task_count,omitempty"`
	RefreshCount         uint32          `protobuf:"varint,3,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyDailyTaskUpdate) Reset()         { *m = NotifyDailyTaskUpdate{} }
func (m *NotifyDailyTaskUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyDailyTaskUpdate) ProtoMessage()    {}
func (*NotifyDailyTaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{18}
}
func (m *NotifyDailyTaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyDailyTaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyDailyTaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyDailyTaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyDailyTaskUpdate.Merge(m, src)
}
func (m *NotifyDailyTaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyDailyTaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyDailyTaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyDailyTaskUpdate proto.InternalMessageInfo

func (m *NotifyDailyTaskUpdate) GetProgresses() []*TaskProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

func (m *NotifyDailyTaskUpdate) GetMaxDailyTaskCount() uint32 {
	if m != nil {
		return m.MaxDailyTaskCount
	}
	return 0
}

func (m *NotifyDailyTaskUpdate) GetRefreshCount() uint32 {
	if m != nil {
		return m.RefreshCount
	}
	return 0
}

type NotifyActivityTaskUpdate struct {
	Progresses           []*TaskProgress `protobuf:"bytes,1,rep,name=progresses,proto3" json:"progresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyActivityTaskUpdate) Reset()         { *m = NotifyActivityTaskUpdate{} }
func (m *NotifyActivityTaskUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyActivityTaskUpdate) ProtoMessage()    {}
func (*NotifyActivityTaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{19}
}
func (m *NotifyActivityTaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyActivityTaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyActivityTaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyActivityTaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyActivityTaskUpdate.Merge(m, src)
}
func (m *NotifyActivityTaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyActivityTaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyActivityTaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyActivityTaskUpdate proto.InternalMessageInfo

func (m *NotifyActivityTaskUpdate) GetProgresses() []*TaskProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type NotifyNewComment struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyNewComment) Reset()         { *m = NotifyNewComment{} }
func (m *NotifyNewComment) String() string { return proto.CompactTextString(m) }
func (*NotifyNewComment) ProtoMessage()    {}
func (*NotifyNewComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{20}
}
func (m *NotifyNewComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyNewComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyNewComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyNewComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyNewComment.Merge(m, src)
}
func (m *NotifyNewComment) XXX_Size() int {
	return m.Size()
}
func (m *NotifyNewComment) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyNewComment.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyNewComment proto.InternalMessageInfo

type NotifyRollingNotice struct {
	Notice               *RollingNotice `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NotifyRollingNotice) Reset()         { *m = NotifyRollingNotice{} }
func (m *NotifyRollingNotice) String() string { return proto.CompactTextString(m) }
func (*NotifyRollingNotice) ProtoMessage()    {}
func (*NotifyRollingNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{21}
}
func (m *NotifyRollingNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRollingNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRollingNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRollingNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRollingNotice.Merge(m, src)
}
func (m *NotifyRollingNotice) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRollingNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRollingNotice.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRollingNotice proto.InternalMessageInfo

func (m *NotifyRollingNotice) GetNotice() *RollingNotice {
	if m != nil {
		return m.Notice
	}
	return nil
}

type NotifyGiftSendRefresh struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyGiftSendRefresh) Reset()         { *m = NotifyGiftSendRefresh{} }
func (m *NotifyGiftSendRefresh) String() string { return proto.CompactTextString(m) }
func (*NotifyGiftSendRefresh) ProtoMessage()    {}
func (*NotifyGiftSendRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{22}
}
func (m *NotifyGiftSendRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGiftSendRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGiftSendRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGiftSendRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGiftSendRefresh.Merge(m, src)
}
func (m *NotifyGiftSendRefresh) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGiftSendRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGiftSendRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGiftSendRefresh proto.InternalMessageInfo

type NotifyShopUpdate struct {
	ShopInfo             *ShopInfo `protobuf:"bytes,1,opt,name=shop_info,json=shopInfo,proto3" json:"shop_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NotifyShopUpdate) Reset()         { *m = NotifyShopUpdate{} }
func (m *NotifyShopUpdate) String() string { return proto.CompactTextString(m) }
func (*NotifyShopUpdate) ProtoMessage()    {}
func (*NotifyShopUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{23}
}
func (m *NotifyShopUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyShopUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyShopUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyShopUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyShopUpdate.Merge(m, src)
}
func (m *NotifyShopUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyShopUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyShopUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyShopUpdate proto.InternalMessageInfo

func (m *NotifyShopUpdate) GetShopInfo() *ShopInfo {
	if m != nil {
		return m.ShopInfo
	}
	return nil
}

type NotifyVipLevelChange struct {
	GiftLimit            uint32   `protobuf:"varint,1,opt,name=gift_limit,json=giftLimit,proto3" json:"gift_limit,omitempty"`
	FriendMaxCount       uint32   `protobuf:"varint,2,opt,name=friend_max_count,json=friendMaxCount,proto3" json:"friend_max_count,omitempty"`
	ZhpFreeRefreshLimit  uint32   `protobuf:"varint,3,opt,name=zhp_free_refresh_limit,json=zhpFreeRefreshLimit,proto3" json:"zhp_free_refresh_limit,omitempty"`
	ZhpCostRefreshLimit  uint32   `protobuf:"varint,4,opt,name=zhp_cost_refresh_limit,json=zhpCostRefreshLimit,proto3" json:"zhp_cost_refresh_limit,omitempty"`
	BuddyBonus           float32  `protobuf:"fixed32,5,opt,name=buddy_bonus,json=buddyBonus,proto3" json:"buddy_bonus,omitempty"`
	RecordCollectLimit   uint32   `protobuf:"varint,6,opt,name=record_collect_limit,json=recordCollectLimit,proto3" json:"record_collect_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyVipLevelChange) Reset()         { *m = NotifyVipLevelChange{} }
func (m *NotifyVipLevelChange) String() string { return proto.CompactTextString(m) }
func (*NotifyVipLevelChange) ProtoMessage()    {}
func (*NotifyVipLevelChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{24}
}
func (m *NotifyVipLevelChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyVipLevelChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyVipLevelChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyVipLevelChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyVipLevelChange.Merge(m, src)
}
func (m *NotifyVipLevelChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyVipLevelChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyVipLevelChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyVipLevelChange proto.InternalMessageInfo

func (m *NotifyVipLevelChange) GetGiftLimit() uint32 {
	if m != nil {
		return m.GiftLimit
	}
	return 0
}

func (m *NotifyVipLevelChange) GetFriendMaxCount() uint32 {
	if m != nil {
		return m.FriendMaxCount
	}
	return 0
}

func (m *NotifyVipLevelChange) GetZhpFreeRefreshLimit() uint32 {
	if m != nil {
		return m.ZhpFreeRefreshLimit
	}
	return 0
}

func (m *NotifyVipLevelChange) GetZhpCostRefreshLimit() uint32 {
	if m != nil {
		return m.ZhpCostRefreshLimit
	}
	return 0
}

func (m *NotifyVipLevelChange) GetBuddyBonus() float32 {
	if m != nil {
		return m.BuddyBonus
	}
	return 0
}

func (m *NotifyVipLevelChange) GetRecordCollectLimit() uint32 {
	if m != nil {
		return m.RecordCollectLimit
	}
	return 0
}

type NotifyServerSetting struct {
	Settings             *ServerSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyServerSetting) Reset()         { *m = NotifyServerSetting{} }
func (m *NotifyServerSetting) String() string { return proto.CompactTextString(m) }
func (*NotifyServerSetting) ProtoMessage()    {}
func (*NotifyServerSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{25}
}
func (m *NotifyServerSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyServerSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyServerSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyServerSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyServerSetting.Merge(m, src)
}
func (m *NotifyServerSetting) XXX_Size() int {
	return m.Size()
}
func (m *NotifyServerSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyServerSetting.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyServerSetting proto.InternalMessageInfo

func (m *NotifyServerSetting) GetSettings() *ServerSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type NotifyPayResult struct {
	PayResult            uint32   `protobuf:"varint,1,opt,name=pay_result,json=payResult,proto3" json:"pay_result,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	GoodsId              uint32   `protobuf:"varint,3,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyPayResult) Reset()         { *m = NotifyPayResult{} }
func (m *NotifyPayResult) String() string { return proto.CompactTextString(m) }
func (*NotifyPayResult) ProtoMessage()    {}
func (*NotifyPayResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{26}
}
func (m *NotifyPayResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyPayResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyPayResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyPayResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyPayResult.Merge(m, src)
}
func (m *NotifyPayResult) XXX_Size() int {
	return m.Size()
}
func (m *NotifyPayResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyPayResult.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyPayResult proto.InternalMessageInfo

func (m *NotifyPayResult) GetPayResult() uint32 {
	if m != nil {
		return m.PayResult
	}
	return 0
}

func (m *NotifyPayResult) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *NotifyPayResult) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

type NotifyCustomContestAccountMsg struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	AccountId            uint32   `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Sender               string   `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyCustomContestAccountMsg) Reset()         { *m = NotifyCustomContestAccountMsg{} }
func (m *NotifyCustomContestAccountMsg) String() string { return proto.CompactTextString(m) }
func (*NotifyCustomContestAccountMsg) ProtoMessage()    {}
func (*NotifyCustomContestAccountMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{27}
}
func (m *NotifyCustomContestAccountMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyCustomContestAccountMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyCustomContestAccountMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyCustomContestAccountMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyCustomContestAccountMsg.Merge(m, src)
}
func (m *NotifyCustomContestAccountMsg) XXX_Size() int {
	return m.Size()
}
func (m *NotifyCustomContestAccountMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyCustomContestAccountMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyCustomContestAccountMsg proto.InternalMessageInfo

func (m *NotifyCustomContestAccountMsg) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *NotifyCustomContestAccountMsg) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *NotifyCustomContestAccountMsg) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *NotifyCustomContestAccountMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NotifyCustomContestSystemMsg struct {
	UniqueId             uint32                      `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Type                 uint32                      `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Uuid                 string                      `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	GameStart            *CustomizedContestGameStart `protobuf:"bytes,4,opt,name=game_start,json=gameStart,proto3" json:"game_start,omitempty"`
	GameEnd              *CustomizedContestGameEnd   `protobuf:"bytes,5,opt,name=game_end,json=gameEnd,proto3" json:"game_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NotifyCustomContestSystemMsg) Reset()         { *m = NotifyCustomContestSystemMsg{} }
func (m *NotifyCustomContestSystemMsg) String() string { return proto.CompactTextString(m) }
func (*NotifyCustomContestSystemMsg) ProtoMessage()    {}
func (*NotifyCustomContestSystemMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{28}
}
func (m *NotifyCustomContestSystemMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyCustomContestSystemMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyCustomContestSystemMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyCustomContestSystemMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyCustomContestSystemMsg.Merge(m, src)
}
func (m *NotifyCustomContestSystemMsg) XXX_Size() int {
	return m.Size()
}
func (m *NotifyCustomContestSystemMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyCustomContestSystemMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyCustomContestSystemMsg proto.InternalMessageInfo

func (m *NotifyCustomContestSystemMsg) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *NotifyCustomContestSystemMsg) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *NotifyCustomContestSystemMsg) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *NotifyCustomContestSystemMsg) GetGameStart() *CustomizedContestGameStart {
	if m != nil {
		return m.GameStart
	}
	return nil
}

func (m *NotifyCustomContestSystemMsg) GetGameEnd() *CustomizedContestGameEnd {
	if m != nil {
		return m.GameEnd
	}
	return nil
}

type NotifyCustomContestState struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	State                uint32   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyCustomContestState) Reset()         { *m = NotifyCustomContestState{} }
func (m *NotifyCustomContestState) String() string { return proto.CompactTextString(m) }
func (*NotifyCustomContestState) ProtoMessage()    {}
func (*NotifyCustomContestState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{29}
}
func (m *NotifyCustomContestState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyCustomContestState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyCustomContestState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyCustomContestState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyCustomContestState.Merge(m, src)
}
func (m *NotifyCustomContestState) XXX_Size() int {
	return m.Size()
}
func (m *NotifyCustomContestState) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyCustomContestState.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyCustomContestState proto.InternalMessageInfo

func (m *NotifyCustomContestState) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *NotifyCustomContestState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type NotifyActivityChange struct {
	NewActivities        []*Activity `protobuf:"bytes,1,rep,name=new_activities,json=newActivities,proto3" json:"new_activities,omitempty"`
	EndActivities        []uint32    `protobuf:"varint,2,rep,packed,name=end_activities,json=endActivities,proto3" json:"end_activities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NotifyActivityChange) Reset()         { *m = NotifyActivityChange{} }
func (m *NotifyActivityChange) String() string { return proto.CompactTextString(m) }
func (*NotifyActivityChange) ProtoMessage()    {}
func (*NotifyActivityChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{30}
}
func (m *NotifyActivityChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyActivityChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyActivityChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyActivityChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyActivityChange.Merge(m, src)
}
func (m *NotifyActivityChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyActivityChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyActivityChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyActivityChange proto.InternalMessageInfo

func (m *NotifyActivityChange) GetNewActivities() []*Activity {
	if m != nil {
		return m.NewActivities
	}
	return nil
}

func (m *NotifyActivityChange) GetEndActivities() []uint32 {
	if m != nil {
		return m.EndActivities
	}
	return nil
}

type Error struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	U32Params            []uint32 `protobuf:"varint,2,rep,packed,name=u32_params,json=u32Params,proto3" json:"u32_params,omitempty"`
	StrParams            []string `protobuf:"bytes,3,rep,name=str_params,json=strParams,proto3" json:"str_params,omitempty"`
	JsonParam            string   `protobuf:"bytes,4,opt,name=json_param,json=jsonParam,proto3" json:"json_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{31}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetU32Params() []uint32 {
	if m != nil {
		return m.U32Params
	}
	return nil
}

func (m *Error) GetStrParams() []string {
	if m != nil {
		return m.StrParams
	}
	return nil
}

func (m *Error) GetJsonParam() string {
	if m != nil {
		return m.JsonParam
	}
	return ""
}

type Wrapper struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wrapper) Reset()         { *m = Wrapper{} }
func (m *Wrapper) String() string { return proto.CompactTextString(m) }
func (*Wrapper) ProtoMessage()    {}
func (*Wrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{32}
}
func (m *Wrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wrapper.Merge(m, src)
}
func (m *Wrapper) XXX_Size() int {
	return m.Size()
}
func (m *Wrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_Wrapper.DiscardUnknown(m)
}

var xxx_messageInfo_Wrapper proto.InternalMessageInfo

func (m *Wrapper) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Wrapper) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NetworkEndpoint struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkEndpoint) Reset()         { *m = NetworkEndpoint{} }
func (m *NetworkEndpoint) String() string { return proto.CompactTextString(m) }
func (*NetworkEndpoint) ProtoMessage()    {}
func (*NetworkEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{33}
}
func (m *NetworkEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkEndpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkEndpoint.Merge(m, src)
}
func (m *NetworkEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *NetworkEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkEndpoint proto.InternalMessageInfo

func (m *NetworkEndpoint) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *NetworkEndpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NetworkEndpoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ReqCommon struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCommon) Reset()         { *m = ReqCommon{} }
func (m *ReqCommon) String() string { return proto.CompactTextString(m) }
func (*ReqCommon) ProtoMessage()    {}
func (*ReqCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{34}
}
func (m *ReqCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCommon.Merge(m, src)
}
func (m *ReqCommon) XXX_Size() int {
	return m.Size()
}
func (m *ReqCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCommon.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCommon proto.InternalMessageInfo

type ResCommon struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCommon) Reset()         { *m = ResCommon{} }
func (m *ResCommon) String() string { return proto.CompactTextString(m) }
func (*ResCommon) ProtoMessage()    {}
func (*ResCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{35}
}
func (m *ResCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCommon.Merge(m, src)
}
func (m *ResCommon) XXX_Size() int {
	return m.Size()
}
func (m *ResCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCommon.DiscardUnknown(m)
}

var xxx_messageInfo_ResCommon proto.InternalMessageInfo

func (m *ResCommon) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ResAccountUpdate struct {
	Error                *Error         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Update               *AccountUpdate `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResAccountUpdate) Reset()         { *m = ResAccountUpdate{} }
func (m *ResAccountUpdate) String() string { return proto.CompactTextString(m) }
func (*ResAccountUpdate) ProtoMessage()    {}
func (*ResAccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{36}
}
func (m *ResAccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountUpdate.Merge(m, src)
}
func (m *ResAccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountUpdate proto.InternalMessageInfo

func (m *ResAccountUpdate) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAccountUpdate) GetUpdate() *AccountUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type AntiAddiction struct {
	OnlineDuration       uint32   `protobuf:"varint,1,opt,name=online_duration,json=onlineDuration,proto3" json:"online_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AntiAddiction) Reset()         { *m = AntiAddiction{} }
func (m *AntiAddiction) String() string { return proto.CompactTextString(m) }
func (*AntiAddiction) ProtoMessage()    {}
func (*AntiAddiction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{37}
}
func (m *AntiAddiction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AntiAddiction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AntiAddiction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AntiAddiction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntiAddiction.Merge(m, src)
}
func (m *AntiAddiction) XXX_Size() int {
	return m.Size()
}
func (m *AntiAddiction) XXX_DiscardUnknown() {
	xxx_messageInfo_AntiAddiction.DiscardUnknown(m)
}

var xxx_messageInfo_AntiAddiction proto.InternalMessageInfo

func (m *AntiAddiction) GetOnlineDuration() uint32 {
	if m != nil {
		return m.OnlineDuration
	}
	return 0
}

type AccountMahjongStatistic struct {
	FinalPositionCounts  []uint32                                 `protobuf:"varint,1,rep,packed,name=final_position_counts,json=finalPositionCounts,proto3" json:"final_position_counts,omitempty"`
	RecentRound          *AccountMahjongStatistic_RoundSummary    `protobuf:"bytes,2,opt,name=recent_round,json=recentRound,proto3" json:"recent_round,omitempty"`
	RecentHu             *AccountMahjongStatistic_HuSummary       `protobuf:"bytes,3,opt,name=recent_hu,json=recentHu,proto3" json:"recent_hu,omitempty"`
	HighestHu            *AccountMahjongStatistic_HighestHuRecord `protobuf:"bytes,4,opt,name=highest_hu,json=highestHu,proto3" json:"highest_hu,omitempty"`
	Recent_20HuSummary   *AccountMahjongStatistic_Liqi20Summary   `protobuf:"bytes,6,opt,name=recent_20_hu_summary,json=recent20HuSummary,proto3" json:"recent_20_hu_summary,omitempty"`
	Recent_10HuSummary   *AccountMahjongStatistic_LiQi10Summary   `protobuf:"bytes,7,opt,name=recent_10_hu_summary,json=recent10HuSummary,proto3" json:"recent_10_hu_summary,omitempty"`
	Recent_10GameResult  []*AccountMahjongStatistic_GameResult    `protobuf:"bytes,8,rep,name=recent_10_game_result,json=recent10GameResult,proto3" json:"recent_10_game_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *AccountMahjongStatistic) Reset()         { *m = AccountMahjongStatistic{} }
func (m *AccountMahjongStatistic) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic) ProtoMessage()    {}
func (*AccountMahjongStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38}
}
func (m *AccountMahjongStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic.Merge(m, src)
}
func (m *AccountMahjongStatistic) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic proto.InternalMessageInfo

func (m *AccountMahjongStatistic) GetFinalPositionCounts() []uint32 {
	if m != nil {
		return m.FinalPositionCounts
	}
	return nil
}

func (m *AccountMahjongStatistic) GetRecentRound() *AccountMahjongStatistic_RoundSummary {
	if m != nil {
		return m.RecentRound
	}
	return nil
}

func (m *AccountMahjongStatistic) GetRecentHu() *AccountMahjongStatistic_HuSummary {
	if m != nil {
		return m.RecentHu
	}
	return nil
}

func (m *AccountMahjongStatistic) GetHighestHu() *AccountMahjongStatistic_HighestHuRecord {
	if m != nil {
		return m.HighestHu
	}
	return nil
}

func (m *AccountMahjongStatistic) GetRecent_20HuSummary() *AccountMahjongStatistic_Liqi20Summary {
	if m != nil {
		return m.Recent_20HuSummary
	}
	return nil
}

func (m *AccountMahjongStatistic) GetRecent_10HuSummary() *AccountMahjongStatistic_LiQi10Summary {
	if m != nil {
		return m.Recent_10HuSummary
	}
	return nil
}

func (m *AccountMahjongStatistic) GetRecent_10GameResult() []*AccountMahjongStatistic_GameResult {
	if m != nil {
		return m.Recent_10GameResult
	}
	return nil
}

type AccountMahjongStatistic_RoundSummary struct {
	TotalCount           uint32   `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	RongCount            uint32   `protobuf:"varint,2,opt,name=rong_count,json=rongCount,proto3" json:"rong_count,omitempty"`
	ZimoCount            uint32   `protobuf:"varint,3,opt,name=zimo_count,json=zimoCount,proto3" json:"zimo_count,omitempty"`
	FangchongCount       uint32   `protobuf:"varint,4,opt,name=fangchong_count,json=fangchongCount,proto3" json:"fangchong_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMahjongStatistic_RoundSummary) Reset()         { *m = AccountMahjongStatistic_RoundSummary{} }
func (m *AccountMahjongStatistic_RoundSummary) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic_RoundSummary) ProtoMessage()    {}
func (*AccountMahjongStatistic_RoundSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38, 0}
}
func (m *AccountMahjongStatistic_RoundSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic_RoundSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic_RoundSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic_RoundSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic_RoundSummary.Merge(m, src)
}
func (m *AccountMahjongStatistic_RoundSummary) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic_RoundSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic_RoundSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic_RoundSummary proto.InternalMessageInfo

func (m *AccountMahjongStatistic_RoundSummary) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *AccountMahjongStatistic_RoundSummary) GetRongCount() uint32 {
	if m != nil {
		return m.RongCount
	}
	return 0
}

func (m *AccountMahjongStatistic_RoundSummary) GetZimoCount() uint32 {
	if m != nil {
		return m.ZimoCount
	}
	return 0
}

func (m *AccountMahjongStatistic_RoundSummary) GetFangchongCount() uint32 {
	if m != nil {
		return m.FangchongCount
	}
	return 0
}

type AccountMahjongStatistic_HuSummary struct {
	TotalCount           uint32   `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	DoraRoundCount       uint32   `protobuf:"varint,2,opt,name=dora_round_count,json=doraRoundCount,proto3" json:"dora_round_count,omitempty"`
	TotalFan             uint32   `protobuf:"varint,3,opt,name=total_fan,json=totalFan,proto3" json:"total_fan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMahjongStatistic_HuSummary) Reset()         { *m = AccountMahjongStatistic_HuSummary{} }
func (m *AccountMahjongStatistic_HuSummary) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic_HuSummary) ProtoMessage()    {}
func (*AccountMahjongStatistic_HuSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38, 1}
}
func (m *AccountMahjongStatistic_HuSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic_HuSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic_HuSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic_HuSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic_HuSummary.Merge(m, src)
}
func (m *AccountMahjongStatistic_HuSummary) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic_HuSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic_HuSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic_HuSummary proto.InternalMessageInfo

func (m *AccountMahjongStatistic_HuSummary) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *AccountMahjongStatistic_HuSummary) GetDoraRoundCount() uint32 {
	if m != nil {
		return m.DoraRoundCount
	}
	return 0
}

func (m *AccountMahjongStatistic_HuSummary) GetTotalFan() uint32 {
	if m != nil {
		return m.TotalFan
	}
	return 0
}

type AccountMahjongStatistic_HighestHuRecord struct {
	Fanshu               uint32   `protobuf:"varint,1,opt,name=fanshu,proto3" json:"fanshu,omitempty"`
	Doranum              uint32   `protobuf:"varint,2,opt,name=doranum,proto3" json:"doranum,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Hands                []string `protobuf:"bytes,4,rep,name=hands,proto3" json:"hands,omitempty"`
	Ming                 []string `protobuf:"bytes,5,rep,name=ming,proto3" json:"ming,omitempty"`
	Hupai                string   `protobuf:"bytes,6,opt,name=hupai,proto3" json:"hupai,omitempty"`
	TitleId              uint32   `protobuf:"varint,7,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMahjongStatistic_HighestHuRecord) Reset() {
	*m = AccountMahjongStatistic_HighestHuRecord{}
}
func (m *AccountMahjongStatistic_HighestHuRecord) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic_HighestHuRecord) ProtoMessage()    {}
func (*AccountMahjongStatistic_HighestHuRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38, 2}
}
func (m *AccountMahjongStatistic_HighestHuRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic_HighestHuRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic_HighestHuRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic_HighestHuRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic_HighestHuRecord.Merge(m, src)
}
func (m *AccountMahjongStatistic_HighestHuRecord) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic_HighestHuRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic_HighestHuRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic_HighestHuRecord proto.InternalMessageInfo

func (m *AccountMahjongStatistic_HighestHuRecord) GetFanshu() uint32 {
	if m != nil {
		return m.Fanshu
	}
	return 0
}

func (m *AccountMahjongStatistic_HighestHuRecord) GetDoranum() uint32 {
	if m != nil {
		return m.Doranum
	}
	return 0
}

func (m *AccountMahjongStatistic_HighestHuRecord) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AccountMahjongStatistic_HighestHuRecord) GetHands() []string {
	if m != nil {
		return m.Hands
	}
	return nil
}

func (m *AccountMahjongStatistic_HighestHuRecord) GetMing() []string {
	if m != nil {
		return m.Ming
	}
	return nil
}

func (m *AccountMahjongStatistic_HighestHuRecord) GetHupai() string {
	if m != nil {
		return m.Hupai
	}
	return ""
}

func (m *AccountMahjongStatistic_HighestHuRecord) GetTitleId() uint32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

type AccountMahjongStatistic_Liqi20Summary struct {
	TotalCount           uint32   `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalLidoraCount     uint32   `protobuf:"varint,2,opt,name=total_lidora_count,json=totalLidoraCount,proto3" json:"total_lidora_count,omitempty"`
	AverageHuPoint       uint32   `protobuf:"varint,3,opt,name=average_hu_point,json=averageHuPoint,proto3" json:"average_hu_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMahjongStatistic_Liqi20Summary) Reset()         { *m = AccountMahjongStatistic_Liqi20Summary{} }
func (m *AccountMahjongStatistic_Liqi20Summary) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic_Liqi20Summary) ProtoMessage()    {}
func (*AccountMahjongStatistic_Liqi20Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38, 3}
}
func (m *AccountMahjongStatistic_Liqi20Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic_Liqi20Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic_Liqi20Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic_Liqi20Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic_Liqi20Summary.Merge(m, src)
}
func (m *AccountMahjongStatistic_Liqi20Summary) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic_Liqi20Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic_Liqi20Summary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic_Liqi20Summary proto.InternalMessageInfo

func (m *AccountMahjongStatistic_Liqi20Summary) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *AccountMahjongStatistic_Liqi20Summary) GetTotalLidoraCount() uint32 {
	if m != nil {
		return m.TotalLidoraCount
	}
	return 0
}

func (m *AccountMahjongStatistic_Liqi20Summary) GetAverageHuPoint() uint32 {
	if m != nil {
		return m.AverageHuPoint
	}
	return 0
}

type AccountMahjongStatistic_LiQi10Summary struct {
	TotalXuanshang       uint32   `protobuf:"varint,1,opt,name=total_xuanshang,json=totalXuanshang,proto3" json:"total_xuanshang,omitempty"`
	TotalFanshu          uint32   `protobuf:"varint,2,opt,name=total_fanshu,json=totalFanshu,proto3" json:"total_fanshu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMahjongStatistic_LiQi10Summary) Reset()         { *m = AccountMahjongStatistic_LiQi10Summary{} }
func (m *AccountMahjongStatistic_LiQi10Summary) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic_LiQi10Summary) ProtoMessage()    {}
func (*AccountMahjongStatistic_LiQi10Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38, 4}
}
func (m *AccountMahjongStatistic_LiQi10Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic_LiQi10Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic_LiQi10Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic_LiQi10Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic_LiQi10Summary.Merge(m, src)
}
func (m *AccountMahjongStatistic_LiQi10Summary) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic_LiQi10Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic_LiQi10Summary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic_LiQi10Summary proto.InternalMessageInfo

func (m *AccountMahjongStatistic_LiQi10Summary) GetTotalXuanshang() uint32 {
	if m != nil {
		return m.TotalXuanshang
	}
	return 0
}

func (m *AccountMahjongStatistic_LiQi10Summary) GetTotalFanshu() uint32 {
	if m != nil {
		return m.TotalFanshu
	}
	return 0
}

type AccountMahjongStatistic_GameResult struct {
	Rank                 uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	FinalPoint           int32    `protobuf:"varint,2,opt,name=final_point,json=finalPoint,proto3" json:"final_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMahjongStatistic_GameResult) Reset()         { *m = AccountMahjongStatistic_GameResult{} }
func (m *AccountMahjongStatistic_GameResult) String() string { return proto.CompactTextString(m) }
func (*AccountMahjongStatistic_GameResult) ProtoMessage()    {}
func (*AccountMahjongStatistic_GameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{38, 5}
}
func (m *AccountMahjongStatistic_GameResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMahjongStatistic_GameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMahjongStatistic_GameResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMahjongStatistic_GameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMahjongStatistic_GameResult.Merge(m, src)
}
func (m *AccountMahjongStatistic_GameResult) XXX_Size() int {
	return m.Size()
}
func (m *AccountMahjongStatistic_GameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMahjongStatistic_GameResult.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMahjongStatistic_GameResult proto.InternalMessageInfo

func (m *AccountMahjongStatistic_GameResult) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *AccountMahjongStatistic_GameResult) GetFinalPoint() int32 {
	if m != nil {
		return m.FinalPoint
	}
	return 0
}

type AccountStatisticData struct {
	MahjongCategory      uint32                   `protobuf:"varint,1,opt,name=mahjong_category,json=mahjongCategory,proto3" json:"mahjong_category,omitempty"`
	GameCategory         uint32                   `protobuf:"varint,2,opt,name=game_category,json=gameCategory,proto3" json:"game_category,omitempty"`
	Statistic            *AccountMahjongStatistic `protobuf:"bytes,3,opt,name=statistic,proto3" json:"statistic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AccountStatisticData) Reset()         { *m = AccountStatisticData{} }
func (m *AccountStatisticData) String() string { return proto.CompactTextString(m) }
func (*AccountStatisticData) ProtoMessage()    {}
func (*AccountStatisticData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{39}
}
func (m *AccountStatisticData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStatisticData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStatisticData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStatisticData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStatisticData.Merge(m, src)
}
func (m *AccountStatisticData) XXX_Size() int {
	return m.Size()
}
func (m *AccountStatisticData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStatisticData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStatisticData proto.InternalMessageInfo

func (m *AccountStatisticData) GetMahjongCategory() uint32 {
	if m != nil {
		return m.MahjongCategory
	}
	return 0
}

func (m *AccountStatisticData) GetGameCategory() uint32 {
	if m != nil {
		return m.GameCategory
	}
	return 0
}

func (m *AccountStatisticData) GetStatistic() *AccountMahjongStatistic {
	if m != nil {
		return m.Statistic
	}
	return nil
}

type AccountLevel struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Score                uint32   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountLevel) Reset()         { *m = AccountLevel{} }
func (m *AccountLevel) String() string { return proto.CompactTextString(m) }
func (*AccountLevel) ProtoMessage()    {}
func (*AccountLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{40}
}
func (m *AccountLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLevel.Merge(m, src)
}
func (m *AccountLevel) XXX_Size() int {
	return m.Size()
}
func (m *AccountLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLevel.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLevel proto.InternalMessageInfo

func (m *AccountLevel) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AccountLevel) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type Account struct {
	AccountId            uint32                     `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Nickname             string                     `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	LoginTime            uint32                     `protobuf:"varint,3,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	LogoutTime           uint32                     `protobuf:"varint,4,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	RoomId               uint32                     `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	AntiAddiction        *AntiAddiction             `protobuf:"bytes,6,opt,name=anti_addiction,json=antiAddiction,proto3" json:"anti_addiction,omitempty"`
	Title                uint32                     `protobuf:"varint,7,opt,name=title,proto3" json:"title,omitempty"`
	Signature            string                     `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	Email                string                     `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerify          uint32                     `protobuf:"varint,10,opt,name=email_verify,json=emailVerify,proto3" json:"email_verify,omitempty"`
	Gold                 uint32                     `protobuf:"varint,11,opt,name=gold,proto3" json:"gold,omitempty"`
	Diamond              uint32                     `protobuf:"varint,12,opt,name=diamond,proto3" json:"diamond,omitempty"`
	AvatarId             uint32                     `protobuf:"varint,13,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Vip                  uint32                     `protobuf:"varint,14,opt,name=vip,proto3" json:"vip,omitempty"`
	Birthday             int32                      `protobuf:"varint,15,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Phone                string                     `protobuf:"bytes,16,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneVerify          uint32                     `protobuf:"varint,17,opt,name=phone_verify,json=phoneVerify,proto3" json:"phone_verify,omitempty"`
	PlatformDiamond      []*Account_PlatformDiamond `protobuf:"bytes,18,rep,name=platform_diamond,json=platformDiamond,proto3" json:"platform_diamond,omitempty"`
	Level                *AccountLevel              `protobuf:"bytes,21,opt,name=level,proto3" json:"level,omitempty"`
	Level3               *AccountLevel              `protobuf:"bytes,22,opt,name=level3,proto3" json:"level3,omitempty"`
	AvatarFrame          uint32                     `protobuf:"varint,23,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{41}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Account) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Account) GetLoginTime() uint32 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *Account) GetLogoutTime() uint32 {
	if m != nil {
		return m.LogoutTime
	}
	return 0
}

func (m *Account) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *Account) GetAntiAddiction() *AntiAddiction {
	if m != nil {
		return m.AntiAddiction
	}
	return nil
}

func (m *Account) GetTitle() uint32 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *Account) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Account) GetEmailVerify() uint32 {
	if m != nil {
		return m.EmailVerify
	}
	return 0
}

func (m *Account) GetGold() uint32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *Account) GetDiamond() uint32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *Account) GetAvatarId() uint32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *Account) GetVip() uint32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *Account) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *Account) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Account) GetPhoneVerify() uint32 {
	if m != nil {
		return m.PhoneVerify
	}
	return 0
}

func (m *Account) GetPlatformDiamond() []*Account_PlatformDiamond {
	if m != nil {
		return m.PlatformDiamond
	}
	return nil
}

func (m *Account) GetLevel() *AccountLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *Account) GetLevel3() *AccountLevel {
	if m != nil {
		return m.Level3
	}
	return nil
}

func (m *Account) GetAvatarFrame() uint32 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

type Account_PlatformDiamond struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account_PlatformDiamond) Reset()         { *m = Account_PlatformDiamond{} }
func (m *Account_PlatformDiamond) String() string { return proto.CompactTextString(m) }
func (*Account_PlatformDiamond) ProtoMessage()    {}
func (*Account_PlatformDiamond) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{41, 0}
}
func (m *Account_PlatformDiamond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account_PlatformDiamond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account_PlatformDiamond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account_PlatformDiamond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account_PlatformDiamond.Merge(m, src)
}
func (m *Account_PlatformDiamond) XXX_Size() int {
	return m.Size()
}
func (m *Account_PlatformDiamond) XXX_DiscardUnknown() {
	xxx_messageInfo_Account_PlatformDiamond.DiscardUnknown(m)
}

var xxx_messageInfo_Account_PlatformDiamond proto.InternalMessageInfo

func (m *Account_PlatformDiamond) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account_PlatformDiamond) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AccountOwnerData struct {
	UnlockCharacters     []uint32 `protobuf:"varint,1,rep,packed,name=unlock_characters,json=unlockCharacters,proto3" json:"unlock_characters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountOwnerData) Reset()         { *m = AccountOwnerData{} }
func (m *AccountOwnerData) String() string { return proto.CompactTextString(m) }
func (*AccountOwnerData) ProtoMessage()    {}
func (*AccountOwnerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{42}
}
func (m *AccountOwnerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountOwnerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountOwnerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountOwnerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountOwnerData.Merge(m, src)
}
func (m *AccountOwnerData) XXX_Size() int {
	return m.Size()
}
func (m *AccountOwnerData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountOwnerData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountOwnerData proto.InternalMessageInfo

func (m *AccountOwnerData) GetUnlockCharacters() []uint32 {
	if m != nil {
		return m.UnlockCharacters
	}
	return nil
}

type AccountUpdate struct {
	Numerical            []*AccountUpdate_NumericalUpdate      `protobuf:"bytes,1,rep,name=numerical,proto3" json:"numerical,omitempty"`
	Character            *AccountUpdate_CharacterUpdate        `protobuf:"bytes,2,opt,name=character,proto3" json:"character,omitempty"`
	Bag                  *BagUpdate                            `protobuf:"bytes,3,opt,name=bag,proto3" json:"bag,omitempty"`
	Achievement          *AccountUpdate_AchievementUpdate      `protobuf:"bytes,4,opt,name=achievement,proto3" json:"achievement,omitempty"`
	Shilian              *AccountShiLian                       `protobuf:"bytes,5,opt,name=shilian,proto3" json:"shilian,omitempty"`
	DailyTask            *AccountUpdate_DailyTaskUpdate        `protobuf:"bytes,6,opt,name=daily_task,json=dailyTask,proto3" json:"daily_task,omitempty"`
	Title                *AccountUpdate_TitleUpdate            `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	NewRechargedList     []uint32                              `protobuf:"varint,8,rep,packed,name=new_recharged_list,json=newRechargedList,proto3" json:"new_recharged_list,omitempty"`
	ActivityTask         *AccountUpdate_ActivityTaskUpdate     `protobuf:"bytes,9,opt,name=activity_task,json=activityTask,proto3" json:"activity_task,omitempty"`
	ActivityFlipTask     *AccountUpdate_ActivityFlipTaskUpdate `protobuf:"bytes,10,opt,name=activity_flip_task,json=activityFlipTask,proto3" json:"activity_flip_task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *AccountUpdate) Reset()         { *m = AccountUpdate{} }
func (m *AccountUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate) ProtoMessage()    {}
func (*AccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43}
}
func (m *AccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate.Merge(m, src)
}
func (m *AccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate proto.InternalMessageInfo

func (m *AccountUpdate) GetNumerical() []*AccountUpdate_NumericalUpdate {
	if m != nil {
		return m.Numerical
	}
	return nil
}

func (m *AccountUpdate) GetCharacter() *AccountUpdate_CharacterUpdate {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *AccountUpdate) GetBag() *BagUpdate {
	if m != nil {
		return m.Bag
	}
	return nil
}

func (m *AccountUpdate) GetAchievement() *AccountUpdate_AchievementUpdate {
	if m != nil {
		return m.Achievement
	}
	return nil
}

func (m *AccountUpdate) GetShilian() *AccountShiLian {
	if m != nil {
		return m.Shilian
	}
	return nil
}

func (m *AccountUpdate) GetDailyTask() *AccountUpdate_DailyTaskUpdate {
	if m != nil {
		return m.DailyTask
	}
	return nil
}

func (m *AccountUpdate) GetTitle() *AccountUpdate_TitleUpdate {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *AccountUpdate) GetNewRechargedList() []uint32 {
	if m != nil {
		return m.NewRechargedList
	}
	return nil
}

func (m *AccountUpdate) GetActivityTask() *AccountUpdate_ActivityTaskUpdate {
	if m != nil {
		return m.ActivityTask
	}
	return nil
}

func (m *AccountUpdate) GetActivityFlipTask() *AccountUpdate_ActivityFlipTaskUpdate {
	if m != nil {
		return m.ActivityFlipTask
	}
	return nil
}

type AccountUpdate_NumericalUpdate struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Final                uint32   `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountUpdate_NumericalUpdate) Reset()         { *m = AccountUpdate_NumericalUpdate{} }
func (m *AccountUpdate_NumericalUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_NumericalUpdate) ProtoMessage()    {}
func (*AccountUpdate_NumericalUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 0}
}
func (m *AccountUpdate_NumericalUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_NumericalUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_NumericalUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_NumericalUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_NumericalUpdate.Merge(m, src)
}
func (m *AccountUpdate_NumericalUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_NumericalUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_NumericalUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_NumericalUpdate proto.InternalMessageInfo

func (m *AccountUpdate_NumericalUpdate) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AccountUpdate_NumericalUpdate) GetFinal() uint32 {
	if m != nil {
		return m.Final
	}
	return 0
}

type AccountUpdate_CharacterUpdate struct {
	Characters           []*Character `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
	Skins                []uint32     `protobuf:"varint,3,rep,packed,name=skins,proto3" json:"skins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AccountUpdate_CharacterUpdate) Reset()         { *m = AccountUpdate_CharacterUpdate{} }
func (m *AccountUpdate_CharacterUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_CharacterUpdate) ProtoMessage()    {}
func (*AccountUpdate_CharacterUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 1}
}
func (m *AccountUpdate_CharacterUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_CharacterUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_CharacterUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_CharacterUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_CharacterUpdate.Merge(m, src)
}
func (m *AccountUpdate_CharacterUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_CharacterUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_CharacterUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_CharacterUpdate proto.InternalMessageInfo

func (m *AccountUpdate_CharacterUpdate) GetCharacters() []*Character {
	if m != nil {
		return m.Characters
	}
	return nil
}

func (m *AccountUpdate_CharacterUpdate) GetSkins() []uint32 {
	if m != nil {
		return m.Skins
	}
	return nil
}

type AccountUpdate_AchievementUpdate struct {
	Progresses           []*AchievementProgress `protobuf:"bytes,1,rep,name=progresses,proto3" json:"progresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AccountUpdate_AchievementUpdate) Reset()         { *m = AccountUpdate_AchievementUpdate{} }
func (m *AccountUpdate_AchievementUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_AchievementUpdate) ProtoMessage()    {}
func (*AccountUpdate_AchievementUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 2}
}
func (m *AccountUpdate_AchievementUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_AchievementUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_AchievementUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_AchievementUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_AchievementUpdate.Merge(m, src)
}
func (m *AccountUpdate_AchievementUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_AchievementUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_AchievementUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_AchievementUpdate proto.InternalMessageInfo

func (m *AccountUpdate_AchievementUpdate) GetProgresses() []*AchievementProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type AccountUpdate_DailyTaskUpdate struct {
	Progresses           []*TaskProgress `protobuf:"bytes,1,rep,name=progresses,proto3" json:"progresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AccountUpdate_DailyTaskUpdate) Reset()         { *m = AccountUpdate_DailyTaskUpdate{} }
func (m *AccountUpdate_DailyTaskUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_DailyTaskUpdate) ProtoMessage()    {}
func (*AccountUpdate_DailyTaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 3}
}
func (m *AccountUpdate_DailyTaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_DailyTaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_DailyTaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_DailyTaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_DailyTaskUpdate.Merge(m, src)
}
func (m *AccountUpdate_DailyTaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_DailyTaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_DailyTaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_DailyTaskUpdate proto.InternalMessageInfo

func (m *AccountUpdate_DailyTaskUpdate) GetProgresses() []*TaskProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type AccountUpdate_TitleUpdate struct {
	NewTitles            []uint32 `protobuf:"varint,1,rep,packed,name=new_titles,json=newTitles,proto3" json:"new_titles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountUpdate_TitleUpdate) Reset()         { *m = AccountUpdate_TitleUpdate{} }
func (m *AccountUpdate_TitleUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_TitleUpdate) ProtoMessage()    {}
func (*AccountUpdate_TitleUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 4}
}
func (m *AccountUpdate_TitleUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_TitleUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_TitleUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_TitleUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_TitleUpdate.Merge(m, src)
}
func (m *AccountUpdate_TitleUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_TitleUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_TitleUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_TitleUpdate proto.InternalMessageInfo

func (m *AccountUpdate_TitleUpdate) GetNewTitles() []uint32 {
	if m != nil {
		return m.NewTitles
	}
	return nil
}

type AccountUpdate_ActivityTaskUpdate struct {
	Progresses           []*TaskProgress `protobuf:"bytes,1,rep,name=progresses,proto3" json:"progresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AccountUpdate_ActivityTaskUpdate) Reset()         { *m = AccountUpdate_ActivityTaskUpdate{} }
func (m *AccountUpdate_ActivityTaskUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_ActivityTaskUpdate) ProtoMessage()    {}
func (*AccountUpdate_ActivityTaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 5}
}
func (m *AccountUpdate_ActivityTaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_ActivityTaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_ActivityTaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_ActivityTaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_ActivityTaskUpdate.Merge(m, src)
}
func (m *AccountUpdate_ActivityTaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_ActivityTaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_ActivityTaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_ActivityTaskUpdate proto.InternalMessageInfo

func (m *AccountUpdate_ActivityTaskUpdate) GetProgresses() []*TaskProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type AccountUpdate_ActivityFlipTaskUpdate struct {
	Progresses           []*TaskProgress `protobuf:"bytes,1,rep,name=progresses,proto3" json:"progresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AccountUpdate_ActivityFlipTaskUpdate) Reset()         { *m = AccountUpdate_ActivityFlipTaskUpdate{} }
func (m *AccountUpdate_ActivityFlipTaskUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_ActivityFlipTaskUpdate) ProtoMessage()    {}
func (*AccountUpdate_ActivityFlipTaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{43, 6}
}
func (m *AccountUpdate_ActivityFlipTaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_ActivityFlipTaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_ActivityFlipTaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_ActivityFlipTaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_ActivityFlipTaskUpdate.Merge(m, src)
}
func (m *AccountUpdate_ActivityFlipTaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_ActivityFlipTaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_ActivityFlipTaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_ActivityFlipTaskUpdate proto.InternalMessageInfo

func (m *AccountUpdate_ActivityFlipTaskUpdate) GetProgresses() []*TaskProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type GameMetaData struct {
	RoomId               uint32   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ModeId               uint32   `protobuf:"varint,2,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	ContestUid           uint32   `protobuf:"varint,3,opt,name=contest_uid,json=contestUid,proto3" json:"contest_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameMetaData) Reset()         { *m = GameMetaData{} }
func (m *GameMetaData) String() string { return proto.CompactTextString(m) }
func (*GameMetaData) ProtoMessage()    {}
func (*GameMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{44}
}
func (m *GameMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMetaData.Merge(m, src)
}
func (m *GameMetaData) XXX_Size() int {
	return m.Size()
}
func (m *GameMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_GameMetaData proto.InternalMessageInfo

func (m *GameMetaData) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GameMetaData) GetModeId() uint32 {
	if m != nil {
		return m.ModeId
	}
	return 0
}

func (m *GameMetaData) GetContestUid() uint32 {
	if m != nil {
		return m.ContestUid
	}
	return 0
}

type AccountPlayingGame struct {
	GameUuid             string        `protobuf:"bytes,1,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	Category             uint32        `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty"`
	Meta                 *GameMetaData `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AccountPlayingGame) Reset()         { *m = AccountPlayingGame{} }
func (m *AccountPlayingGame) String() string { return proto.CompactTextString(m) }
func (*AccountPlayingGame) ProtoMessage()    {}
func (*AccountPlayingGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{45}
}
func (m *AccountPlayingGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPlayingGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPlayingGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPlayingGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPlayingGame.Merge(m, src)
}
func (m *AccountPlayingGame) XXX_Size() int {
	return m.Size()
}
func (m *AccountPlayingGame) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPlayingGame.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPlayingGame proto.InternalMessageInfo

func (m *AccountPlayingGame) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

func (m *AccountPlayingGame) GetCategory() uint32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *AccountPlayingGame) GetMeta() *GameMetaData {
	if m != nil {
		return m.Meta
	}
	return nil
}

type AccountCacheView struct {
	CacheVersion         uint32              `protobuf:"varint,1,opt,name=cache_version,json=cacheVersion,proto3" json:"cache_version,omitempty"`
	AccountId            uint32              `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Nickname             string              `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	LoginTime            uint32              `protobuf:"varint,4,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	LogoutTime           uint32              `protobuf:"varint,5,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	IsOnline             bool                `protobuf:"varint,6,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	RoomId               uint32              `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Title                uint32              `protobuf:"varint,8,opt,name=title,proto3" json:"title,omitempty"`
	AvatarId             uint32              `protobuf:"varint,9,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Vip                  uint32              `protobuf:"varint,10,opt,name=vip,proto3" json:"vip,omitempty"`
	Level                *AccountLevel       `protobuf:"bytes,11,opt,name=level,proto3" json:"level,omitempty"`
	PlayingGame          *AccountPlayingGame `protobuf:"bytes,12,opt,name=playing_game,json=playingGame,proto3" json:"playing_game,omitempty"`
	Level3               *AccountLevel       `protobuf:"bytes,13,opt,name=level3,proto3" json:"level3,omitempty"`
	AvatarFrame          uint32              `protobuf:"varint,14,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AccountCacheView) Reset()         { *m = AccountCacheView{} }
func (m *AccountCacheView) String() string { return proto.CompactTextString(m) }
func (*AccountCacheView) ProtoMessage()    {}
func (*AccountCacheView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{46}
}
func (m *AccountCacheView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountCacheView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountCacheView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountCacheView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCacheView.Merge(m, src)
}
func (m *AccountCacheView) XXX_Size() int {
	return m.Size()
}
func (m *AccountCacheView) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCacheView.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCacheView proto.InternalMessageInfo

func (m *AccountCacheView) GetCacheVersion() uint32 {
	if m != nil {
		return m.CacheVersion
	}
	return 0
}

func (m *AccountCacheView) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AccountCacheView) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AccountCacheView) GetLoginTime() uint32 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *AccountCacheView) GetLogoutTime() uint32 {
	if m != nil {
		return m.LogoutTime
	}
	return 0
}

func (m *AccountCacheView) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *AccountCacheView) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *AccountCacheView) GetTitle() uint32 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *AccountCacheView) GetAvatarId() uint32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *AccountCacheView) GetVip() uint32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *AccountCacheView) GetLevel() *AccountLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *AccountCacheView) GetPlayingGame() *AccountPlayingGame {
	if m != nil {
		return m.PlayingGame
	}
	return nil
}

func (m *AccountCacheView) GetLevel3() *AccountLevel {
	if m != nil {
		return m.Level3
	}
	return nil
}

func (m *AccountCacheView) GetAvatarFrame() uint32 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

type PlayerBaseView struct {
	AccountId            uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AvatarId             uint32        `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Title                uint32        `protobuf:"varint,3,opt,name=title,proto3" json:"title,omitempty"`
	Nickname             string        `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level                *AccountLevel `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Level3               *AccountLevel `protobuf:"bytes,6,opt,name=level3,proto3" json:"level3,omitempty"`
	AvatarFrame          uint32        `protobuf:"varint,7,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlayerBaseView) Reset()         { *m = PlayerBaseView{} }
func (m *PlayerBaseView) String() string { return proto.CompactTextString(m) }
func (*PlayerBaseView) ProtoMessage()    {}
func (*PlayerBaseView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{47}
}
func (m *PlayerBaseView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBaseView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBaseView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBaseView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBaseView.Merge(m, src)
}
func (m *PlayerBaseView) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBaseView) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBaseView.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBaseView proto.InternalMessageInfo

func (m *PlayerBaseView) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PlayerBaseView) GetAvatarId() uint32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *PlayerBaseView) GetTitle() uint32 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *PlayerBaseView) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *PlayerBaseView) GetLevel() *AccountLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *PlayerBaseView) GetLevel3() *AccountLevel {
	if m != nil {
		return m.Level3
	}
	return nil
}

func (m *PlayerBaseView) GetAvatarFrame() uint32 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

type PlayerGameView struct {
	AccountId            uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AvatarId             uint32        `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Title                uint32        `protobuf:"varint,3,opt,name=title,proto3" json:"title,omitempty"`
	Nickname             string        `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level                *AccountLevel `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Character            *Character    `protobuf:"bytes,6,opt,name=character,proto3" json:"character,omitempty"`
	Level3               *AccountLevel `protobuf:"bytes,7,opt,name=level3,proto3" json:"level3,omitempty"`
	AvatarFrame          uint32        `protobuf:"varint,8,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlayerGameView) Reset()         { *m = PlayerGameView{} }
func (m *PlayerGameView) String() string { return proto.CompactTextString(m) }
func (*PlayerGameView) ProtoMessage()    {}
func (*PlayerGameView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{48}
}
func (m *PlayerGameView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerGameView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerGameView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerGameView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerGameView.Merge(m, src)
}
func (m *PlayerGameView) XXX_Size() int {
	return m.Size()
}
func (m *PlayerGameView) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerGameView.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerGameView proto.InternalMessageInfo

func (m *PlayerGameView) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PlayerGameView) GetAvatarId() uint32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *PlayerGameView) GetTitle() uint32 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *PlayerGameView) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *PlayerGameView) GetLevel() *AccountLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *PlayerGameView) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *PlayerGameView) GetLevel3() *AccountLevel {
	if m != nil {
		return m.Level3
	}
	return nil
}

func (m *PlayerGameView) GetAvatarFrame() uint32 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

type GameMode struct {
	Mode                 uint32                     `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Ai                   bool                       `protobuf:"varint,4,opt,name=ai,proto3" json:"ai,omitempty"`
	Extendinfo           string                     `protobuf:"bytes,5,opt,name=extendinfo,proto3" json:"extendinfo,omitempty"`
	DetailRule           *GameDetailRule            `protobuf:"bytes,6,opt,name=detail_rule,json=detailRule,proto3" json:"detail_rule,omitempty"`
	TestingEnvironment   *GameTestingEnvironmentSet `protobuf:"bytes,7,opt,name=testing_environment,json=testingEnvironment,proto3" json:"testing_environment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GameMode) Reset()         { *m = GameMode{} }
func (m *GameMode) String() string { return proto.CompactTextString(m) }
func (*GameMode) ProtoMessage()    {}
func (*GameMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{49}
}
func (m *GameMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMode.Merge(m, src)
}
func (m *GameMode) XXX_Size() int {
	return m.Size()
}
func (m *GameMode) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMode.DiscardUnknown(m)
}

var xxx_messageInfo_GameMode proto.InternalMessageInfo

func (m *GameMode) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *GameMode) GetAi() bool {
	if m != nil {
		return m.Ai
	}
	return false
}

func (m *GameMode) GetExtendinfo() string {
	if m != nil {
		return m.Extendinfo
	}
	return ""
}

func (m *GameMode) GetDetailRule() *GameDetailRule {
	if m != nil {
		return m.DetailRule
	}
	return nil
}

func (m *GameMode) GetTestingEnvironment() *GameTestingEnvironmentSet {
	if m != nil {
		return m.TestingEnvironment
	}
	return nil
}

type GameTestingEnvironmentSet struct {
	Paixing              uint32   `protobuf:"varint,1,opt,name=paixing,proto3" json:"paixing,omitempty"`
	LeftCount            uint32   `protobuf:"varint,2,opt,name=left_count,json=leftCount,proto3" json:"left_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameTestingEnvironmentSet) Reset()         { *m = GameTestingEnvironmentSet{} }
func (m *GameTestingEnvironmentSet) String() string { return proto.CompactTextString(m) }
func (*GameTestingEnvironmentSet) ProtoMessage()    {}
func (*GameTestingEnvironmentSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{50}
}
func (m *GameTestingEnvironmentSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameTestingEnvironmentSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameTestingEnvironmentSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameTestingEnvironmentSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameTestingEnvironmentSet.Merge(m, src)
}
func (m *GameTestingEnvironmentSet) XXX_Size() int {
	return m.Size()
}
func (m *GameTestingEnvironmentSet) XXX_DiscardUnknown() {
	xxx_messageInfo_GameTestingEnvironmentSet.DiscardUnknown(m)
}

var xxx_messageInfo_GameTestingEnvironmentSet proto.InternalMessageInfo

func (m *GameTestingEnvironmentSet) GetPaixing() uint32 {
	if m != nil {
		return m.Paixing
	}
	return 0
}

func (m *GameTestingEnvironmentSet) GetLeftCount() uint32 {
	if m != nil {
		return m.LeftCount
	}
	return 0
}

type GameDetailRule struct {
	TimeFixed               uint32   `protobuf:"varint,1,opt,name=time_fixed,json=timeFixed,proto3" json:"time_fixed,omitempty"`
	TimeAdd                 uint32   `protobuf:"varint,2,opt,name=time_add,json=timeAdd,proto3" json:"time_add,omitempty"`
	DoraCount               uint32   `protobuf:"varint,3,opt,name=dora_count,json=doraCount,proto3" json:"dora_count,omitempty"`
	Shiduan                 uint32   `protobuf:"varint,4,opt,name=shiduan,proto3" json:"shiduan,omitempty"`
	InitPoint               uint32   `protobuf:"varint,5,opt,name=init_point,json=initPoint,proto3" json:"init_point,omitempty"`
	Fandian                 uint32   `protobuf:"varint,6,opt,name=fandian,proto3" json:"fandian,omitempty"`
	CanJifei                bool     `protobuf:"varint,7,opt,name=can_jifei,json=canJifei,proto3" json:"can_jifei,omitempty"`
	TianbianValue           uint32   `protobuf:"varint,8,opt,name=tianbian_value,json=tianbianValue,proto3" json:"tianbian_value,omitempty"`
	LiqibangValue           uint32   `protobuf:"varint,9,opt,name=liqibang_value,json=liqibangValue,proto3" json:"liqibang_value,omitempty"`
	ChangbangValue          uint32   `protobuf:"varint,10,opt,name=changbang_value,json=changbangValue,proto3" json:"changbang_value,omitempty"`
	NotingFafu_1            uint32   `protobuf:"varint,11,opt,name=noting_fafu_1,json=notingFafu1,proto3" json:"noting_fafu_1,omitempty"`
	NotingFafu_2            uint32   `protobuf:"varint,12,opt,name=noting_fafu_2,json=notingFafu2,proto3" json:"noting_fafu_2,omitempty"`
	NotingFafu_3            uint32   `protobuf:"varint,13,opt,name=noting_fafu_3,json=notingFafu3,proto3" json:"noting_fafu_3,omitempty"`
	HaveLiujumanguan        bool     `protobuf:"varint,14,opt,name=have_liujumanguan,json=haveLiujumanguan,proto3" json:"have_liujumanguan,omitempty"`
	HaveQieshangmanguan     bool     `protobuf:"varint,15,opt,name=have_qieshangmanguan,json=haveQieshangmanguan,proto3" json:"have_qieshangmanguan,omitempty"`
	HaveBiaoDora            bool     `protobuf:"varint,16,opt,name=have_biao_dora,json=haveBiaoDora,proto3" json:"have_biao_dora,omitempty"`
	HaveGangBiaoDora        bool     `protobuf:"varint,17,opt,name=have_gang_biao_dora,json=haveGangBiaoDora,proto3" json:"have_gang_biao_dora,omitempty"`
	MingDoraImmediatelyOpen bool     `protobuf:"varint,18,opt,name=ming_dora_immediately_open,json=mingDoraImmediatelyOpen,proto3" json:"ming_dora_immediately_open,omitempty"`
	HaveLiDora              bool     `protobuf:"varint,19,opt,name=have_li_dora,json=haveLiDora,proto3" json:"have_li_dora,omitempty"`
	HaveGangLiDora          bool     `protobuf:"varint,20,opt,name=have_gang_li_dora,json=haveGangLiDora,proto3" json:"have_gang_li_dora,omitempty"`
	HaveSifenglianda        bool     `protobuf:"varint,21,opt,name=have_sifenglianda,json=haveSifenglianda,proto3" json:"have_sifenglianda,omitempty"`
	HaveSigangsanle         bool     `protobuf:"varint,22,opt,name=have_sigangsanle,json=haveSigangsanle,proto3" json:"have_sigangsanle,omitempty"`
	HaveSijializhi          bool     `protobuf:"varint,23,opt,name=have_sijializhi,json=haveSijializhi,proto3" json:"have_sijializhi,omitempty"`
	HaveJiuzhongjiupai      bool     `protobuf:"varint,24,opt,name=have_jiuzhongjiupai,json=haveJiuzhongjiupai,proto3" json:"have_jiuzhongjiupai,omitempty"`
	HaveSanjiahele          bool     `protobuf:"varint,25,opt,name=have_sanjiahele,json=haveSanjiahele,proto3" json:"have_sanjiahele,omitempty"`
	HaveToutiao             bool     `protobuf:"varint,26,opt,name=have_toutiao,json=haveToutiao,proto3" json:"have_toutiao,omitempty"`
	HaveHelelianzhuang      bool     `protobuf:"varint,27,opt,name=have_helelianzhuang,json=haveHelelianzhuang,proto3" json:"have_helelianzhuang,omitempty"`
	HaveHelezhongju         bool     `protobuf:"varint,28,opt,name=have_helezhongju,json=haveHelezhongju,proto3" json:"have_helezhongju,omitempty"`
	HaveTingpailianzhuang   bool     `protobuf:"varint,29,opt,name=have_tingpailianzhuang,json=haveTingpailianzhuang,proto3" json:"have_tingpailianzhuang,omitempty"`
	HaveTingpaizhongju      bool     `protobuf:"varint,30,opt,name=have_tingpaizhongju,json=haveTingpaizhongju,proto3" json:"have_tingpaizhongju,omitempty"`
	HaveYifa                bool     `protobuf:"varint,31,opt,name=have_yifa,json=haveYifa,proto3" json:"have_yifa,omitempty"`
	HaveNanruxiru           bool     `protobuf:"varint,32,opt,name=have_nanruxiru,json=haveNanruxiru,proto3" json:"have_nanruxiru,omitempty"`
	Jingsuanyuandian        uint32   `protobuf:"varint,33,opt,name=jingsuanyuandian,proto3" json:"jingsuanyuandian,omitempty"`
	Shunweima_2             int32    `protobuf:"varint,34,opt,name=shunweima_2,json=shunweima2,proto3" json:"shunweima_2,omitempty"`
	Shunweima_3             int32    `protobuf:"varint,35,opt,name=shunweima_3,json=shunweima3,proto3" json:"shunweima_3,omitempty"`
	Shunweima_4             int32    `protobuf:"varint,36,opt,name=shunweima_4,json=shunweima4,proto3" json:"shunweima_4,omitempty"`
	Bianjietishi            bool     `protobuf:"varint,37,opt,name=bianjietishi,proto3" json:"bianjietishi,omitempty"`
	AiLevel                 uint32   `protobuf:"varint,38,opt,name=ai_level,json=aiLevel,proto3" json:"ai_level,omitempty"`
	HaveZimosun             bool     `protobuf:"varint,39,opt,name=have_zimosun,json=haveZimosun,proto3" json:"have_zimosun,omitempty"`
	DisableMultiYukaman     bool     `protobuf:"varint,40,opt,name=disable_multi_yukaman,json=disableMultiYukaman,proto3" json:"disable_multi_yukaman,omitempty"`
	Fanfu                   uint32   `protobuf:"varint,41,opt,name=fanfu,proto3" json:"fanfu,omitempty"`
	GuyiMode                uint32   `protobuf:"varint,42,opt,name=guyi_mode,json=guyiMode,proto3" json:"guyi_mode,omitempty"`
	Dora3Mode               uint32   `protobuf:"varint,43,opt,name=dora3_mode,json=dora3Mode,proto3" json:"dora3_mode,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *GameDetailRule) Reset()         { *m = GameDetailRule{} }
func (m *GameDetailRule) String() string { return proto.CompactTextString(m) }
func (*GameDetailRule) ProtoMessage()    {}
func (*GameDetailRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{51}
}
func (m *GameDetailRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameDetailRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameDetailRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameDetailRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameDetailRule.Merge(m, src)
}
func (m *GameDetailRule) XXX_Size() int {
	return m.Size()
}
func (m *GameDetailRule) XXX_DiscardUnknown() {
	xxx_messageInfo_GameDetailRule.DiscardUnknown(m)
}

var xxx_messageInfo_GameDetailRule proto.InternalMessageInfo

func (m *GameDetailRule) GetTimeFixed() uint32 {
	if m != nil {
		return m.TimeFixed
	}
	return 0
}

func (m *GameDetailRule) GetTimeAdd() uint32 {
	if m != nil {
		return m.TimeAdd
	}
	return 0
}

func (m *GameDetailRule) GetDoraCount() uint32 {
	if m != nil {
		return m.DoraCount
	}
	return 0
}

func (m *GameDetailRule) GetShiduan() uint32 {
	if m != nil {
		return m.Shiduan
	}
	return 0
}

func (m *GameDetailRule) GetInitPoint() uint32 {
	if m != nil {
		return m.InitPoint
	}
	return 0
}

func (m *GameDetailRule) GetFandian() uint32 {
	if m != nil {
		return m.Fandian
	}
	return 0
}

func (m *GameDetailRule) GetCanJifei() bool {
	if m != nil {
		return m.CanJifei
	}
	return false
}

func (m *GameDetailRule) GetTianbianValue() uint32 {
	if m != nil {
		return m.TianbianValue
	}
	return 0
}

func (m *GameDetailRule) GetLiqibangValue() uint32 {
	if m != nil {
		return m.LiqibangValue
	}
	return 0
}

func (m *GameDetailRule) GetChangbangValue() uint32 {
	if m != nil {
		return m.ChangbangValue
	}
	return 0
}

func (m *GameDetailRule) GetNotingFafu_1() uint32 {
	if m != nil {
		return m.NotingFafu_1
	}
	return 0
}

func (m *GameDetailRule) GetNotingFafu_2() uint32 {
	if m != nil {
		return m.NotingFafu_2
	}
	return 0
}

func (m *GameDetailRule) GetNotingFafu_3() uint32 {
	if m != nil {
		return m.NotingFafu_3
	}
	return 0
}

func (m *GameDetailRule) GetHaveLiujumanguan() bool {
	if m != nil {
		return m.HaveLiujumanguan
	}
	return false
}

func (m *GameDetailRule) GetHaveQieshangmanguan() bool {
	if m != nil {
		return m.HaveQieshangmanguan
	}
	return false
}

func (m *GameDetailRule) GetHaveBiaoDora() bool {
	if m != nil {
		return m.HaveBiaoDora
	}
	return false
}

func (m *GameDetailRule) GetHaveGangBiaoDora() bool {
	if m != nil {
		return m.HaveGangBiaoDora
	}
	return false
}

func (m *GameDetailRule) GetMingDoraImmediatelyOpen() bool {
	if m != nil {
		return m.MingDoraImmediatelyOpen
	}
	return false
}

func (m *GameDetailRule) GetHaveLiDora() bool {
	if m != nil {
		return m.HaveLiDora
	}
	return false
}

func (m *GameDetailRule) GetHaveGangLiDora() bool {
	if m != nil {
		return m.HaveGangLiDora
	}
	return false
}

func (m *GameDetailRule) GetHaveSifenglianda() bool {
	if m != nil {
		return m.HaveSifenglianda
	}
	return false
}

func (m *GameDetailRule) GetHaveSigangsanle() bool {
	if m != nil {
		return m.HaveSigangsanle
	}
	return false
}

func (m *GameDetailRule) GetHaveSijializhi() bool {
	if m != nil {
		return m.HaveSijializhi
	}
	return false
}

func (m *GameDetailRule) GetHaveJiuzhongjiupai() bool {
	if m != nil {
		return m.HaveJiuzhongjiupai
	}
	return false
}

func (m *GameDetailRule) GetHaveSanjiahele() bool {
	if m != nil {
		return m.HaveSanjiahele
	}
	return false
}

func (m *GameDetailRule) GetHaveToutiao() bool {
	if m != nil {
		return m.HaveToutiao
	}
	return false
}

func (m *GameDetailRule) GetHaveHelelianzhuang() bool {
	if m != nil {
		return m.HaveHelelianzhuang
	}
	return false
}

func (m *GameDetailRule) GetHaveHelezhongju() bool {
	if m != nil {
		return m.HaveHelezhongju
	}
	return false
}

func (m *GameDetailRule) GetHaveTingpailianzhuang() bool {
	if m != nil {
		return m.HaveTingpailianzhuang
	}
	return false
}

func (m *GameDetailRule) GetHaveTingpaizhongju() bool {
	if m != nil {
		return m.HaveTingpaizhongju
	}
	return false
}

func (m *GameDetailRule) GetHaveYifa() bool {
	if m != nil {
		return m.HaveYifa
	}
	return false
}

func (m *GameDetailRule) GetHaveNanruxiru() bool {
	if m != nil {
		return m.HaveNanruxiru
	}
	return false
}

func (m *GameDetailRule) GetJingsuanyuandian() uint32 {
	if m != nil {
		return m.Jingsuanyuandian
	}
	return 0
}

func (m *GameDetailRule) GetShunweima_2() int32 {
	if m != nil {
		return m.Shunweima_2
	}
	return 0
}

func (m *GameDetailRule) GetShunweima_3() int32 {
	if m != nil {
		return m.Shunweima_3
	}
	return 0
}

func (m *GameDetailRule) GetShunweima_4() int32 {
	if m != nil {
		return m.Shunweima_4
	}
	return 0
}

func (m *GameDetailRule) GetBianjietishi() bool {
	if m != nil {
		return m.Bianjietishi
	}
	return false
}

func (m *GameDetailRule) GetAiLevel() uint32 {
	if m != nil {
		return m.AiLevel
	}
	return 0
}

func (m *GameDetailRule) GetHaveZimosun() bool {
	if m != nil {
		return m.HaveZimosun
	}
	return false
}

func (m *GameDetailRule) GetDisableMultiYukaman() bool {
	if m != nil {
		return m.DisableMultiYukaman
	}
	return false
}

func (m *GameDetailRule) GetFanfu() uint32 {
	if m != nil {
		return m.Fanfu
	}
	return 0
}

func (m *GameDetailRule) GetGuyiMode() uint32 {
	if m != nil {
		return m.GuyiMode
	}
	return 0
}

func (m *GameDetailRule) GetDora3Mode() uint32 {
	if m != nil {
		return m.Dora3Mode
	}
	return 0
}

type Room struct {
	RoomId               uint32            `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OwnerId              uint32            `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Mode                 *GameMode         `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	MaxPlayerCount       uint32            `protobuf:"varint,4,opt,name=max_player_count,json=maxPlayerCount,proto3" json:"max_player_count,omitempty"`
	Persons              []*PlayerGameView `protobuf:"bytes,5,rep,name=persons,proto3" json:"persons,omitempty"`
	ReadyList            []uint32          `protobuf:"varint,6,rep,packed,name=ready_list,json=readyList,proto3" json:"ready_list,omitempty"`
	IsPlaying            bool              `protobuf:"varint,7,opt,name=is_playing,json=isPlaying,proto3" json:"is_playing,omitempty"`
	PublicLive           bool              `protobuf:"varint,8,opt,name=public_live,json=publicLive,proto3" json:"public_live,omitempty"`
	RobotCount           uint32            `protobuf:"varint,9,opt,name=robot_count,json=robotCount,proto3" json:"robot_count,omitempty"`
	TournamentId         uint32            `protobuf:"varint,10,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Room) Reset()         { *m = Room{} }
func (m *Room) String() string { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()    {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{52}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *Room) GetOwnerId() uint32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *Room) GetMode() *GameMode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *Room) GetMaxPlayerCount() uint32 {
	if m != nil {
		return m.MaxPlayerCount
	}
	return 0
}

func (m *Room) GetPersons() []*PlayerGameView {
	if m != nil {
		return m.Persons
	}
	return nil
}

func (m *Room) GetReadyList() []uint32 {
	if m != nil {
		return m.ReadyList
	}
	return nil
}

func (m *Room) GetIsPlaying() bool {
	if m != nil {
		return m.IsPlaying
	}
	return false
}

func (m *Room) GetPublicLive() bool {
	if m != nil {
		return m.PublicLive
	}
	return false
}

func (m *Room) GetRobotCount() uint32 {
	if m != nil {
		return m.RobotCount
	}
	return 0
}

func (m *Room) GetTournamentId() uint32 {
	if m != nil {
		return m.TournamentId
	}
	return 0
}

type GameEndResult struct {
	Players              []*GameEndResult_PlayerItem `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GameEndResult) Reset()         { *m = GameEndResult{} }
func (m *GameEndResult) String() string { return proto.CompactTextString(m) }
func (*GameEndResult) ProtoMessage()    {}
func (*GameEndResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{53}
}
func (m *GameEndResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameEndResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameEndResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameEndResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEndResult.Merge(m, src)
}
func (m *GameEndResult) XXX_Size() int {
	return m.Size()
}
func (m *GameEndResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEndResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameEndResult proto.InternalMessageInfo

func (m *GameEndResult) GetPlayers() []*GameEndResult_PlayerItem {
	if m != nil {
		return m.Players
	}
	return nil
}

type GameEndResult_PlayerItem struct {
	Seat                 uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	TotalPoint           int32    `protobuf:"varint,2,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	PartPoint_1          int32    `protobuf:"varint,3,opt,name=part_point_1,json=partPoint1,proto3" json:"part_point_1,omitempty"`
	PartPoint_2          int32    `protobuf:"varint,4,opt,name=part_point_2,json=partPoint2,proto3" json:"part_point_2,omitempty"`
	GradingScore         int32    `protobuf:"varint,5,opt,name=grading_score,json=gradingScore,proto3" json:"grading_score,omitempty"`
	Gold                 int32    `protobuf:"varint,6,opt,name=gold,proto3" json:"gold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEndResult_PlayerItem) Reset()         { *m = GameEndResult_PlayerItem{} }
func (m *GameEndResult_PlayerItem) String() string { return proto.CompactTextString(m) }
func (*GameEndResult_PlayerItem) ProtoMessage()    {}
func (*GameEndResult_PlayerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{53, 0}
}
func (m *GameEndResult_PlayerItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameEndResult_PlayerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameEndResult_PlayerItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameEndResult_PlayerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEndResult_PlayerItem.Merge(m, src)
}
func (m *GameEndResult_PlayerItem) XXX_Size() int {
	return m.Size()
}
func (m *GameEndResult_PlayerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEndResult_PlayerItem.DiscardUnknown(m)
}

var xxx_messageInfo_GameEndResult_PlayerItem proto.InternalMessageInfo

func (m *GameEndResult_PlayerItem) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *GameEndResult_PlayerItem) GetTotalPoint() int32 {
	if m != nil {
		return m.TotalPoint
	}
	return 0
}

func (m *GameEndResult_PlayerItem) GetPartPoint_1() int32 {
	if m != nil {
		return m.PartPoint_1
	}
	return 0
}

func (m *GameEndResult_PlayerItem) GetPartPoint_2() int32 {
	if m != nil {
		return m.PartPoint_2
	}
	return 0
}

func (m *GameEndResult_PlayerItem) GetGradingScore() int32 {
	if m != nil {
		return m.GradingScore
	}
	return 0
}

func (m *GameEndResult_PlayerItem) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type GameConnectInfo struct {
	ConnectToken         string   `protobuf:"bytes,2,opt,name=connect_token,json=connectToken,proto3" json:"connect_token,omitempty"`
	GameUuid             string   `protobuf:"bytes,3,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	Location             string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameConnectInfo) Reset()         { *m = GameConnectInfo{} }
func (m *GameConnectInfo) String() string { return proto.CompactTextString(m) }
func (*GameConnectInfo) ProtoMessage()    {}
func (*GameConnectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{54}
}
func (m *GameConnectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameConnectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameConnectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameConnectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConnectInfo.Merge(m, src)
}
func (m *GameConnectInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameConnectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConnectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameConnectInfo proto.InternalMessageInfo

func (m *GameConnectInfo) GetConnectToken() string {
	if m != nil {
		return m.ConnectToken
	}
	return ""
}

func (m *GameConnectInfo) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

func (m *GameConnectInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type ItemGainRecord struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemGainRecord) Reset()         { *m = ItemGainRecord{} }
func (m *ItemGainRecord) String() string { return proto.CompactTextString(m) }
func (*ItemGainRecord) ProtoMessage()    {}
func (*ItemGainRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{55}
}
func (m *ItemGainRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemGainRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemGainRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemGainRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemGainRecord.Merge(m, src)
}
func (m *ItemGainRecord) XXX_Size() int {
	return m.Size()
}
func (m *ItemGainRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemGainRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ItemGainRecord proto.InternalMessageInfo

func (m *ItemGainRecord) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ItemGainRecord) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ItemGainRecords struct {
	RecordTime           uint32            `protobuf:"varint,1,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	LimitSourceId        uint32            `protobuf:"varint,2,opt,name=limit_source_id,json=limitSourceId,proto3" json:"limit_source_id,omitempty"`
	Records              []*ItemGainRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ItemGainRecords) Reset()         { *m = ItemGainRecords{} }
func (m *ItemGainRecords) String() string { return proto.CompactTextString(m) }
func (*ItemGainRecords) ProtoMessage()    {}
func (*ItemGainRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{56}
}
func (m *ItemGainRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemGainRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemGainRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemGainRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemGainRecords.Merge(m, src)
}
func (m *ItemGainRecords) XXX_Size() int {
	return m.Size()
}
func (m *ItemGainRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemGainRecords.DiscardUnknown(m)
}

var xxx_messageInfo_ItemGainRecords proto.InternalMessageInfo

func (m *ItemGainRecords) GetRecordTime() uint32 {
	if m != nil {
		return m.RecordTime
	}
	return 0
}

func (m *ItemGainRecords) GetLimitSourceId() uint32 {
	if m != nil {
		return m.LimitSourceId
	}
	return 0
}

func (m *ItemGainRecords) GetRecords() []*ItemGainRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type Item struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Stack                uint32   `protobuf:"varint,2,opt,name=stack,proto3" json:"stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{57}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Item) GetStack() uint32 {
	if m != nil {
		return m.Stack
	}
	return 0
}

type Bag struct {
	Items                []*Item            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	DailyGainRecord      []*ItemGainRecords `protobuf:"bytes,2,rep,name=daily_gain_record,json=dailyGainRecord,proto3" json:"daily_gain_record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Bag) Reset()         { *m = Bag{} }
func (m *Bag) String() string { return proto.CompactTextString(m) }
func (*Bag) ProtoMessage()    {}
func (*Bag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{58}
}
func (m *Bag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag.Merge(m, src)
}
func (m *Bag) XXX_Size() int {
	return m.Size()
}
func (m *Bag) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag.DiscardUnknown(m)
}

var xxx_messageInfo_Bag proto.InternalMessageInfo

func (m *Bag) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Bag) GetDailyGainRecord() []*ItemGainRecords {
	if m != nil {
		return m.DailyGainRecord
	}
	return nil
}

type BagUpdate struct {
	UpdateItems           []*Item            `protobuf:"bytes,1,rep,name=update_items,json=updateItems,proto3" json:"update_items,omitempty"`
	UpdateDailyGainRecord []*ItemGainRecords `protobuf:"bytes,2,rep,name=update_daily_gain_record,json=updateDailyGainRecord,proto3" json:"update_daily_gain_record,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *BagUpdate) Reset()         { *m = BagUpdate{} }
func (m *BagUpdate) String() string { return proto.CompactTextString(m) }
func (*BagUpdate) ProtoMessage()    {}
func (*BagUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{59}
}
func (m *BagUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BagUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BagUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BagUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BagUpdate.Merge(m, src)
}
func (m *BagUpdate) XXX_Size() int {
	return m.Size()
}
func (m *BagUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_BagUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_BagUpdate proto.InternalMessageInfo

func (m *BagUpdate) GetUpdateItems() []*Item {
	if m != nil {
		return m.UpdateItems
	}
	return nil
}

func (m *BagUpdate) GetUpdateDailyGainRecord() []*ItemGainRecords {
	if m != nil {
		return m.UpdateDailyGainRecord
	}
	return nil
}

type RewardSlot struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardSlot) Reset()         { *m = RewardSlot{} }
func (m *RewardSlot) String() string { return proto.CompactTextString(m) }
func (*RewardSlot) ProtoMessage()    {}
func (*RewardSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{60}
}
func (m *RewardSlot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardSlot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardSlot.Merge(m, src)
}
func (m *RewardSlot) XXX_Size() int {
	return m.Size()
}
func (m *RewardSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardSlot.DiscardUnknown(m)
}

var xxx_messageInfo_RewardSlot proto.InternalMessageInfo

func (m *RewardSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardSlot) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OpenResult struct {
	Reward               *RewardSlot `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	Replace              *RewardSlot `protobuf:"bytes,2,opt,name=replace,proto3" json:"replace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OpenResult) Reset()         { *m = OpenResult{} }
func (m *OpenResult) String() string { return proto.CompactTextString(m) }
func (*OpenResult) ProtoMessage()    {}
func (*OpenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{61}
}
func (m *OpenResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenResult.Merge(m, src)
}
func (m *OpenResult) XXX_Size() int {
	return m.Size()
}
func (m *OpenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenResult.DiscardUnknown(m)
}

var xxx_messageInfo_OpenResult proto.InternalMessageInfo

func (m *OpenResult) GetReward() *RewardSlot {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *OpenResult) GetReplace() *RewardSlot {
	if m != nil {
		return m.Replace
	}
	return nil
}

type RewardPlusResult struct {
	Id                   uint32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Exchange             *RewardPlusResult_Exchange `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RewardPlusResult) Reset()         { *m = RewardPlusResult{} }
func (m *RewardPlusResult) String() string { return proto.CompactTextString(m) }
func (*RewardPlusResult) ProtoMessage()    {}
func (*RewardPlusResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{62}
}
func (m *RewardPlusResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPlusResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPlusResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPlusResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPlusResult.Merge(m, src)
}
func (m *RewardPlusResult) XXX_Size() int {
	return m.Size()
}
func (m *RewardPlusResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPlusResult.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPlusResult proto.InternalMessageInfo

func (m *RewardPlusResult) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardPlusResult) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RewardPlusResult) GetExchange() *RewardPlusResult_Exchange {
	if m != nil {
		return m.Exchange
	}
	return nil
}

type RewardPlusResult_Exchange struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Exchange             uint32   `protobuf:"varint,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardPlusResult_Exchange) Reset()         { *m = RewardPlusResult_Exchange{} }
func (m *RewardPlusResult_Exchange) String() string { return proto.CompactTextString(m) }
func (*RewardPlusResult_Exchange) ProtoMessage()    {}
func (*RewardPlusResult_Exchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{62, 0}
}
func (m *RewardPlusResult_Exchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPlusResult_Exchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPlusResult_Exchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPlusResult_Exchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPlusResult_Exchange.Merge(m, src)
}
func (m *RewardPlusResult_Exchange) XXX_Size() int {
	return m.Size()
}
func (m *RewardPlusResult_Exchange) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPlusResult_Exchange.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPlusResult_Exchange proto.InternalMessageInfo

func (m *RewardPlusResult_Exchange) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardPlusResult_Exchange) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RewardPlusResult_Exchange) GetExchange() uint32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

type ExecuteReward struct {
	Reward               *RewardSlot `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	Replace              *RewardSlot `protobuf:"bytes,2,opt,name=replace,proto3" json:"replace,omitempty"`
	ReplaceCount         uint32      `protobuf:"varint,3,opt,name=replace_count,json=replaceCount,proto3" json:"replace_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExecuteReward) Reset()         { *m = ExecuteReward{} }
func (m *ExecuteReward) String() string { return proto.CompactTextString(m) }
func (*ExecuteReward) ProtoMessage()    {}
func (*ExecuteReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{63}
}
func (m *ExecuteReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteReward.Merge(m, src)
}
func (m *ExecuteReward) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteReward.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteReward proto.InternalMessageInfo

func (m *ExecuteReward) GetReward() *RewardSlot {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ExecuteReward) GetReplace() *RewardSlot {
	if m != nil {
		return m.Replace
	}
	return nil
}

func (m *ExecuteReward) GetReplaceCount() uint32 {
	if m != nil {
		return m.ReplaceCount
	}
	return 0
}

type Mail struct {
	MailId               uint32        `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	State                uint32        `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	TakeAttachment       bool          `protobuf:"varint,3,opt,name=take_attachment,json=takeAttachment,proto3" json:"take_attachment,omitempty"`
	Title                string        `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content              string        `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Attachments          []*RewardSlot `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CreateTime           uint32        `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime           uint32        `protobuf:"varint,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	ReferenceId          uint32        `protobuf:"varint,9,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Mail) Reset()         { *m = Mail{} }
func (m *Mail) String() string { return proto.CompactTextString(m) }
func (*Mail) ProtoMessage()    {}
func (*Mail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{64}
}
func (m *Mail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail.Merge(m, src)
}
func (m *Mail) XXX_Size() int {
	return m.Size()
}
func (m *Mail) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail.DiscardUnknown(m)
}

var xxx_messageInfo_Mail proto.InternalMessageInfo

func (m *Mail) GetMailId() uint32 {
	if m != nil {
		return m.MailId
	}
	return 0
}

func (m *Mail) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Mail) GetTakeAttachment() bool {
	if m != nil {
		return m.TakeAttachment
	}
	return false
}

func (m *Mail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Mail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Mail) GetAttachments() []*RewardSlot {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Mail) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Mail) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *Mail) GetReferenceId() uint32 {
	if m != nil {
		return m.ReferenceId
	}
	return 0
}

type AchievementProgress struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Counter              uint32   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Achieved             bool     `protobuf:"varint,3,opt,name=achieved,proto3" json:"achieved,omitempty"`
	Date                 uint32   `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AchievementProgress) Reset()         { *m = AchievementProgress{} }
func (m *AchievementProgress) String() string { return proto.CompactTextString(m) }
func (*AchievementProgress) ProtoMessage()    {}
func (*AchievementProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{65}
}
func (m *AchievementProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchievementProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchievementProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchievementProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchievementProgress.Merge(m, src)
}
func (m *AchievementProgress) XXX_Size() int {
	return m.Size()
}
func (m *AchievementProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_AchievementProgress.DiscardUnknown(m)
}

var xxx_messageInfo_AchievementProgress proto.InternalMessageInfo

func (m *AchievementProgress) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AchievementProgress) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *AchievementProgress) GetAchieved() bool {
	if m != nil {
		return m.Achieved
	}
	return false
}

func (m *AchievementProgress) GetDate() uint32 {
	if m != nil {
		return m.Date
	}
	return 0
}

type AccountStatisticByGameMode struct {
	Mode                 uint32                                     `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	GameCountSum         uint32                                     `protobuf:"varint,2,opt,name=game_count_sum,json=gameCountSum,proto3" json:"game_count_sum,omitempty"`
	GameFinalPosition    []uint32                                   `protobuf:"varint,3,rep,packed,name=game_final_position,json=gameFinalPosition,proto3" json:"game_final_position,omitempty"`
	FlyCount             uint32                                     `protobuf:"varint,4,opt,name=fly_count,json=flyCount,proto3" json:"fly_count,omitempty"`
	GoldEarnSum          float32                                    `protobuf:"fixed32,5,opt,name=gold_earn_sum,json=goldEarnSum,proto3" json:"gold_earn_sum,omitempty"`
	RoundCountSum        uint32                                     `protobuf:"varint,6,opt,name=round_count_sum,json=roundCountSum,proto3" json:"round_count_sum,omitempty"`
	DadianSum            float32                                    `protobuf:"fixed32,7,opt,name=dadian_sum,json=dadianSum,proto3" json:"dadian_sum,omitempty"`
	RoundEnd             []*AccountStatisticByGameMode_RoundEndData `protobuf:"bytes,8,rep,name=round_end,json=roundEnd,proto3" json:"round_end,omitempty"`
	MingCountSum         uint32                                     `protobuf:"varint,9,opt,name=ming_count_sum,json=mingCountSum,proto3" json:"ming_count_sum,omitempty"`
	LiqiCountSum         uint32                                     `protobuf:"varint,10,opt,name=liqi_count_sum,json=liqiCountSum,proto3" json:"liqi_count_sum,omitempty"`
	XunCountSum          uint32                                     `protobuf:"varint,11,opt,name=xun_count_sum,json=xunCountSum,proto3" json:"xun_count_sum,omitempty"`
	HighestLianzhuang    uint32                                     `protobuf:"varint,12,opt,name=highest_lianzhuang,json=highestLianzhuang,proto3" json:"highest_lianzhuang,omitempty"`
	ScoreEarnSum         uint32                                     `protobuf:"varint,13,opt,name=score_earn_sum,json=scoreEarnSum,proto3" json:"score_earn_sum,omitempty"`
	RankScore            []*AccountStatisticByGameMode_RankScore    `protobuf:"bytes,14,rep,name=rank_score,json=rankScore,proto3" json:"rank_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *AccountStatisticByGameMode) Reset()         { *m = AccountStatisticByGameMode{} }
func (m *AccountStatisticByGameMode) String() string { return proto.CompactTextString(m) }
func (*AccountStatisticByGameMode) ProtoMessage()    {}
func (*AccountStatisticByGameMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{66}
}
func (m *AccountStatisticByGameMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStatisticByGameMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStatisticByGameMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStatisticByGameMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStatisticByGameMode.Merge(m, src)
}
func (m *AccountStatisticByGameMode) XXX_Size() int {
	return m.Size()
}
func (m *AccountStatisticByGameMode) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStatisticByGameMode.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStatisticByGameMode proto.InternalMessageInfo

func (m *AccountStatisticByGameMode) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetGameCountSum() uint32 {
	if m != nil {
		return m.GameCountSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetGameFinalPosition() []uint32 {
	if m != nil {
		return m.GameFinalPosition
	}
	return nil
}

func (m *AccountStatisticByGameMode) GetFlyCount() uint32 {
	if m != nil {
		return m.FlyCount
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetGoldEarnSum() float32 {
	if m != nil {
		return m.GoldEarnSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetRoundCountSum() uint32 {
	if m != nil {
		return m.RoundCountSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetDadianSum() float32 {
	if m != nil {
		return m.DadianSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetRoundEnd() []*AccountStatisticByGameMode_RoundEndData {
	if m != nil {
		return m.RoundEnd
	}
	return nil
}

func (m *AccountStatisticByGameMode) GetMingCountSum() uint32 {
	if m != nil {
		return m.MingCountSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetLiqiCountSum() uint32 {
	if m != nil {
		return m.LiqiCountSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetXunCountSum() uint32 {
	if m != nil {
		return m.XunCountSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetHighestLianzhuang() uint32 {
	if m != nil {
		return m.HighestLianzhuang
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetScoreEarnSum() uint32 {
	if m != nil {
		return m.ScoreEarnSum
	}
	return 0
}

func (m *AccountStatisticByGameMode) GetRankScore() []*AccountStatisticByGameMode_RankScore {
	if m != nil {
		return m.RankScore
	}
	return nil
}

type AccountStatisticByGameMode_RoundEndData struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Sum                  uint32   `protobuf:"varint,2,opt,name=sum,proto3" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountStatisticByGameMode_RoundEndData) Reset() {
	*m = AccountStatisticByGameMode_RoundEndData{}
}
func (m *AccountStatisticByGameMode_RoundEndData) String() string { return proto.CompactTextString(m) }
func (*AccountStatisticByGameMode_RoundEndData) ProtoMessage()    {}
func (*AccountStatisticByGameMode_RoundEndData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{66, 0}
}
func (m *AccountStatisticByGameMode_RoundEndData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStatisticByGameMode_RoundEndData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStatisticByGameMode_RoundEndData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStatisticByGameMode_RoundEndData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStatisticByGameMode_RoundEndData.Merge(m, src)
}
func (m *AccountStatisticByGameMode_RoundEndData) XXX_Size() int {
	return m.Size()
}
func (m *AccountStatisticByGameMode_RoundEndData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStatisticByGameMode_RoundEndData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStatisticByGameMode_RoundEndData proto.InternalMessageInfo

func (m *AccountStatisticByGameMode_RoundEndData) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AccountStatisticByGameMode_RoundEndData) GetSum() uint32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

type AccountStatisticByGameMode_RankScore struct {
	Rank                 uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	ScoreSum             int32    `protobuf:"varint,2,opt,name=score_sum,json=scoreSum,proto3" json:"score_sum,omitempty"`
	Count                uint32   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountStatisticByGameMode_RankScore) Reset()         { *m = AccountStatisticByGameMode_RankScore{} }
func (m *AccountStatisticByGameMode_RankScore) String() string { return proto.CompactTextString(m) }
func (*AccountStatisticByGameMode_RankScore) ProtoMessage()    {}
func (*AccountStatisticByGameMode_RankScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{66, 1}
}
func (m *AccountStatisticByGameMode_RankScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStatisticByGameMode_RankScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStatisticByGameMode_RankScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStatisticByGameMode_RankScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStatisticByGameMode_RankScore.Merge(m, src)
}
func (m *AccountStatisticByGameMode_RankScore) XXX_Size() int {
	return m.Size()
}
func (m *AccountStatisticByGameMode_RankScore) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStatisticByGameMode_RankScore.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStatisticByGameMode_RankScore proto.InternalMessageInfo

func (m *AccountStatisticByGameMode_RankScore) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *AccountStatisticByGameMode_RankScore) GetScoreSum() int32 {
	if m != nil {
		return m.ScoreSum
	}
	return 0
}

func (m *AccountStatisticByGameMode_RankScore) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AccountStatisticByFan struct {
	FanId                uint32   `protobuf:"varint,1,opt,name=fan_id,json=fanId,proto3" json:"fan_id,omitempty"`
	Sum                  uint32   `protobuf:"varint,2,opt,name=sum,proto3" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountStatisticByFan) Reset()         { *m = AccountStatisticByFan{} }
func (m *AccountStatisticByFan) String() string { return proto.CompactTextString(m) }
func (*AccountStatisticByFan) ProtoMessage()    {}
func (*AccountStatisticByFan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{67}
}
func (m *AccountStatisticByFan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStatisticByFan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStatisticByFan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStatisticByFan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStatisticByFan.Merge(m, src)
}
func (m *AccountStatisticByFan) XXX_Size() int {
	return m.Size()
}
func (m *AccountStatisticByFan) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStatisticByFan.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStatisticByFan proto.InternalMessageInfo

func (m *AccountStatisticByFan) GetFanId() uint32 {
	if m != nil {
		return m.FanId
	}
	return 0
}

func (m *AccountStatisticByFan) GetSum() uint32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

type AccountFanAchieved struct {
	MahjongCategory      uint32                   `protobuf:"varint,1,opt,name=mahjong_category,json=mahjongCategory,proto3" json:"mahjong_category,omitempty"`
	Fan                  []*AccountStatisticByFan `protobuf:"bytes,2,rep,name=fan,proto3" json:"fan,omitempty"`
	Liujumanguan         uint32                   `protobuf:"varint,3,opt,name=liujumanguan,proto3" json:"liujumanguan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AccountFanAchieved) Reset()         { *m = AccountFanAchieved{} }
func (m *AccountFanAchieved) String() string { return proto.CompactTextString(m) }
func (*AccountFanAchieved) ProtoMessage()    {}
func (*AccountFanAchieved) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{68}
}
func (m *AccountFanAchieved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountFanAchieved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountFanAchieved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountFanAchieved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountFanAchieved.Merge(m, src)
}
func (m *AccountFanAchieved) XXX_Size() int {
	return m.Size()
}
func (m *AccountFanAchieved) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountFanAchieved.DiscardUnknown(m)
}

var xxx_messageInfo_AccountFanAchieved proto.InternalMessageInfo

func (m *AccountFanAchieved) GetMahjongCategory() uint32 {
	if m != nil {
		return m.MahjongCategory
	}
	return 0
}

func (m *AccountFanAchieved) GetFan() []*AccountStatisticByFan {
	if m != nil {
		return m.Fan
	}
	return nil
}

func (m *AccountFanAchieved) GetLiujumanguan() uint32 {
	if m != nil {
		return m.Liujumanguan
	}
	return 0
}

type AccountDetailStatistic struct {
	GameMode             []*AccountStatisticByGameMode `protobuf:"bytes,1,rep,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	Fan                  []*AccountStatisticByFan      `protobuf:"bytes,2,rep,name=fan,proto3" json:"fan,omitempty"`
	Liujumanguan         uint32                        `protobuf:"varint,3,opt,name=liujumanguan,proto3" json:"liujumanguan,omitempty"`
	FanAchieved          []*AccountFanAchieved         `protobuf:"bytes,4,rep,name=fan_achieved,json=fanAchieved,proto3" json:"fan_achieved,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AccountDetailStatistic) Reset()         { *m = AccountDetailStatistic{} }
func (m *AccountDetailStatistic) String() string { return proto.CompactTextString(m) }
func (*AccountDetailStatistic) ProtoMessage()    {}
func (*AccountDetailStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{69}
}
func (m *AccountDetailStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatistic.Merge(m, src)
}
func (m *AccountDetailStatistic) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatistic proto.InternalMessageInfo

func (m *AccountDetailStatistic) GetGameMode() []*AccountStatisticByGameMode {
	if m != nil {
		return m.GameMode
	}
	return nil
}

func (m *AccountDetailStatistic) GetFan() []*AccountStatisticByFan {
	if m != nil {
		return m.Fan
	}
	return nil
}

func (m *AccountDetailStatistic) GetLiujumanguan() uint32 {
	if m != nil {
		return m.Liujumanguan
	}
	return 0
}

func (m *AccountDetailStatistic) GetFanAchieved() []*AccountFanAchieved {
	if m != nil {
		return m.FanAchieved
	}
	return nil
}

type AccountDetailStatisticByCategory struct {
	Category             uint32                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	DetailStatistic      *AccountDetailStatistic `protobuf:"bytes,2,opt,name=detail_statistic,json=detailStatistic,proto3" json:"detail_statistic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AccountDetailStatisticByCategory) Reset()         { *m = AccountDetailStatisticByCategory{} }
func (m *AccountDetailStatisticByCategory) String() string { return proto.CompactTextString(m) }
func (*AccountDetailStatisticByCategory) ProtoMessage()    {}
func (*AccountDetailStatisticByCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{70}
}
func (m *AccountDetailStatisticByCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatisticByCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatisticByCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatisticByCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatisticByCategory.Merge(m, src)
}
func (m *AccountDetailStatisticByCategory) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatisticByCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatisticByCategory.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatisticByCategory proto.InternalMessageInfo

func (m *AccountDetailStatisticByCategory) GetCategory() uint32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *AccountDetailStatisticByCategory) GetDetailStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.DetailStatistic
	}
	return nil
}

type AccountDetailStatisticV2 struct {
	FriendRoomStatistic        *AccountDetailStatistic                              `protobuf:"bytes,1,opt,name=friend_room_statistic,json=friendRoomStatistic,proto3" json:"friend_room_statistic,omitempty"`
	RankStatistic              *AccountDetailStatisticV2_RankStatistic              `protobuf:"bytes,2,opt,name=rank_statistic,json=rankStatistic,proto3" json:"rank_statistic,omitempty"`
	CustomizedContestStatistic *AccountDetailStatisticV2_CustomizedContestStatistic `protobuf:"bytes,3,opt,name=customized_contest_statistic,json=customizedContestStatistic,proto3" json:"customized_contest_statistic,omitempty"`
	LeisureMatchStatistic      *AccountDetailStatistic                              `protobuf:"bytes,4,opt,name=leisure_match_statistic,json=leisureMatchStatistic,proto3" json:"leisure_match_statistic,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                             `json:"-"`
	XXX_unrecognized           []byte                                               `json:"-"`
	XXX_sizecache              int32                                                `json:"-"`
}

func (m *AccountDetailStatisticV2) Reset()         { *m = AccountDetailStatisticV2{} }
func (m *AccountDetailStatisticV2) String() string { return proto.CompactTextString(m) }
func (*AccountDetailStatisticV2) ProtoMessage()    {}
func (*AccountDetailStatisticV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{71}
}
func (m *AccountDetailStatisticV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatisticV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatisticV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatisticV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatisticV2.Merge(m, src)
}
func (m *AccountDetailStatisticV2) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatisticV2) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatisticV2.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatisticV2 proto.InternalMessageInfo

func (m *AccountDetailStatisticV2) GetFriendRoomStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.FriendRoomStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2) GetRankStatistic() *AccountDetailStatisticV2_RankStatistic {
	if m != nil {
		return m.RankStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2) GetCustomizedContestStatistic() *AccountDetailStatisticV2_CustomizedContestStatistic {
	if m != nil {
		return m.CustomizedContestStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2) GetLeisureMatchStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.LeisureMatchStatistic
	}
	return nil
}

type AccountDetailStatisticV2_RankStatistic struct {
	TotalStatistic       *AccountDetailStatisticV2_RankStatistic_RankData `protobuf:"bytes,1,opt,name=total_statistic,json=totalStatistic,proto3" json:"total_statistic,omitempty"`
	MonthStatistic       *AccountDetailStatisticV2_RankStatistic_RankData `protobuf:"bytes,2,opt,name=month_statistic,json=monthStatistic,proto3" json:"month_statistic,omitempty"`
	MonthRefreshTime     uint32                                           `protobuf:"varint,3,opt,name=month_refresh_time,json=monthRefreshTime,proto3" json:"month_refresh_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *AccountDetailStatisticV2_RankStatistic) Reset() {
	*m = AccountDetailStatisticV2_RankStatistic{}
}
func (m *AccountDetailStatisticV2_RankStatistic) String() string { return proto.CompactTextString(m) }
func (*AccountDetailStatisticV2_RankStatistic) ProtoMessage()    {}
func (*AccountDetailStatisticV2_RankStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{71, 0}
}
func (m *AccountDetailStatisticV2_RankStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatisticV2_RankStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatisticV2_RankStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatisticV2_RankStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatisticV2_RankStatistic.Merge(m, src)
}
func (m *AccountDetailStatisticV2_RankStatistic) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatisticV2_RankStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatisticV2_RankStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatisticV2_RankStatistic proto.InternalMessageInfo

func (m *AccountDetailStatisticV2_RankStatistic) GetTotalStatistic() *AccountDetailStatisticV2_RankStatistic_RankData {
	if m != nil {
		return m.TotalStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2_RankStatistic) GetMonthStatistic() *AccountDetailStatisticV2_RankStatistic_RankData {
	if m != nil {
		return m.MonthStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2_RankStatistic) GetMonthRefreshTime() uint32 {
	if m != nil {
		return m.MonthRefreshTime
	}
	return 0
}

type AccountDetailStatisticV2_RankStatistic_RankData struct {
	AllLevelStatistic    *AccountDetailStatistic                                          `protobuf:"bytes,1,opt,name=all_level_statistic,json=allLevelStatistic,proto3" json:"all_level_statistic,omitempty"`
	LevelDataList        []*AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData `protobuf:"bytes,2,rep,name=level_data_list,json=levelDataList,proto3" json:"level_data_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData) Reset() {
	*m = AccountDetailStatisticV2_RankStatistic_RankData{}
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) String() string {
	return proto.CompactTextString(m)
}
func (*AccountDetailStatisticV2_RankStatistic_RankData) ProtoMessage() {}
func (*AccountDetailStatisticV2_RankStatistic_RankData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{71, 0, 0}
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData.Merge(m, src)
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData proto.InternalMessageInfo

func (m *AccountDetailStatisticV2_RankStatistic_RankData) GetAllLevelStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.AllLevelStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData) GetLevelDataList() []*AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData {
	if m != nil {
		return m.LevelDataList
	}
	return nil
}

type AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData struct {
	RankLevel            uint32                  `protobuf:"varint,1,opt,name=rank_level,json=rankLevel,proto3" json:"rank_level,omitempty"`
	Statistic            *AccountDetailStatistic `protobuf:"bytes,2,opt,name=statistic,proto3" json:"statistic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) Reset() {
	*m = AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData{}
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) String() string {
	return proto.CompactTextString(m)
}
func (*AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) ProtoMessage() {}
func (*AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{71, 0, 0, 0}
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData.Merge(m, src)
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData proto.InternalMessageInfo

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) GetRankLevel() uint32 {
	if m != nil {
		return m.RankLevel
	}
	return 0
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) GetStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.Statistic
	}
	return nil
}

type AccountDetailStatisticV2_CustomizedContestStatistic struct {
	TotalStatistic       *AccountDetailStatistic `protobuf:"bytes,1,opt,name=total_statistic,json=totalStatistic,proto3" json:"total_statistic,omitempty"`
	MonthStatistic       *AccountDetailStatistic `protobuf:"bytes,2,opt,name=month_statistic,json=monthStatistic,proto3" json:"month_statistic,omitempty"`
	MonthRefreshTime     uint32                  `protobuf:"varint,3,opt,name=month_refresh_time,json=monthRefreshTime,proto3" json:"month_refresh_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) Reset() {
	*m = AccountDetailStatisticV2_CustomizedContestStatistic{}
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) String() string {
	return proto.CompactTextString(m)
}
func (*AccountDetailStatisticV2_CustomizedContestStatistic) ProtoMessage() {}
func (*AccountDetailStatisticV2_CustomizedContestStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{71, 1}
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDetailStatisticV2_CustomizedContestStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailStatisticV2_CustomizedContestStatistic.Merge(m, src)
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) XXX_Size() int {
	return m.Size()
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailStatisticV2_CustomizedContestStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailStatisticV2_CustomizedContestStatistic proto.InternalMessageInfo

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) GetTotalStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.TotalStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) GetMonthStatistic() *AccountDetailStatistic {
	if m != nil {
		return m.MonthStatistic
	}
	return nil
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) GetMonthRefreshTime() uint32 {
	if m != nil {
		return m.MonthRefreshTime
	}
	return 0
}

type AccountShiLian struct {
	Step                 uint32   `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`
	State                uint32   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountShiLian) Reset()         { *m = AccountShiLian{} }
func (m *AccountShiLian) String() string { return proto.CompactTextString(m) }
func (*AccountShiLian) ProtoMessage()    {}
func (*AccountShiLian) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{72}
}
func (m *AccountShiLian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountShiLian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountShiLian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountShiLian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountShiLian.Merge(m, src)
}
func (m *AccountShiLian) XXX_Size() int {
	return m.Size()
}
func (m *AccountShiLian) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountShiLian.DiscardUnknown(m)
}

var xxx_messageInfo_AccountShiLian proto.InternalMessageInfo

func (m *AccountShiLian) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *AccountShiLian) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ClientDeviceInfo struct {
	DeviceType           string   `protobuf:"bytes,1,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Os                   string   `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion            string   `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Browser              string   `protobuf:"bytes,4,opt,name=browser,proto3" json:"browser,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientDeviceInfo) Reset()         { *m = ClientDeviceInfo{} }
func (m *ClientDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*ClientDeviceInfo) ProtoMessage()    {}
func (*ClientDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{73}
}
func (m *ClientDeviceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientDeviceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientDeviceInfo.Merge(m, src)
}
func (m *ClientDeviceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientDeviceInfo proto.InternalMessageInfo

func (m *ClientDeviceInfo) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *ClientDeviceInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *ClientDeviceInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *ClientDeviceInfo) GetBrowser() string {
	if m != nil {
		return m.Browser
	}
	return ""
}

type Announcement struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Announcement) Reset()         { *m = Announcement{} }
func (m *Announcement) String() string { return proto.CompactTextString(m) }
func (*Announcement) ProtoMessage()    {}
func (*Announcement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{74}
}
func (m *Announcement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Announcement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Announcement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Announcement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Announcement.Merge(m, src)
}
func (m *Announcement) XXX_Size() int {
	return m.Size()
}
func (m *Announcement) XXX_DiscardUnknown() {
	xxx_messageInfo_Announcement.DiscardUnknown(m)
}

var xxx_messageInfo_Announcement proto.InternalMessageInfo

func (m *Announcement) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Announcement) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Announcement) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TaskProgress struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Counter              uint32   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Achieved             bool     `protobuf:"varint,3,opt,name=achieved,proto3" json:"achieved,omitempty"`
	Rewarded             bool     `protobuf:"varint,4,opt,name=rewarded,proto3" json:"rewarded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskProgress) Reset()         { *m = TaskProgress{} }
func (m *TaskProgress) String() string { return proto.CompactTextString(m) }
func (*TaskProgress) ProtoMessage()    {}
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{75}
}
func (m *TaskProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskProgress.Merge(m, src)
}
func (m *TaskProgress) XXX_Size() int {
	return m.Size()
}
func (m *TaskProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskProgress.DiscardUnknown(m)
}

var xxx_messageInfo_TaskProgress proto.InternalMessageInfo

func (m *TaskProgress) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskProgress) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *TaskProgress) GetAchieved() bool {
	if m != nil {
		return m.Achieved
	}
	return false
}

func (m *TaskProgress) GetRewarded() bool {
	if m != nil {
		return m.Rewarded
	}
	return false
}

type GameConfig struct {
	Category             uint32        `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Mode                 *GameMode     `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Meta                 *GameMetaData `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GameConfig) Reset()         { *m = GameConfig{} }
func (m *GameConfig) String() string { return proto.CompactTextString(m) }
func (*GameConfig) ProtoMessage()    {}
func (*GameConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{76}
}
func (m *GameConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConfig.Merge(m, src)
}
func (m *GameConfig) XXX_Size() int {
	return m.Size()
}
func (m *GameConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GameConfig proto.InternalMessageInfo

func (m *GameConfig) GetCategory() uint32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *GameConfig) GetMode() *GameMode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *GameConfig) GetMeta() *GameMetaData {
	if m != nil {
		return m.Meta
	}
	return nil
}

type AccountActiveState struct {
	AccountId            uint32              `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	LoginTime            uint32              `protobuf:"varint,2,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	LogoutTime           uint32              `protobuf:"varint,3,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	IsOnline             bool                `protobuf:"varint,4,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	Playing              *AccountPlayingGame `protobuf:"bytes,5,opt,name=playing,proto3" json:"playing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AccountActiveState) Reset()         { *m = AccountActiveState{} }
func (m *AccountActiveState) String() string { return proto.CompactTextString(m) }
func (*AccountActiveState) ProtoMessage()    {}
func (*AccountActiveState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{77}
}
func (m *AccountActiveState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountActiveState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountActiveState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountActiveState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountActiveState.Merge(m, src)
}
func (m *AccountActiveState) XXX_Size() int {
	return m.Size()
}
func (m *AccountActiveState) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountActiveState.DiscardUnknown(m)
}

var xxx_messageInfo_AccountActiveState proto.InternalMessageInfo

func (m *AccountActiveState) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AccountActiveState) GetLoginTime() uint32 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *AccountActiveState) GetLogoutTime() uint32 {
	if m != nil {
		return m.LogoutTime
	}
	return 0
}

func (m *AccountActiveState) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *AccountActiveState) GetPlaying() *AccountPlayingGame {
	if m != nil {
		return m.Playing
	}
	return nil
}

type Friend struct {
	Base                 *PlayerBaseView     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	State                *AccountActiveState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Friend) Reset()         { *m = Friend{} }
func (m *Friend) String() string { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()    {}
func (*Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{78}
}
func (m *Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend.Merge(m, src)
}
func (m *Friend) XXX_Size() int {
	return m.Size()
}
func (m *Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_Friend proto.InternalMessageInfo

func (m *Friend) GetBase() *PlayerBaseView {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Friend) GetState() *AccountActiveState {
	if m != nil {
		return m.State
	}
	return nil
}

type GameLiveUnit struct {
	Timestamp            uint32   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ActionCategory       uint32   `protobuf:"varint,2,opt,name=action_category,json=actionCategory,proto3" json:"action_category,omitempty"`
	ActionData           []byte   `protobuf:"bytes,3,opt,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameLiveUnit) Reset()         { *m = GameLiveUnit{} }
func (m *GameLiveUnit) String() string { return proto.CompactTextString(m) }
func (*GameLiveUnit) ProtoMessage()    {}
func (*GameLiveUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{79}
}
func (m *GameLiveUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLiveUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLiveUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLiveUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLiveUnit.Merge(m, src)
}
func (m *GameLiveUnit) XXX_Size() int {
	return m.Size()
}
func (m *GameLiveUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLiveUnit.DiscardUnknown(m)
}

var xxx_messageInfo_GameLiveUnit proto.InternalMessageInfo

func (m *GameLiveUnit) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GameLiveUnit) GetActionCategory() uint32 {
	if m != nil {
		return m.ActionCategory
	}
	return 0
}

func (m *GameLiveUnit) GetActionData() []byte {
	if m != nil {
		return m.ActionData
	}
	return nil
}

type GameLiveSegment struct {
	Actions              []*GameLiveUnit `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GameLiveSegment) Reset()         { *m = GameLiveSegment{} }
func (m *GameLiveSegment) String() string { return proto.CompactTextString(m) }
func (*GameLiveSegment) ProtoMessage()    {}
func (*GameLiveSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{80}
}
func (m *GameLiveSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLiveSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLiveSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLiveSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLiveSegment.Merge(m, src)
}
func (m *GameLiveSegment) XXX_Size() int {
	return m.Size()
}
func (m *GameLiveSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLiveSegment.DiscardUnknown(m)
}

var xxx_messageInfo_GameLiveSegment proto.InternalMessageInfo

func (m *GameLiveSegment) GetActions() []*GameLiveUnit {
	if m != nil {
		return m.Actions
	}
	return nil
}

type GameLiveSegmentUri struct {
	SegmentId            uint32   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	SegmentUri           string   `protobuf:"bytes,2,opt,name=segment_uri,json=segmentUri,proto3" json:"segment_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameLiveSegmentUri) Reset()         { *m = GameLiveSegmentUri{} }
func (m *GameLiveSegmentUri) String() string { return proto.CompactTextString(m) }
func (*GameLiveSegmentUri) ProtoMessage()    {}
func (*GameLiveSegmentUri) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{81}
}
func (m *GameLiveSegmentUri) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLiveSegmentUri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLiveSegmentUri.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLiveSegmentUri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLiveSegmentUri.Merge(m, src)
}
func (m *GameLiveSegmentUri) XXX_Size() int {
	return m.Size()
}
func (m *GameLiveSegmentUri) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLiveSegmentUri.DiscardUnknown(m)
}

var xxx_messageInfo_GameLiveSegmentUri proto.InternalMessageInfo

func (m *GameLiveSegmentUri) GetSegmentId() uint32 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *GameLiveSegmentUri) GetSegmentUri() string {
	if m != nil {
		return m.SegmentUri
	}
	return ""
}

type GameLiveHead struct {
	Uuid                 string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	StartTime            uint32            `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	GameConfig           *GameConfig       `protobuf:"bytes,3,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
	Players              []*PlayerGameView `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	SeatList             []uint32          `protobuf:"varint,5,rep,packed,name=seat_list,json=seatList,proto3" json:"seat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GameLiveHead) Reset()         { *m = GameLiveHead{} }
func (m *GameLiveHead) String() string { return proto.CompactTextString(m) }
func (*GameLiveHead) ProtoMessage()    {}
func (*GameLiveHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{82}
}
func (m *GameLiveHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLiveHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLiveHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLiveHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLiveHead.Merge(m, src)
}
func (m *GameLiveHead) XXX_Size() int {
	return m.Size()
}
func (m *GameLiveHead) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLiveHead.DiscardUnknown(m)
}

var xxx_messageInfo_GameLiveHead proto.InternalMessageInfo

func (m *GameLiveHead) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GameLiveHead) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GameLiveHead) GetGameConfig() *GameConfig {
	if m != nil {
		return m.GameConfig
	}
	return nil
}

func (m *GameLiveHead) GetPlayers() []*PlayerGameView {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameLiveHead) GetSeatList() []uint32 {
	if m != nil {
		return m.SeatList
	}
	return nil
}

type GameNewRoundState struct {
	SeatStates           []uint32 `protobuf:"varint,1,rep,packed,name=seat_states,json=seatStates,proto3" json:"seat_states,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameNewRoundState) Reset()         { *m = GameNewRoundState{} }
func (m *GameNewRoundState) String() string { return proto.CompactTextString(m) }
func (*GameNewRoundState) ProtoMessage()    {}
func (*GameNewRoundState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{83}
}
func (m *GameNewRoundState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNewRoundState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNewRoundState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNewRoundState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNewRoundState.Merge(m, src)
}
func (m *GameNewRoundState) XXX_Size() int {
	return m.Size()
}
func (m *GameNewRoundState) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNewRoundState.DiscardUnknown(m)
}

var xxx_messageInfo_GameNewRoundState proto.InternalMessageInfo

func (m *GameNewRoundState) GetSeatStates() []uint32 {
	if m != nil {
		return m.SeatStates
	}
	return nil
}

type GameEndAction struct {
	State                uint32   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEndAction) Reset()         { *m = GameEndAction{} }
func (m *GameEndAction) String() string { return proto.CompactTextString(m) }
func (*GameEndAction) ProtoMessage()    {}
func (*GameEndAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{84}
}
func (m *GameEndAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameEndAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameEndAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameEndAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEndAction.Merge(m, src)
}
func (m *GameEndAction) XXX_Size() int {
	return m.Size()
}
func (m *GameEndAction) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEndAction.DiscardUnknown(m)
}

var xxx_messageInfo_GameEndAction proto.InternalMessageInfo

func (m *GameEndAction) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type GameNoopAction struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameNoopAction) Reset()         { *m = GameNoopAction{} }
func (m *GameNoopAction) String() string { return proto.CompactTextString(m) }
func (*GameNoopAction) ProtoMessage()    {}
func (*GameNoopAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{85}
}
func (m *GameNoopAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameNoopAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameNoopAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameNoopAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameNoopAction.Merge(m, src)
}
func (m *GameNoopAction) XXX_Size() int {
	return m.Size()
}
func (m *GameNoopAction) XXX_DiscardUnknown() {
	xxx_messageInfo_GameNoopAction.DiscardUnknown(m)
}

var xxx_messageInfo_GameNoopAction proto.InternalMessageInfo

type CommentItem struct {
	CommentId            uint32          `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Timestamp            uint32          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Commenter            *PlayerBaseView `protobuf:"bytes,3,opt,name=commenter,proto3" json:"commenter,omitempty"`
	Content              string          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CommentItem) Reset()         { *m = CommentItem{} }
func (m *CommentItem) String() string { return proto.CompactTextString(m) }
func (*CommentItem) ProtoMessage()    {}
func (*CommentItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{86}
}
func (m *CommentItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentItem.Merge(m, src)
}
func (m *CommentItem) XXX_Size() int {
	return m.Size()
}
func (m *CommentItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentItem.DiscardUnknown(m)
}

var xxx_messageInfo_CommentItem proto.InternalMessageInfo

func (m *CommentItem) GetCommentId() uint32 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *CommentItem) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CommentItem) GetCommenter() *PlayerBaseView {
	if m != nil {
		return m.Commenter
	}
	return nil
}

func (m *CommentItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type RollingNotice struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	StartTime            uint32   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              uint32   `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RepeatInterval       uint32   `protobuf:"varint,5,opt,name=repeat_interval,json=repeatInterval,proto3" json:"repeat_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollingNotice) Reset()         { *m = RollingNotice{} }
func (m *RollingNotice) String() string { return proto.CompactTextString(m) }
func (*RollingNotice) ProtoMessage()    {}
func (*RollingNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{87}
}
func (m *RollingNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollingNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollingNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollingNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollingNotice.Merge(m, src)
}
func (m *RollingNotice) XXX_Size() int {
	return m.Size()
}
func (m *RollingNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_RollingNotice.DiscardUnknown(m)
}

var xxx_messageInfo_RollingNotice proto.InternalMessageInfo

func (m *RollingNotice) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RollingNotice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *RollingNotice) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RollingNotice) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RollingNotice) GetRepeatInterval() uint32 {
	if m != nil {
		return m.RepeatInterval
	}
	return 0
}

type BillingGoods struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon                 string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ResourceId           uint32   `protobuf:"varint,5,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceCount        uint32   `protobuf:"varint,6,opt,name=resource_count,json=resourceCount,proto3" json:"resource_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BillingGoods) Reset()         { *m = BillingGoods{} }
func (m *BillingGoods) String() string { return proto.CompactTextString(m) }
func (*BillingGoods) ProtoMessage()    {}
func (*BillingGoods) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{88}
}
func (m *BillingGoods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingGoods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingGoods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingGoods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingGoods.Merge(m, src)
}
func (m *BillingGoods) XXX_Size() int {
	return m.Size()
}
func (m *BillingGoods) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingGoods.DiscardUnknown(m)
}

var xxx_messageInfo_BillingGoods proto.InternalMessageInfo

func (m *BillingGoods) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BillingGoods) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BillingGoods) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BillingGoods) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *BillingGoods) GetResourceId() uint32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *BillingGoods) GetResourceCount() uint32 {
	if m != nil {
		return m.ResourceCount
	}
	return 0
}

type BillShortcut struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	DealPrice            uint32   `protobuf:"varint,3,opt,name=deal_price,json=dealPrice,proto3" json:"deal_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BillShortcut) Reset()         { *m = BillShortcut{} }
func (m *BillShortcut) String() string { return proto.CompactTextString(m) }
func (*BillShortcut) ProtoMessage()    {}
func (*BillShortcut) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{89}
}
func (m *BillShortcut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillShortcut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillShortcut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillShortcut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillShortcut.Merge(m, src)
}
func (m *BillShortcut) XXX_Size() int {
	return m.Size()
}
func (m *BillShortcut) XXX_DiscardUnknown() {
	xxx_messageInfo_BillShortcut.DiscardUnknown(m)
}

var xxx_messageInfo_BillShortcut proto.InternalMessageInfo

func (m *BillShortcut) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BillShortcut) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BillShortcut) GetDealPrice() uint32 {
	if m != nil {
		return m.DealPrice
	}
	return 0
}

type BillingProduct struct {
	Goods                *BillingGoods `protobuf:"bytes,1,opt,name=goods,proto3" json:"goods,omitempty"`
	CurrencyCode         string        `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	CurrencyPrice        uint32        `protobuf:"varint,3,opt,name=currency_price,json=currencyPrice,proto3" json:"currency_price,omitempty"`
	SortWeight           uint32        `protobuf:"varint,4,opt,name=sort_weight,json=sortWeight,proto3" json:"sort_weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BillingProduct) Reset()         { *m = BillingProduct{} }
func (m *BillingProduct) String() string { return proto.CompactTextString(m) }
func (*BillingProduct) ProtoMessage()    {}
func (*BillingProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{90}
}
func (m *BillingProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingProduct.Merge(m, src)
}
func (m *BillingProduct) XXX_Size() int {
	return m.Size()
}
func (m *BillingProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingProduct.DiscardUnknown(m)
}

var xxx_messageInfo_BillingProduct proto.InternalMessageInfo

func (m *BillingProduct) GetGoods() *BillingGoods {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *BillingProduct) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *BillingProduct) GetCurrencyPrice() uint32 {
	if m != nil {
		return m.CurrencyPrice
	}
	return 0
}

func (m *BillingProduct) GetSortWeight() uint32 {
	if m != nil {
		return m.SortWeight
	}
	return 0
}

type Character struct {
	Charid               uint32                   `protobuf:"varint,1,opt,name=charid,proto3" json:"charid,omitempty"`
	Level                uint32                   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp                  uint32                   `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Views                []*Character_ViewSlotSet `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
	Skin                 uint32                   `protobuf:"varint,5,opt,name=skin,proto3" json:"skin,omitempty"`
	IsUpgraded           bool                     `protobuf:"varint,6,opt,name=is_upgraded,json=isUpgraded,proto3" json:"is_upgraded,omitempty"`
	ExtraEmoji           []uint32                 `protobuf:"varint,7,rep,packed,name=extra_emoji,json=extraEmoji,proto3" json:"extra_emoji,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Character) Reset()         { *m = Character{} }
func (m *Character) String() string { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()    {}
func (*Character) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{91}
}
func (m *Character) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Character) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Character.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Character) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Character.Merge(m, src)
}
func (m *Character) XXX_Size() int {
	return m.Size()
}
func (m *Character) XXX_DiscardUnknown() {
	xxx_messageInfo_Character.DiscardUnknown(m)
}

var xxx_messageInfo_Character proto.InternalMessageInfo

func (m *Character) GetCharid() uint32 {
	if m != nil {
		return m.Charid
	}
	return 0
}

func (m *Character) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Character) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Character) GetViews() []*Character_ViewSlotSet {
	if m != nil {
		return m.Views
	}
	return nil
}

func (m *Character) GetSkin() uint32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

func (m *Character) GetIsUpgraded() bool {
	if m != nil {
		return m.IsUpgraded
	}
	return false
}

func (m *Character) GetExtraEmoji() []uint32 {
	if m != nil {
		return m.ExtraEmoji
	}
	return nil
}

type Character_ViewSlotSet struct {
	Slot                 uint32   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ItemId               uint32   `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Character_ViewSlotSet) Reset()         { *m = Character_ViewSlotSet{} }
func (m *Character_ViewSlotSet) String() string { return proto.CompactTextString(m) }
func (*Character_ViewSlotSet) ProtoMessage()    {}
func (*Character_ViewSlotSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{91, 0}
}
func (m *Character_ViewSlotSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Character_ViewSlotSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Character_ViewSlotSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Character_ViewSlotSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Character_ViewSlotSet.Merge(m, src)
}
func (m *Character_ViewSlotSet) XXX_Size() int {
	return m.Size()
}
func (m *Character_ViewSlotSet) XXX_DiscardUnknown() {
	xxx_messageInfo_Character_ViewSlotSet.DiscardUnknown(m)
}

var xxx_messageInfo_Character_ViewSlotSet proto.InternalMessageInfo

func (m *Character_ViewSlotSet) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Character_ViewSlotSet) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type BuyRecord struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuyRecord) Reset()         { *m = BuyRecord{} }
func (m *BuyRecord) String() string { return proto.CompactTextString(m) }
func (*BuyRecord) ProtoMessage()    {}
func (*BuyRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{92}
}
func (m *BuyRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyRecord.Merge(m, src)
}
func (m *BuyRecord) XXX_Size() int {
	return m.Size()
}
func (m *BuyRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BuyRecord proto.InternalMessageInfo

func (m *BuyRecord) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuyRecord) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ZHPShop struct {
	Goods                []uint32              `protobuf:"varint,1,rep,packed,name=goods,proto3" json:"goods,omitempty"`
	BuyRecords           []*BuyRecord          `protobuf:"bytes,2,rep,name=buy_records,json=buyRecords,proto3" json:"buy_records,omitempty"`
	FreeRefresh          *ZHPShop_RefreshCount `protobuf:"bytes,3,opt,name=free_refresh,json=freeRefresh,proto3" json:"free_refresh,omitempty"`
	CostRefresh          *ZHPShop_RefreshCount `protobuf:"bytes,4,opt,name=cost_refresh,json=costRefresh,proto3" json:"cost_refresh,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ZHPShop) Reset()         { *m = ZHPShop{} }
func (m *ZHPShop) String() string { return proto.CompactTextString(m) }
func (*ZHPShop) ProtoMessage()    {}
func (*ZHPShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{93}
}
func (m *ZHPShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZHPShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZHPShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZHPShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZHPShop.Merge(m, src)
}
func (m *ZHPShop) XXX_Size() int {
	return m.Size()
}
func (m *ZHPShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ZHPShop.DiscardUnknown(m)
}

var xxx_messageInfo_ZHPShop proto.InternalMessageInfo

func (m *ZHPShop) GetGoods() []uint32 {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *ZHPShop) GetBuyRecords() []*BuyRecord {
	if m != nil {
		return m.BuyRecords
	}
	return nil
}

func (m *ZHPShop) GetFreeRefresh() *ZHPShop_RefreshCount {
	if m != nil {
		return m.FreeRefresh
	}
	return nil
}

func (m *ZHPShop) GetCostRefresh() *ZHPShop_RefreshCount {
	if m != nil {
		return m.CostRefresh
	}
	return nil
}

type ZHPShop_RefreshCount struct {
	Count                uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZHPShop_RefreshCount) Reset()         { *m = ZHPShop_RefreshCount{} }
func (m *ZHPShop_RefreshCount) String() string { return proto.CompactTextString(m) }
func (*ZHPShop_RefreshCount) ProtoMessage()    {}
func (*ZHPShop_RefreshCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{93, 0}
}
func (m *ZHPShop_RefreshCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZHPShop_RefreshCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZHPShop_RefreshCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZHPShop_RefreshCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZHPShop_RefreshCount.Merge(m, src)
}
func (m *ZHPShop_RefreshCount) XXX_Size() int {
	return m.Size()
}
func (m *ZHPShop_RefreshCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ZHPShop_RefreshCount.DiscardUnknown(m)
}

var xxx_messageInfo_ZHPShop_RefreshCount proto.InternalMessageInfo

func (m *ZHPShop_RefreshCount) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ZHPShop_RefreshCount) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type MonthTicketInfo struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime              uint32   `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LastPayTime          uint32   `protobuf:"varint,3,opt,name=last_pay_time,json=lastPayTime,proto3" json:"last_pay_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonthTicketInfo) Reset()         { *m = MonthTicketInfo{} }
func (m *MonthTicketInfo) String() string { return proto.CompactTextString(m) }
func (*MonthTicketInfo) ProtoMessage()    {}
func (*MonthTicketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{94}
}
func (m *MonthTicketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonthTicketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonthTicketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonthTicketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonthTicketInfo.Merge(m, src)
}
func (m *MonthTicketInfo) XXX_Size() int {
	return m.Size()
}
func (m *MonthTicketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MonthTicketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MonthTicketInfo proto.InternalMessageInfo

func (m *MonthTicketInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MonthTicketInfo) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MonthTicketInfo) GetLastPayTime() uint32 {
	if m != nil {
		return m.LastPayTime
	}
	return 0
}

type ShopInfo struct {
	Zhp                  *ZHPShop     `protobuf:"bytes,1,opt,name=zhp,proto3" json:"zhp,omitempty"`
	BuyRecords           []*BuyRecord `protobuf:"bytes,2,rep,name=buy_records,json=buyRecords,proto3" json:"buy_records,omitempty"`
	LastRefreshTime      uint32       `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ShopInfo) Reset()         { *m = ShopInfo{} }
func (m *ShopInfo) String() string { return proto.CompactTextString(m) }
func (*ShopInfo) ProtoMessage()    {}
func (*ShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{95}
}
func (m *ShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopInfo.Merge(m, src)
}
func (m *ShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShopInfo proto.InternalMessageInfo

func (m *ShopInfo) GetZhp() *ZHPShop {
	if m != nil {
		return m.Zhp
	}
	return nil
}

func (m *ShopInfo) GetBuyRecords() []*BuyRecord {
	if m != nil {
		return m.BuyRecords
	}
	return nil
}

func (m *ShopInfo) GetLastRefreshTime() uint32 {
	if m != nil {
		return m.LastRefreshTime
	}
	return 0
}

type ChangeNicknameRecord struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Time                 uint32   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeNicknameRecord) Reset()         { *m = ChangeNicknameRecord{} }
func (m *ChangeNicknameRecord) String() string { return proto.CompactTextString(m) }
func (*ChangeNicknameRecord) ProtoMessage()    {}
func (*ChangeNicknameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{96}
}
func (m *ChangeNicknameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeNicknameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeNicknameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeNicknameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeNicknameRecord.Merge(m, src)
}
func (m *ChangeNicknameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ChangeNicknameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeNicknameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeNicknameRecord proto.InternalMessageInfo

func (m *ChangeNicknameRecord) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChangeNicknameRecord) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChangeNicknameRecord) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ServerSettings struct {
	PaymentSetting       *PaymentSetting `protobuf:"bytes,3,opt,name=payment_setting,json=paymentSetting,proto3" json:"payment_setting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServerSettings) Reset()         { *m = ServerSettings{} }
func (m *ServerSettings) String() string { return proto.CompactTextString(m) }
func (*ServerSettings) ProtoMessage()    {}
func (*ServerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{97}
}
func (m *ServerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerSettings.Merge(m, src)
}
func (m *ServerSettings) XXX_Size() int {
	return m.Size()
}
func (m *ServerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ServerSettings proto.InternalMessageInfo

func (m *ServerSettings) GetPaymentSetting() *PaymentSetting {
	if m != nil {
		return m.PaymentSetting
	}
	return nil
}

type PaymentSetting struct {
	OpenPayment          uint32                     `protobuf:"varint,1,opt,name=open_payment,json=openPayment,proto3" json:"open_payment,omitempty"`
	PaymentInfoShowType  uint32                     `protobuf:"varint,2,opt,name=payment_info_show_type,json=paymentInfoShowType,proto3" json:"payment_info_show_type,omitempty"`
	PaymentInfo          string                     `protobuf:"bytes,3,opt,name=payment_info,json=paymentInfo,proto3" json:"payment_info,omitempty"`
	Wechat               *PaymentSetting_WechatData `protobuf:"bytes,4,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Alipay               *PaymentSetting_AlipayData `protobuf:"bytes,5,opt,name=alipay,proto3" json:"alipay,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PaymentSetting) Reset()         { *m = PaymentSetting{} }
func (m *PaymentSetting) String() string { return proto.CompactTextString(m) }
func (*PaymentSetting) ProtoMessage()    {}
func (*PaymentSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{98}
}
func (m *PaymentSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSetting.Merge(m, src)
}
func (m *PaymentSetting) XXX_Size() int {
	return m.Size()
}
func (m *PaymentSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSetting proto.InternalMessageInfo

func (m *PaymentSetting) GetOpenPayment() uint32 {
	if m != nil {
		return m.OpenPayment
	}
	return 0
}

func (m *PaymentSetting) GetPaymentInfoShowType() uint32 {
	if m != nil {
		return m.PaymentInfoShowType
	}
	return 0
}

func (m *PaymentSetting) GetPaymentInfo() string {
	if m != nil {
		return m.PaymentInfo
	}
	return ""
}

func (m *PaymentSetting) GetWechat() *PaymentSetting_WechatData {
	if m != nil {
		return m.Wechat
	}
	return nil
}

func (m *PaymentSetting) GetAlipay() *PaymentSetting_AlipayData {
	if m != nil {
		return m.Alipay
	}
	return nil
}

type PaymentSetting_WechatData struct {
	DisableCreate         bool     `protobuf:"varint,1,opt,name=disable_create,json=disableCreate,proto3" json:"disable_create,omitempty"`
	PaymentSourcePlatform uint32   `protobuf:"varint,2,opt,name=payment_source_platform,json=paymentSourcePlatform,proto3" json:"payment_source_platform,omitempty"`
	EnableCredit          bool     `protobuf:"varint,3,opt,name=enable_credit,json=enableCredit,proto3" json:"enable_credit,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PaymentSetting_WechatData) Reset()         { *m = PaymentSetting_WechatData{} }
func (m *PaymentSetting_WechatData) String() string { return proto.CompactTextString(m) }
func (*PaymentSetting_WechatData) ProtoMessage()    {}
func (*PaymentSetting_WechatData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{98, 0}
}
func (m *PaymentSetting_WechatData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentSetting_WechatData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentSetting_WechatData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentSetting_WechatData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSetting_WechatData.Merge(m, src)
}
func (m *PaymentSetting_WechatData) XXX_Size() int {
	return m.Size()
}
func (m *PaymentSetting_WechatData) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSetting_WechatData.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSetting_WechatData proto.InternalMessageInfo

func (m *PaymentSetting_WechatData) GetDisableCreate() bool {
	if m != nil {
		return m.DisableCreate
	}
	return false
}

func (m *PaymentSetting_WechatData) GetPaymentSourcePlatform() uint32 {
	if m != nil {
		return m.PaymentSourcePlatform
	}
	return 0
}

func (m *PaymentSetting_WechatData) GetEnableCredit() bool {
	if m != nil {
		return m.EnableCredit
	}
	return false
}

type PaymentSetting_AlipayData struct {
	DisableCreate         bool     `protobuf:"varint,1,opt,name=disable_create,json=disableCreate,proto3" json:"disable_create,omitempty"`
	PaymentSourcePlatform uint32   `protobuf:"varint,2,opt,name=payment_source_platform,json=paymentSourcePlatform,proto3" json:"payment_source_platform,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PaymentSetting_AlipayData) Reset()         { *m = PaymentSetting_AlipayData{} }
func (m *PaymentSetting_AlipayData) String() string { return proto.CompactTextString(m) }
func (*PaymentSetting_AlipayData) ProtoMessage()    {}
func (*PaymentSetting_AlipayData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{98, 1}
}
func (m *PaymentSetting_AlipayData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentSetting_AlipayData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentSetting_AlipayData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentSetting_AlipayData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSetting_AlipayData.Merge(m, src)
}
func (m *PaymentSetting_AlipayData) XXX_Size() int {
	return m.Size()
}
func (m *PaymentSetting_AlipayData) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSetting_AlipayData.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSetting_AlipayData proto.InternalMessageInfo

func (m *PaymentSetting_AlipayData) GetDisableCreate() bool {
	if m != nil {
		return m.DisableCreate
	}
	return false
}

func (m *PaymentSetting_AlipayData) GetPaymentSourcePlatform() uint32 {
	if m != nil {
		return m.PaymentSourcePlatform
	}
	return 0
}

type AccountSetting struct {
	Key                  uint32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountSetting) Reset()         { *m = AccountSetting{} }
func (m *AccountSetting) String() string { return proto.CompactTextString(m) }
func (*AccountSetting) ProtoMessage()    {}
func (*AccountSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{99}
}
func (m *AccountSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountSetting.Merge(m, src)
}
func (m *AccountSetting) XXX_Size() int {
	return m.Size()
}
func (m *AccountSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountSetting.DiscardUnknown(m)
}

var xxx_messageInfo_AccountSetting proto.InternalMessageInfo

func (m *AccountSetting) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *AccountSetting) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ChestData struct {
	ChestId              uint32   `protobuf:"varint,1,opt,name=chest_id,json=chestId,proto3" json:"chest_id,omitempty"`
	TotalOpenCount       uint32   `protobuf:"varint,2,opt,name=total_open_count,json=totalOpenCount,proto3" json:"total_open_count,omitempty"`
	ConsumeCount         uint32   `protobuf:"varint,3,opt,name=consume_count,json=consumeCount,proto3" json:"consume_count,omitempty"`
	FaceBlackCount       uint32   `protobuf:"varint,4,opt,name=face_black_count,json=faceBlackCount,proto3" json:"face_black_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChestData) Reset()         { *m = ChestData{} }
func (m *ChestData) String() string { return proto.CompactTextString(m) }
func (*ChestData) ProtoMessage()    {}
func (*ChestData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{100}
}
func (m *ChestData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChestData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChestData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChestData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChestData.Merge(m, src)
}
func (m *ChestData) XXX_Size() int {
	return m.Size()
}
func (m *ChestData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChestData.DiscardUnknown(m)
}

var xxx_messageInfo_ChestData proto.InternalMessageInfo

func (m *ChestData) GetChestId() uint32 {
	if m != nil {
		return m.ChestId
	}
	return 0
}

func (m *ChestData) GetTotalOpenCount() uint32 {
	if m != nil {
		return m.TotalOpenCount
	}
	return 0
}

func (m *ChestData) GetConsumeCount() uint32 {
	if m != nil {
		return m.ConsumeCount
	}
	return 0
}

func (m *ChestData) GetFaceBlackCount() uint32 {
	if m != nil {
		return m.FaceBlackCount
	}
	return 0
}

type ChestDataV2 struct {
	ChestId              uint32   `protobuf:"varint,1,opt,name=chest_id,json=chestId,proto3" json:"chest_id,omitempty"`
	TotalOpenCount       uint32   `protobuf:"varint,2,opt,name=total_open_count,json=totalOpenCount,proto3" json:"total_open_count,omitempty"`
	FaceBlackCount       uint32   `protobuf:"varint,3,opt,name=face_black_count,json=faceBlackCount,proto3" json:"face_black_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChestDataV2) Reset()         { *m = ChestDataV2{} }
func (m *ChestDataV2) String() string { return proto.CompactTextString(m) }
func (*ChestDataV2) ProtoMessage()    {}
func (*ChestDataV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{101}
}
func (m *ChestDataV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChestDataV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChestDataV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChestDataV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChestDataV2.Merge(m, src)
}
func (m *ChestDataV2) XXX_Size() int {
	return m.Size()
}
func (m *ChestDataV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ChestDataV2.DiscardUnknown(m)
}

var xxx_messageInfo_ChestDataV2 proto.InternalMessageInfo

func (m *ChestDataV2) GetChestId() uint32 {
	if m != nil {
		return m.ChestId
	}
	return 0
}

func (m *ChestDataV2) GetTotalOpenCount() uint32 {
	if m != nil {
		return m.TotalOpenCount
	}
	return 0
}

func (m *ChestDataV2) GetFaceBlackCount() uint32 {
	if m != nil {
		return m.FaceBlackCount
	}
	return 0
}

type FaithData struct {
	FaithId              uint32   `protobuf:"varint,1,opt,name=faith_id,json=faithId,proto3" json:"faith_id,omitempty"`
	TotalOpenCount       uint32   `protobuf:"varint,2,opt,name=total_open_count,json=totalOpenCount,proto3" json:"total_open_count,omitempty"`
	ConsumeCount         uint32   `protobuf:"varint,3,opt,name=consume_count,json=consumeCount,proto3" json:"consume_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaithData) Reset()         { *m = FaithData{} }
func (m *FaithData) String() string { return proto.CompactTextString(m) }
func (*FaithData) ProtoMessage()    {}
func (*FaithData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{102}
}
func (m *FaithData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaithData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaithData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaithData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaithData.Merge(m, src)
}
func (m *FaithData) XXX_Size() int {
	return m.Size()
}
func (m *FaithData) XXX_DiscardUnknown() {
	xxx_messageInfo_FaithData.DiscardUnknown(m)
}

var xxx_messageInfo_FaithData proto.InternalMessageInfo

func (m *FaithData) GetFaithId() uint32 {
	if m != nil {
		return m.FaithId
	}
	return 0
}

func (m *FaithData) GetTotalOpenCount() uint32 {
	if m != nil {
		return m.TotalOpenCount
	}
	return 0
}

func (m *FaithData) GetConsumeCount() uint32 {
	if m != nil {
		return m.ConsumeCount
	}
	return 0
}

type CustomizedContestBase struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	ContestId            uint32   `protobuf:"varint,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ContestName          string   `protobuf:"bytes,3,opt,name=contest_name,json=contestName,proto3" json:"contest_name,omitempty"`
	State                uint32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	CreatorId            uint32   `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	CreateTime           uint32   `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime            uint32   `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime           uint32   `protobuf:"varint,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Open                 bool     `protobuf:"varint,9,opt,name=open,proto3" json:"open,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomizedContestBase) Reset()         { *m = CustomizedContestBase{} }
func (m *CustomizedContestBase) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestBase) ProtoMessage()    {}
func (*CustomizedContestBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{103}
}
func (m *CustomizedContestBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestBase.Merge(m, src)
}
func (m *CustomizedContestBase) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestBase) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestBase.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestBase proto.InternalMessageInfo

func (m *CustomizedContestBase) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *CustomizedContestBase) GetContestId() uint32 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *CustomizedContestBase) GetContestName() string {
	if m != nil {
		return m.ContestName
	}
	return ""
}

func (m *CustomizedContestBase) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CustomizedContestBase) GetCreatorId() uint32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CustomizedContestBase) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *CustomizedContestBase) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CustomizedContestBase) GetFinishTime() uint32 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *CustomizedContestBase) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type CustomizedContestExtend struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	PublicNotice         string   `protobuf:"bytes,2,opt,name=public_notice,json=publicNotice,proto3" json:"public_notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomizedContestExtend) Reset()         { *m = CustomizedContestExtend{} }
func (m *CustomizedContestExtend) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestExtend) ProtoMessage()    {}
func (*CustomizedContestExtend) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{104}
}
func (m *CustomizedContestExtend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestExtend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestExtend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestExtend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestExtend.Merge(m, src)
}
func (m *CustomizedContestExtend) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestExtend) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestExtend.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestExtend proto.InternalMessageInfo

func (m *CustomizedContestExtend) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *CustomizedContestExtend) GetPublicNotice() string {
	if m != nil {
		return m.PublicNotice
	}
	return ""
}

type CustomizedContestAbstract struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	ContestId            uint32   `protobuf:"varint,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ContestName          string   `protobuf:"bytes,3,opt,name=contest_name,json=contestName,proto3" json:"contest_name,omitempty"`
	State                uint32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	CreatorId            uint32   `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	CreateTime           uint32   `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime            uint32   `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime           uint32   `protobuf:"varint,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Open                 bool     `protobuf:"varint,9,opt,name=open,proto3" json:"open,omitempty"`
	PublicNotice         string   `protobuf:"bytes,10,opt,name=public_notice,json=publicNotice,proto3" json:"public_notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomizedContestAbstract) Reset()         { *m = CustomizedContestAbstract{} }
func (m *CustomizedContestAbstract) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestAbstract) ProtoMessage()    {}
func (*CustomizedContestAbstract) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{105}
}
func (m *CustomizedContestAbstract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestAbstract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestAbstract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestAbstract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestAbstract.Merge(m, src)
}
func (m *CustomizedContestAbstract) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestAbstract) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestAbstract.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestAbstract proto.InternalMessageInfo

func (m *CustomizedContestAbstract) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *CustomizedContestAbstract) GetContestId() uint32 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *CustomizedContestAbstract) GetContestName() string {
	if m != nil {
		return m.ContestName
	}
	return ""
}

func (m *CustomizedContestAbstract) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CustomizedContestAbstract) GetCreatorId() uint32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CustomizedContestAbstract) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *CustomizedContestAbstract) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CustomizedContestAbstract) GetFinishTime() uint32 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *CustomizedContestAbstract) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (m *CustomizedContestAbstract) GetPublicNotice() string {
	if m != nil {
		return m.PublicNotice
	}
	return ""
}

type CustomizedContestDetail struct {
	UniqueId             uint32    `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	ContestId            uint32    `protobuf:"varint,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ContestName          string    `protobuf:"bytes,3,opt,name=contest_name,json=contestName,proto3" json:"contest_name,omitempty"`
	State                uint32    `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	CreatorId            uint32    `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	CreateTime           uint32    `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime            uint32    `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime           uint32    `protobuf:"varint,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Open                 bool      `protobuf:"varint,9,opt,name=open,proto3" json:"open,omitempty"`
	RankRule             uint32    `protobuf:"varint,10,opt,name=rank_rule,json=rankRule,proto3" json:"rank_rule,omitempty"`
	GameMode             *GameMode `protobuf:"bytes,11,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	PrivateNotice        string    `protobuf:"bytes,12,opt,name=private_notice,json=privateNotice,proto3" json:"private_notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CustomizedContestDetail) Reset()         { *m = CustomizedContestDetail{} }
func (m *CustomizedContestDetail) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestDetail) ProtoMessage()    {}
func (*CustomizedContestDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{106}
}
func (m *CustomizedContestDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestDetail.Merge(m, src)
}
func (m *CustomizedContestDetail) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestDetail.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestDetail proto.InternalMessageInfo

func (m *CustomizedContestDetail) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *CustomizedContestDetail) GetContestId() uint32 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *CustomizedContestDetail) GetContestName() string {
	if m != nil {
		return m.ContestName
	}
	return ""
}

func (m *CustomizedContestDetail) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CustomizedContestDetail) GetCreatorId() uint32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CustomizedContestDetail) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *CustomizedContestDetail) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CustomizedContestDetail) GetFinishTime() uint32 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *CustomizedContestDetail) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (m *CustomizedContestDetail) GetRankRule() uint32 {
	if m != nil {
		return m.RankRule
	}
	return 0
}

func (m *CustomizedContestDetail) GetGameMode() *GameMode {
	if m != nil {
		return m.GameMode
	}
	return nil
}

func (m *CustomizedContestDetail) GetPrivateNotice() string {
	if m != nil {
		return m.PrivateNotice
	}
	return ""
}

type CustomizedContestPlayerReport struct {
	RankRule             uint32   `protobuf:"varint,1,opt,name=rank_rule,json=rankRule,proto3" json:"rank_rule,omitempty"`
	Rank                 uint32   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Point                int32    `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	RecentGameRanks      []uint32 `protobuf:"varint,4,rep,packed,name=recent_game_ranks,json=recentGameRanks,proto3" json:"recent_game_ranks,omitempty"`
	TotalGameCount       uint32   `protobuf:"varint,5,opt,name=total_game_count,json=totalGameCount,proto3" json:"total_game_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomizedContestPlayerReport) Reset()         { *m = CustomizedContestPlayerReport{} }
func (m *CustomizedContestPlayerReport) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestPlayerReport) ProtoMessage()    {}
func (*CustomizedContestPlayerReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{107}
}
func (m *CustomizedContestPlayerReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestPlayerReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestPlayerReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestPlayerReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestPlayerReport.Merge(m, src)
}
func (m *CustomizedContestPlayerReport) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestPlayerReport) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestPlayerReport.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestPlayerReport proto.InternalMessageInfo

func (m *CustomizedContestPlayerReport) GetRankRule() uint32 {
	if m != nil {
		return m.RankRule
	}
	return 0
}

func (m *CustomizedContestPlayerReport) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *CustomizedContestPlayerReport) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *CustomizedContestPlayerReport) GetRecentGameRanks() []uint32 {
	if m != nil {
		return m.RecentGameRanks
	}
	return nil
}

func (m *CustomizedContestPlayerReport) GetTotalGameCount() uint32 {
	if m != nil {
		return m.TotalGameCount
	}
	return 0
}

type RecordGame struct {
	Uuid                 string                    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	StartTime            uint32                    `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              uint32                    `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Config               *GameConfig               `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Accounts             []*RecordGame_AccountInfo `protobuf:"bytes,11,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Result               *GameEndResult            `protobuf:"bytes,12,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RecordGame) Reset()         { *m = RecordGame{} }
func (m *RecordGame) String() string { return proto.CompactTextString(m) }
func (*RecordGame) ProtoMessage()    {}
func (*RecordGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{108}
}
func (m *RecordGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordGame.Merge(m, src)
}
func (m *RecordGame) XXX_Size() int {
	return m.Size()
}
func (m *RecordGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordGame.DiscardUnknown(m)
}

var xxx_messageInfo_RecordGame proto.InternalMessageInfo

func (m *RecordGame) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *RecordGame) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RecordGame) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RecordGame) GetConfig() *GameConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RecordGame) GetAccounts() []*RecordGame_AccountInfo {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *RecordGame) GetResult() *GameEndResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type RecordGame_AccountInfo struct {
	AccountId            uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Seat                 uint32        `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Nickname             string        `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AvatarId             uint32        `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Character            *Character    `protobuf:"bytes,5,opt,name=character,proto3" json:"character,omitempty"`
	Title                uint32        `protobuf:"varint,6,opt,name=title,proto3" json:"title,omitempty"`
	Level                *AccountLevel `protobuf:"bytes,7,opt,name=level,proto3" json:"level,omitempty"`
	Level3               *AccountLevel `protobuf:"bytes,8,opt,name=level3,proto3" json:"level3,omitempty"`
	AvatarFrame          uint32        `protobuf:"varint,9,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RecordGame_AccountInfo) Reset()         { *m = RecordGame_AccountInfo{} }
func (m *RecordGame_AccountInfo) String() string { return proto.CompactTextString(m) }
func (*RecordGame_AccountInfo) ProtoMessage()    {}
func (*RecordGame_AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{108, 0}
}
func (m *RecordGame_AccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordGame_AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordGame_AccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordGame_AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordGame_AccountInfo.Merge(m, src)
}
func (m *RecordGame_AccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecordGame_AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordGame_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecordGame_AccountInfo proto.InternalMessageInfo

func (m *RecordGame_AccountInfo) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *RecordGame_AccountInfo) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordGame_AccountInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RecordGame_AccountInfo) GetAvatarId() uint32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *RecordGame_AccountInfo) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *RecordGame_AccountInfo) GetTitle() uint32 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *RecordGame_AccountInfo) GetLevel() *AccountLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *RecordGame_AccountInfo) GetLevel3() *AccountLevel {
	if m != nil {
		return m.Level3
	}
	return nil
}

func (m *RecordGame_AccountInfo) GetAvatarFrame() uint32 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

type CustomizedContestGameStart struct {
	Players              []*CustomizedContestGameStart_Item `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CustomizedContestGameStart) Reset()         { *m = CustomizedContestGameStart{} }
func (m *CustomizedContestGameStart) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestGameStart) ProtoMessage()    {}
func (*CustomizedContestGameStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{109}
}
func (m *CustomizedContestGameStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestGameStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestGameStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestGameStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestGameStart.Merge(m, src)
}
func (m *CustomizedContestGameStart) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestGameStart) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestGameStart.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestGameStart proto.InternalMessageInfo

func (m *CustomizedContestGameStart) GetPlayers() []*CustomizedContestGameStart_Item {
	if m != nil {
		return m.Players
	}
	return nil
}

type CustomizedContestGameStart_Item struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomizedContestGameStart_Item) Reset()         { *m = CustomizedContestGameStart_Item{} }
func (m *CustomizedContestGameStart_Item) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestGameStart_Item) ProtoMessage()    {}
func (*CustomizedContestGameStart_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{109, 0}
}
func (m *CustomizedContestGameStart_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestGameStart_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestGameStart_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestGameStart_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestGameStart_Item.Merge(m, src)
}
func (m *CustomizedContestGameStart_Item) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestGameStart_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestGameStart_Item.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestGameStart_Item proto.InternalMessageInfo

func (m *CustomizedContestGameStart_Item) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CustomizedContestGameStart_Item) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

type CustomizedContestGameEnd struct {
	Players              []*CustomizedContestGameEnd_Item `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CustomizedContestGameEnd) Reset()         { *m = CustomizedContestGameEnd{} }
func (m *CustomizedContestGameEnd) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestGameEnd) ProtoMessage()    {}
func (*CustomizedContestGameEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{110}
}
func (m *CustomizedContestGameEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestGameEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestGameEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestGameEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestGameEnd.Merge(m, src)
}
func (m *CustomizedContestGameEnd) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestGameEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestGameEnd.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestGameEnd proto.InternalMessageInfo

func (m *CustomizedContestGameEnd) GetPlayers() []*CustomizedContestGameEnd_Item {
	if m != nil {
		return m.Players
	}
	return nil
}

type CustomizedContestGameEnd_Item struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	TotalPoint           int32    `protobuf:"varint,3,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomizedContestGameEnd_Item) Reset()         { *m = CustomizedContestGameEnd_Item{} }
func (m *CustomizedContestGameEnd_Item) String() string { return proto.CompactTextString(m) }
func (*CustomizedContestGameEnd_Item) ProtoMessage()    {}
func (*CustomizedContestGameEnd_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{110, 0}
}
func (m *CustomizedContestGameEnd_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomizedContestGameEnd_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomizedContestGameEnd_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomizedContestGameEnd_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomizedContestGameEnd_Item.Merge(m, src)
}
func (m *CustomizedContestGameEnd_Item) XXX_Size() int {
	return m.Size()
}
func (m *CustomizedContestGameEnd_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomizedContestGameEnd_Item.DiscardUnknown(m)
}

var xxx_messageInfo_CustomizedContestGameEnd_Item proto.InternalMessageInfo

func (m *CustomizedContestGameEnd_Item) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CustomizedContestGameEnd_Item) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *CustomizedContestGameEnd_Item) GetTotalPoint() int32 {
	if m != nil {
		return m.TotalPoint
	}
	return 0
}

type Activity struct {
	ActivityId           uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	StartTime            uint32   `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              uint32   `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Activity) Reset()         { *m = Activity{} }
func (m *Activity) String() string { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()    {}
func (*Activity) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{111}
}
func (m *Activity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Activity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Activity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Activity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activity.Merge(m, src)
}
func (m *Activity) XXX_Size() int {
	return m.Size()
}
func (m *Activity) XXX_DiscardUnknown() {
	xxx_messageInfo_Activity.DiscardUnknown(m)
}

var xxx_messageInfo_Activity proto.InternalMessageInfo

func (m *Activity) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *Activity) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Activity) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Activity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ExchangeRecord struct {
	ExchangeId           uint32   `protobuf:"varint,1,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeRecord) Reset()         { *m = ExchangeRecord{} }
func (m *ExchangeRecord) String() string { return proto.CompactTextString(m) }
func (*ExchangeRecord) ProtoMessage()    {}
func (*ExchangeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{112}
}
func (m *ExchangeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRecord.Merge(m, src)
}
func (m *ExchangeRecord) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRecord proto.InternalMessageInfo

func (m *ExchangeRecord) GetExchangeId() uint32 {
	if m != nil {
		return m.ExchangeId
	}
	return 0
}

func (m *ExchangeRecord) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ActivityAccumulatedPointData struct {
	ActivityId           uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Point                int32    `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	GainedRewardList     []uint32 `protobuf:"varint,3,rep,packed,name=gained_reward_list,json=gainedRewardList,proto3" json:"gained_reward_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityAccumulatedPointData) Reset()         { *m = ActivityAccumulatedPointData{} }
func (m *ActivityAccumulatedPointData) String() string { return proto.CompactTextString(m) }
func (*ActivityAccumulatedPointData) ProtoMessage()    {}
func (*ActivityAccumulatedPointData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{113}
}
func (m *ActivityAccumulatedPointData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityAccumulatedPointData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityAccumulatedPointData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityAccumulatedPointData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityAccumulatedPointData.Merge(m, src)
}
func (m *ActivityAccumulatedPointData) XXX_Size() int {
	return m.Size()
}
func (m *ActivityAccumulatedPointData) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityAccumulatedPointData.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityAccumulatedPointData proto.InternalMessageInfo

func (m *ActivityAccumulatedPointData) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ActivityAccumulatedPointData) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *ActivityAccumulatedPointData) GetGainedRewardList() []uint32 {
	if m != nil {
		return m.GainedRewardList
	}
	return nil
}

type ActivityRankPointData struct {
	LeaderboardId        uint32   `protobuf:"varint,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	Point                int32    `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	GainedReward         bool     `protobuf:"varint,3,opt,name=gained_reward,json=gainedReward,proto3" json:"gained_reward,omitempty"`
	GainableTime         uint32   `protobuf:"varint,4,opt,name=gainable_time,json=gainableTime,proto3" json:"gainable_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityRankPointData) Reset()         { *m = ActivityRankPointData{} }
func (m *ActivityRankPointData) String() string { return proto.CompactTextString(m) }
func (*ActivityRankPointData) ProtoMessage()    {}
func (*ActivityRankPointData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{114}
}
func (m *ActivityRankPointData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRankPointData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRankPointData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRankPointData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRankPointData.Merge(m, src)
}
func (m *ActivityRankPointData) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRankPointData) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRankPointData.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRankPointData proto.InternalMessageInfo

func (m *ActivityRankPointData) GetLeaderboardId() uint32 {
	if m != nil {
		return m.LeaderboardId
	}
	return 0
}

func (m *ActivityRankPointData) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *ActivityRankPointData) GetGainedReward() bool {
	if m != nil {
		return m.GainedReward
	}
	return false
}

func (m *ActivityRankPointData) GetGainableTime() uint32 {
	if m != nil {
		return m.GainableTime
	}
	return 0
}

type GameRoundHuData struct {
	Hupai                *GameRoundHuData_HuPai `protobuf:"bytes,1,opt,name=hupai,proto3" json:"hupai,omitempty"`
	Fans                 []*GameRoundHuData_Fan `protobuf:"bytes,2,rep,name=fans,proto3" json:"fans,omitempty"`
	Score                uint32                 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Xun                  uint32                 `protobuf:"varint,4,opt,name=xun,proto3" json:"xun,omitempty"`
	TitleId              uint32                 `protobuf:"varint,5,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	FanSum               uint32                 `protobuf:"varint,6,opt,name=fan_sum,json=fanSum,proto3" json:"fan_sum,omitempty"`
	FuSum                uint32                 `protobuf:"varint,7,opt,name=fu_sum,json=fuSum,proto3" json:"fu_sum,omitempty"`
	YakumanCount         uint32                 `protobuf:"varint,8,opt,name=yakuman_count,json=yakumanCount,proto3" json:"yakuman_count,omitempty"`
	BiaoDoraCount        uint32                 `protobuf:"varint,9,opt,name=biao_dora_count,json=biaoDoraCount,proto3" json:"biao_dora_count,omitempty"`
	RedDoraCount         uint32                 `protobuf:"varint,10,opt,name=red_dora_count,json=redDoraCount,proto3" json:"red_dora_count,omitempty"`
	LiDoraCount          uint32                 `protobuf:"varint,11,opt,name=li_dora_count,json=liDoraCount,proto3" json:"li_dora_count,omitempty"`
	BabeiCount           uint32                 `protobuf:"varint,12,opt,name=babei_count,json=babeiCount,proto3" json:"babei_count,omitempty"`
	XuanShangCount       uint32                 `protobuf:"varint,13,opt,name=xuan_shang_count,json=xuanShangCount,proto3" json:"xuan_shang_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GameRoundHuData) Reset()         { *m = GameRoundHuData{} }
func (m *GameRoundHuData) String() string { return proto.CompactTextString(m) }
func (*GameRoundHuData) ProtoMessage()    {}
func (*GameRoundHuData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{115}
}
func (m *GameRoundHuData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoundHuData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoundHuData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoundHuData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoundHuData.Merge(m, src)
}
func (m *GameRoundHuData) XXX_Size() int {
	return m.Size()
}
func (m *GameRoundHuData) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoundHuData.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoundHuData proto.InternalMessageInfo

func (m *GameRoundHuData) GetHupai() *GameRoundHuData_HuPai {
	if m != nil {
		return m.Hupai
	}
	return nil
}

func (m *GameRoundHuData) GetFans() []*GameRoundHuData_Fan {
	if m != nil {
		return m.Fans
	}
	return nil
}

func (m *GameRoundHuData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameRoundHuData) GetXun() uint32 {
	if m != nil {
		return m.Xun
	}
	return 0
}

func (m *GameRoundHuData) GetTitleId() uint32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

func (m *GameRoundHuData) GetFanSum() uint32 {
	if m != nil {
		return m.FanSum
	}
	return 0
}

func (m *GameRoundHuData) GetFuSum() uint32 {
	if m != nil {
		return m.FuSum
	}
	return 0
}

func (m *GameRoundHuData) GetYakumanCount() uint32 {
	if m != nil {
		return m.YakumanCount
	}
	return 0
}

func (m *GameRoundHuData) GetBiaoDoraCount() uint32 {
	if m != nil {
		return m.BiaoDoraCount
	}
	return 0
}

func (m *GameRoundHuData) GetRedDoraCount() uint32 {
	if m != nil {
		return m.RedDoraCount
	}
	return 0
}

func (m *GameRoundHuData) GetLiDoraCount() uint32 {
	if m != nil {
		return m.LiDoraCount
	}
	return 0
}

func (m *GameRoundHuData) GetBabeiCount() uint32 {
	if m != nil {
		return m.BabeiCount
	}
	return 0
}

func (m *GameRoundHuData) GetXuanShangCount() uint32 {
	if m != nil {
		return m.XuanShangCount
	}
	return 0
}

type GameRoundHuData_HuPai struct {
	Tile                 string   `protobuf:"bytes,1,opt,name=tile,proto3" json:"tile,omitempty"`
	Seat                 uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Liqi                 uint32   `protobuf:"varint,3,opt,name=liqi,proto3" json:"liqi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameRoundHuData_HuPai) Reset()         { *m = GameRoundHuData_HuPai{} }
func (m *GameRoundHuData_HuPai) String() string { return proto.CompactTextString(m) }
func (*GameRoundHuData_HuPai) ProtoMessage()    {}
func (*GameRoundHuData_HuPai) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{115, 0}
}
func (m *GameRoundHuData_HuPai) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoundHuData_HuPai) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoundHuData_HuPai.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoundHuData_HuPai) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoundHuData_HuPai.Merge(m, src)
}
func (m *GameRoundHuData_HuPai) XXX_Size() int {
	return m.Size()
}
func (m *GameRoundHuData_HuPai) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoundHuData_HuPai.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoundHuData_HuPai proto.InternalMessageInfo

func (m *GameRoundHuData_HuPai) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *GameRoundHuData_HuPai) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *GameRoundHuData_HuPai) GetLiqi() uint32 {
	if m != nil {
		return m.Liqi
	}
	return 0
}

type GameRoundHuData_Fan struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Fan                  uint32   `protobuf:"varint,3,opt,name=fan,proto3" json:"fan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameRoundHuData_Fan) Reset()         { *m = GameRoundHuData_Fan{} }
func (m *GameRoundHuData_Fan) String() string { return proto.CompactTextString(m) }
func (*GameRoundHuData_Fan) ProtoMessage()    {}
func (*GameRoundHuData_Fan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{115, 1}
}
func (m *GameRoundHuData_Fan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoundHuData_Fan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoundHuData_Fan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoundHuData_Fan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoundHuData_Fan.Merge(m, src)
}
func (m *GameRoundHuData_Fan) XXX_Size() int {
	return m.Size()
}
func (m *GameRoundHuData_Fan) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoundHuData_Fan.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoundHuData_Fan proto.InternalMessageInfo

func (m *GameRoundHuData_Fan) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameRoundHuData_Fan) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GameRoundHuData_Fan) GetFan() uint32 {
	if m != nil {
		return m.Fan
	}
	return 0
}

type GameRoundPlayerResult struct {
	Type                 uint32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Hands                []string         `protobuf:"bytes,2,rep,name=hands,proto3" json:"hands,omitempty"`
	Ming                 []string         `protobuf:"bytes,3,rep,name=ming,proto3" json:"ming,omitempty"`
	LiqiType             uint32           `protobuf:"varint,4,opt,name=liqi_type,json=liqiType,proto3" json:"liqi_type,omitempty"`
	IsFulu               bool             `protobuf:"varint,5,opt,name=is_fulu,json=isFulu,proto3" json:"is_fulu,omitempty"`
	IsLiujumanguan       bool             `protobuf:"varint,6,opt,name=is_liujumanguan,json=isLiujumanguan,proto3" json:"is_liujumanguan,omitempty"`
	LianZhuang           uint32           `protobuf:"varint,7,opt,name=lian_zhuang,json=lianZhuang,proto3" json:"lian_zhuang,omitempty"`
	Hu                   *GameRoundHuData `protobuf:"bytes,8,opt,name=hu,proto3" json:"hu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GameRoundPlayerResult) Reset()         { *m = GameRoundPlayerResult{} }
func (m *GameRoundPlayerResult) String() string { return proto.CompactTextString(m) }
func (*GameRoundPlayerResult) ProtoMessage()    {}
func (*GameRoundPlayerResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{116}
}
func (m *GameRoundPlayerResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoundPlayerResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoundPlayerResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoundPlayerResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoundPlayerResult.Merge(m, src)
}
func (m *GameRoundPlayerResult) XXX_Size() int {
	return m.Size()
}
func (m *GameRoundPlayerResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoundPlayerResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoundPlayerResult proto.InternalMessageInfo

func (m *GameRoundPlayerResult) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GameRoundPlayerResult) GetHands() []string {
	if m != nil {
		return m.Hands
	}
	return nil
}

func (m *GameRoundPlayerResult) GetMing() []string {
	if m != nil {
		return m.Ming
	}
	return nil
}

func (m *GameRoundPlayerResult) GetLiqiType() uint32 {
	if m != nil {
		return m.LiqiType
	}
	return 0
}

func (m *GameRoundPlayerResult) GetIsFulu() bool {
	if m != nil {
		return m.IsFulu
	}
	return false
}

func (m *GameRoundPlayerResult) GetIsLiujumanguan() bool {
	if m != nil {
		return m.IsLiujumanguan
	}
	return false
}

func (m *GameRoundPlayerResult) GetLianZhuang() uint32 {
	if m != nil {
		return m.LianZhuang
	}
	return 0
}

func (m *GameRoundPlayerResult) GetHu() *GameRoundHuData {
	if m != nil {
		return m.Hu
	}
	return nil
}

type GameRoundPlayer struct {
	Score                int32                  `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Rank                 uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Result               *GameRoundPlayerResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GameRoundPlayer) Reset()         { *m = GameRoundPlayer{} }
func (m *GameRoundPlayer) String() string { return proto.CompactTextString(m) }
func (*GameRoundPlayer) ProtoMessage()    {}
func (*GameRoundPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{117}
}
func (m *GameRoundPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoundPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoundPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoundPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoundPlayer.Merge(m, src)
}
func (m *GameRoundPlayer) XXX_Size() int {
	return m.Size()
}
func (m *GameRoundPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoundPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoundPlayer proto.InternalMessageInfo

func (m *GameRoundPlayer) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameRoundPlayer) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GameRoundPlayer) GetResult() *GameRoundPlayerResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GameRoundSnapshot struct {
	Ju                   uint32             `protobuf:"varint,1,opt,name=ju,proto3" json:"ju,omitempty"`
	Ben                  uint32             `protobuf:"varint,2,opt,name=ben,proto3" json:"ben,omitempty"`
	Players              []*GameRoundPlayer `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GameRoundSnapshot) Reset()         { *m = GameRoundSnapshot{} }
func (m *GameRoundSnapshot) String() string { return proto.CompactTextString(m) }
func (*GameRoundSnapshot) ProtoMessage()    {}
func (*GameRoundSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{118}
}
func (m *GameRoundSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoundSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoundSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoundSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoundSnapshot.Merge(m, src)
}
func (m *GameRoundSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GameRoundSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoundSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoundSnapshot proto.InternalMessageInfo

func (m *GameRoundSnapshot) GetJu() uint32 {
	if m != nil {
		return m.Ju
	}
	return 0
}

func (m *GameRoundSnapshot) GetBen() uint32 {
	if m != nil {
		return m.Ben
	}
	return 0
}

func (m *GameRoundSnapshot) GetPlayers() []*GameRoundPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type GameFinalSnapshot struct {
	Uuid                 string                            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	State                uint32                            `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Category             uint32                            `protobuf:"varint,3,opt,name=category,proto3" json:"category,omitempty"`
	Mode                 *GameMode                         `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Meta                 *GameMetaData                     `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	CalculateParam       *GameFinalSnapshot_CalculateParam `protobuf:"bytes,6,opt,name=calculate_param,json=calculateParam,proto3" json:"calculate_param,omitempty"`
	CreateTime           uint32                            `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime            uint32                            `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime           uint32                            `protobuf:"varint,9,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Seats                []*GameFinalSnapshot_GameSeat     `protobuf:"bytes,10,rep,name=seats,proto3" json:"seats,omitempty"`
	Rounds               []*GameRoundSnapshot              `protobuf:"bytes,11,rep,name=rounds,proto3" json:"rounds,omitempty"`
	AccountViews         []*PlayerGameView                 `protobuf:"bytes,12,rep,name=account_views,json=accountViews,proto3" json:"account_views,omitempty"`
	FinalPlayers         []*GameFinalSnapshot_FinalPlayer  `protobuf:"bytes,13,rep,name=final_players,json=finalPlayers,proto3" json:"final_players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *GameFinalSnapshot) Reset()         { *m = GameFinalSnapshot{} }
func (m *GameFinalSnapshot) String() string { return proto.CompactTextString(m) }
func (*GameFinalSnapshot) ProtoMessage()    {}
func (*GameFinalSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{119}
}
func (m *GameFinalSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameFinalSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameFinalSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameFinalSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameFinalSnapshot.Merge(m, src)
}
func (m *GameFinalSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GameFinalSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameFinalSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GameFinalSnapshot proto.InternalMessageInfo

func (m *GameFinalSnapshot) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GameFinalSnapshot) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *GameFinalSnapshot) GetCategory() uint32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *GameFinalSnapshot) GetMode() *GameMode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *GameFinalSnapshot) GetMeta() *GameMetaData {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GameFinalSnapshot) GetCalculateParam() *GameFinalSnapshot_CalculateParam {
	if m != nil {
		return m.CalculateParam
	}
	return nil
}

func (m *GameFinalSnapshot) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GameFinalSnapshot) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GameFinalSnapshot) GetFinishTime() uint32 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *GameFinalSnapshot) GetSeats() []*GameFinalSnapshot_GameSeat {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *GameFinalSnapshot) GetRounds() []*GameRoundSnapshot {
	if m != nil {
		return m.Rounds
	}
	return nil
}

func (m *GameFinalSnapshot) GetAccountViews() []*PlayerGameView {
	if m != nil {
		return m.AccountViews
	}
	return nil
}

func (m *GameFinalSnapshot) GetFinalPlayers() []*GameFinalSnapshot_FinalPlayer {
	if m != nil {
		return m.FinalPlayers
	}
	return nil
}

type GameFinalSnapshot_CalculateParam struct {
	InitPoint            uint32   `protobuf:"varint,1,opt,name=init_point,json=initPoint,proto3" json:"init_point,omitempty"`
	Jingsuanyuandian     uint32   `protobuf:"varint,2,opt,name=jingsuanyuandian,proto3" json:"jingsuanyuandian,omitempty"`
	RankPoints           []int32  `protobuf:"varint,3,rep,packed,name=rank_points,json=rankPoints,proto3" json:"rank_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameFinalSnapshot_CalculateParam) Reset()         { *m = GameFinalSnapshot_CalculateParam{} }
func (m *GameFinalSnapshot_CalculateParam) String() string { return proto.CompactTextString(m) }
func (*GameFinalSnapshot_CalculateParam) ProtoMessage()    {}
func (*GameFinalSnapshot_CalculateParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{119, 0}
}
func (m *GameFinalSnapshot_CalculateParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameFinalSnapshot_CalculateParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameFinalSnapshot_CalculateParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameFinalSnapshot_CalculateParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameFinalSnapshot_CalculateParam.Merge(m, src)
}
func (m *GameFinalSnapshot_CalculateParam) XXX_Size() int {
	return m.Size()
}
func (m *GameFinalSnapshot_CalculateParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GameFinalSnapshot_CalculateParam.DiscardUnknown(m)
}

var xxx_messageInfo_GameFinalSnapshot_CalculateParam proto.InternalMessageInfo

func (m *GameFinalSnapshot_CalculateParam) GetInitPoint() uint32 {
	if m != nil {
		return m.InitPoint
	}
	return 0
}

func (m *GameFinalSnapshot_CalculateParam) GetJingsuanyuandian() uint32 {
	if m != nil {
		return m.Jingsuanyuandian
	}
	return 0
}

func (m *GameFinalSnapshot_CalculateParam) GetRankPoints() []int32 {
	if m != nil {
		return m.RankPoints
	}
	return nil
}

type GameFinalSnapshot_GameSeat struct {
	Type                 uint32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	AccountId            uint32           `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	NotifyEndpoint       *NetworkEndpoint `protobuf:"bytes,3,opt,name=notify_endpoint,json=notifyEndpoint,proto3" json:"notify_endpoint,omitempty"`
	ClientAddress        string           `protobuf:"bytes,4,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	IsConnected          bool             `protobuf:"varint,5,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GameFinalSnapshot_GameSeat) Reset()         { *m = GameFinalSnapshot_GameSeat{} }
func (m *GameFinalSnapshot_GameSeat) String() string { return proto.CompactTextString(m) }
func (*GameFinalSnapshot_GameSeat) ProtoMessage()    {}
func (*GameFinalSnapshot_GameSeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{119, 1}
}
func (m *GameFinalSnapshot_GameSeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameFinalSnapshot_GameSeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameFinalSnapshot_GameSeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameFinalSnapshot_GameSeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameFinalSnapshot_GameSeat.Merge(m, src)
}
func (m *GameFinalSnapshot_GameSeat) XXX_Size() int {
	return m.Size()
}
func (m *GameFinalSnapshot_GameSeat) XXX_DiscardUnknown() {
	xxx_messageInfo_GameFinalSnapshot_GameSeat.DiscardUnknown(m)
}

var xxx_messageInfo_GameFinalSnapshot_GameSeat proto.InternalMessageInfo

func (m *GameFinalSnapshot_GameSeat) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GameFinalSnapshot_GameSeat) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *GameFinalSnapshot_GameSeat) GetNotifyEndpoint() *NetworkEndpoint {
	if m != nil {
		return m.NotifyEndpoint
	}
	return nil
}

func (m *GameFinalSnapshot_GameSeat) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *GameFinalSnapshot_GameSeat) GetIsConnected() bool {
	if m != nil {
		return m.IsConnected
	}
	return false
}

type GameFinalSnapshot_FinalPlayer struct {
	Seat                 uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	TotalPoint           int32    `protobuf:"varint,2,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	PartPoint_1          int32    `protobuf:"varint,3,opt,name=part_point_1,json=partPoint1,proto3" json:"part_point_1,omitempty"`
	PartPoint_2          int32    `protobuf:"varint,4,opt,name=part_point_2,json=partPoint2,proto3" json:"part_point_2,omitempty"`
	GradingScore         int32    `protobuf:"varint,5,opt,name=grading_score,json=gradingScore,proto3" json:"grading_score,omitempty"`
	Gold                 int32    `protobuf:"varint,6,opt,name=gold,proto3" json:"gold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameFinalSnapshot_FinalPlayer) Reset()         { *m = GameFinalSnapshot_FinalPlayer{} }
func (m *GameFinalSnapshot_FinalPlayer) String() string { return proto.CompactTextString(m) }
func (*GameFinalSnapshot_FinalPlayer) ProtoMessage()    {}
func (*GameFinalSnapshot_FinalPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{119, 2}
}
func (m *GameFinalSnapshot_FinalPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameFinalSnapshot_FinalPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameFinalSnapshot_FinalPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameFinalSnapshot_FinalPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameFinalSnapshot_FinalPlayer.Merge(m, src)
}
func (m *GameFinalSnapshot_FinalPlayer) XXX_Size() int {
	return m.Size()
}
func (m *GameFinalSnapshot_FinalPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GameFinalSnapshot_FinalPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_GameFinalSnapshot_FinalPlayer proto.InternalMessageInfo

func (m *GameFinalSnapshot_FinalPlayer) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *GameFinalSnapshot_FinalPlayer) GetTotalPoint() int32 {
	if m != nil {
		return m.TotalPoint
	}
	return 0
}

func (m *GameFinalSnapshot_FinalPlayer) GetPartPoint_1() int32 {
	if m != nil {
		return m.PartPoint_1
	}
	return 0
}

func (m *GameFinalSnapshot_FinalPlayer) GetPartPoint_2() int32 {
	if m != nil {
		return m.PartPoint_2
	}
	return 0
}

func (m *GameFinalSnapshot_FinalPlayer) GetGradingScore() int32 {
	if m != nil {
		return m.GradingScore
	}
	return 0
}

func (m *GameFinalSnapshot_FinalPlayer) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

type RecordCollectedData struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Remarks              string   `protobuf:"bytes,2,opt,name=remarks,proto3" json:"remarks,omitempty"`
	StartTime            uint32   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              uint32   `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordCollectedData) Reset()         { *m = RecordCollectedData{} }
func (m *RecordCollectedData) String() string { return proto.CompactTextString(m) }
func (*RecordCollectedData) ProtoMessage()    {}
func (*RecordCollectedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{120}
}
func (m *RecordCollectedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordCollectedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordCollectedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordCollectedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordCollectedData.Merge(m, src)
}
func (m *RecordCollectedData) XXX_Size() int {
	return m.Size()
}
func (m *RecordCollectedData) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordCollectedData.DiscardUnknown(m)
}

var xxx_messageInfo_RecordCollectedData proto.InternalMessageInfo

func (m *RecordCollectedData) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *RecordCollectedData) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func (m *RecordCollectedData) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RecordCollectedData) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type ResConnectionInfo struct {
	Error                *Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ClientEndpoint       *NetworkEndpoint `protobuf:"bytes,2,opt,name=client_endpoint,json=clientEndpoint,proto3" json:"client_endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ResConnectionInfo) Reset()         { *m = ResConnectionInfo{} }
func (m *ResConnectionInfo) String() string { return proto.CompactTextString(m) }
func (*ResConnectionInfo) ProtoMessage()    {}
func (*ResConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{121}
}
func (m *ResConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResConnectionInfo.Merge(m, src)
}
func (m *ResConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResConnectionInfo proto.InternalMessageInfo

func (m *ResConnectionInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResConnectionInfo) GetClientEndpoint() *NetworkEndpoint {
	if m != nil {
		return m.ClientEndpoint
	}
	return nil
}

type ReqSignupAccount struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Code                 string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Type                 uint32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSignupAccount) Reset()         { *m = ReqSignupAccount{} }
func (m *ReqSignupAccount) String() string { return proto.CompactTextString(m) }
func (*ReqSignupAccount) ProtoMessage()    {}
func (*ReqSignupAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{122}
}
func (m *ReqSignupAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSignupAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSignupAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSignupAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSignupAccount.Merge(m, src)
}
func (m *ReqSignupAccount) XXX_Size() int {
	return m.Size()
}
func (m *ReqSignupAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSignupAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSignupAccount proto.InternalMessageInfo

func (m *ReqSignupAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ReqSignupAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqSignupAccount) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqSignupAccount) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResSignupAccount struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResSignupAccount) Reset()         { *m = ResSignupAccount{} }
func (m *ResSignupAccount) String() string { return proto.CompactTextString(m) }
func (*ResSignupAccount) ProtoMessage()    {}
func (*ResSignupAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{123}
}
func (m *ResSignupAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResSignupAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResSignupAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResSignupAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSignupAccount.Merge(m, src)
}
func (m *ResSignupAccount) XXX_Size() int {
	return m.Size()
}
func (m *ResSignupAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSignupAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ResSignupAccount proto.InternalMessageInfo

func (m *ResSignupAccount) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReqLogin struct {
	Account              string            `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password             string            `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Reconnect            bool              `protobuf:"varint,3,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	Device               *ClientDeviceInfo `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	RandomKey            string            `protobuf:"bytes,5,opt,name=random_key,json=randomKey,proto3" json:"random_key,omitempty"`
	ClientVersion        string            `protobuf:"bytes,6,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	GenAccessToken       bool              `protobuf:"varint,7,opt,name=gen_access_token,json=genAccessToken,proto3" json:"gen_access_token,omitempty"`
	CurrencyPlatforms    []uint32          `protobuf:"varint,8,rep,packed,name=currency_platforms,json=currencyPlatforms,proto3" json:"currency_platforms,omitempty"`
	Type                 uint32            `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReqLogin) Reset()         { *m = ReqLogin{} }
func (m *ReqLogin) String() string { return proto.CompactTextString(m) }
func (*ReqLogin) ProtoMessage()    {}
func (*ReqLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{124}
}
func (m *ReqLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLogin.Merge(m, src)
}
func (m *ReqLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLogin proto.InternalMessageInfo

func (m *ReqLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ReqLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqLogin) GetReconnect() bool {
	if m != nil {
		return m.Reconnect
	}
	return false
}

func (m *ReqLogin) GetDevice() *ClientDeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ReqLogin) GetRandomKey() string {
	if m != nil {
		return m.RandomKey
	}
	return ""
}

func (m *ReqLogin) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ReqLogin) GetGenAccessToken() bool {
	if m != nil {
		return m.GenAccessToken
	}
	return false
}

func (m *ReqLogin) GetCurrencyPlatforms() []uint32 {
	if m != nil {
		return m.CurrencyPlatforms
	}
	return nil
}

func (m *ReqLogin) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResLogin struct {
	Error                 *Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	AccountId             uint32           `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Account               *Account         `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	GameInfo              *GameConnectInfo `protobuf:"bytes,4,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"`
	HasUnreadAnnouncement bool             `protobuf:"varint,5,opt,name=has_unread_announcement,json=hasUnreadAnnouncement,proto3" json:"has_unread_announcement,omitempty"`
	AccessToken           string           `protobuf:"bytes,6,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *ResLogin) Reset()         { *m = ResLogin{} }
func (m *ResLogin) String() string { return proto.CompactTextString(m) }
func (*ResLogin) ProtoMessage()    {}
func (*ResLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{125}
}
func (m *ResLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResLogin.Merge(m, src)
}
func (m *ResLogin) XXX_Size() int {
	return m.Size()
}
func (m *ResLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ResLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ResLogin proto.InternalMessageInfo

func (m *ResLogin) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResLogin) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ResLogin) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *ResLogin) GetGameInfo() *GameConnectInfo {
	if m != nil {
		return m.GameInfo
	}
	return nil
}

func (m *ResLogin) GetHasUnreadAnnouncement() bool {
	if m != nil {
		return m.HasUnreadAnnouncement
	}
	return false
}

func (m *ResLogin) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ReqEmailLogin struct {
	Email                string            `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             string            `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Reconnect            bool              `protobuf:"varint,3,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	Device               *ClientDeviceInfo `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	RandomKey            string            `protobuf:"bytes,5,opt,name=random_key,json=randomKey,proto3" json:"random_key,omitempty"`
	ClientVersion        string            `protobuf:"bytes,6,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	GenAccessToken       bool              `protobuf:"varint,7,opt,name=gen_access_token,json=genAccessToken,proto3" json:"gen_access_token,omitempty"`
	CurrencyPlatforms    []uint32          `protobuf:"varint,8,rep,packed,name=currency_platforms,json=currencyPlatforms,proto3" json:"currency_platforms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReqEmailLogin) Reset()         { *m = ReqEmailLogin{} }
func (m *ReqEmailLogin) String() string { return proto.CompactTextString(m) }
func (*ReqEmailLogin) ProtoMessage()    {}
func (*ReqEmailLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{126}
}
func (m *ReqEmailLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqEmailLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqEmailLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqEmailLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqEmailLogin.Merge(m, src)
}
func (m *ReqEmailLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqEmailLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqEmailLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqEmailLogin proto.InternalMessageInfo

func (m *ReqEmailLogin) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReqEmailLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqEmailLogin) GetReconnect() bool {
	if m != nil {
		return m.Reconnect
	}
	return false
}

func (m *ReqEmailLogin) GetDevice() *ClientDeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ReqEmailLogin) GetRandomKey() string {
	if m != nil {
		return m.RandomKey
	}
	return ""
}

func (m *ReqEmailLogin) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ReqEmailLogin) GetGenAccessToken() bool {
	if m != nil {
		return m.GenAccessToken
	}
	return false
}

func (m *ReqEmailLogin) GetCurrencyPlatforms() []uint32 {
	if m != nil {
		return m.CurrencyPlatforms
	}
	return nil
}

type ReqBindAccount struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBindAccount) Reset()         { *m = ReqBindAccount{} }
func (m *ReqBindAccount) String() string { return proto.CompactTextString(m) }
func (*ReqBindAccount) ProtoMessage()    {}
func (*ReqBindAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{127}
}
func (m *ReqBindAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBindAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBindAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBindAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBindAccount.Merge(m, src)
}
func (m *ReqBindAccount) XXX_Size() int {
	return m.Size()
}
func (m *ReqBindAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBindAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBindAccount proto.InternalMessageInfo

func (m *ReqBindAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ReqBindAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ReqCreatePhoneVerifyCode struct {
	Phone                string   `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Usage                uint32   `protobuf:"varint,2,opt,name=usage,proto3" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreatePhoneVerifyCode) Reset()         { *m = ReqCreatePhoneVerifyCode{} }
func (m *ReqCreatePhoneVerifyCode) String() string { return proto.CompactTextString(m) }
func (*ReqCreatePhoneVerifyCode) ProtoMessage()    {}
func (*ReqCreatePhoneVerifyCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{128}
}
func (m *ReqCreatePhoneVerifyCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreatePhoneVerifyCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreatePhoneVerifyCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreatePhoneVerifyCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreatePhoneVerifyCode.Merge(m, src)
}
func (m *ReqCreatePhoneVerifyCode) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreatePhoneVerifyCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreatePhoneVerifyCode.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreatePhoneVerifyCode proto.InternalMessageInfo

func (m *ReqCreatePhoneVerifyCode) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqCreatePhoneVerifyCode) GetUsage() uint32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

type ReqCreateEmailVerifyCode struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Usage                uint32   `protobuf:"varint,2,opt,name=usage,proto3" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateEmailVerifyCode) Reset()         { *m = ReqCreateEmailVerifyCode{} }
func (m *ReqCreateEmailVerifyCode) String() string { return proto.CompactTextString(m) }
func (*ReqCreateEmailVerifyCode) ProtoMessage()    {}
func (*ReqCreateEmailVerifyCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{129}
}
func (m *ReqCreateEmailVerifyCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateEmailVerifyCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateEmailVerifyCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateEmailVerifyCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateEmailVerifyCode.Merge(m, src)
}
func (m *ReqCreateEmailVerifyCode) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateEmailVerifyCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateEmailVerifyCode.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateEmailVerifyCode proto.InternalMessageInfo

func (m *ReqCreateEmailVerifyCode) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReqCreateEmailVerifyCode) GetUsage() uint32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

type ReqVerifyCodeForSecure struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Operation            uint32   `protobuf:"varint,2,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqVerifyCodeForSecure) Reset()         { *m = ReqVerifyCodeForSecure{} }
func (m *ReqVerifyCodeForSecure) String() string { return proto.CompactTextString(m) }
func (*ReqVerifyCodeForSecure) ProtoMessage()    {}
func (*ReqVerifyCodeForSecure) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{130}
}
func (m *ReqVerifyCodeForSecure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqVerifyCodeForSecure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqVerifyCodeForSecure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqVerifyCodeForSecure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqVerifyCodeForSecure.Merge(m, src)
}
func (m *ReqVerifyCodeForSecure) XXX_Size() int {
	return m.Size()
}
func (m *ReqVerifyCodeForSecure) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqVerifyCodeForSecure.DiscardUnknown(m)
}

var xxx_messageInfo_ReqVerifyCodeForSecure proto.InternalMessageInfo

func (m *ReqVerifyCodeForSecure) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqVerifyCodeForSecure) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

type ResVerfiyCodeForSecure struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	SecureToken          string   `protobuf:"bytes,2,opt,name=secure_token,json=secureToken,proto3" json:"secure_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResVerfiyCodeForSecure) Reset()         { *m = ResVerfiyCodeForSecure{} }
func (m *ResVerfiyCodeForSecure) String() string { return proto.CompactTextString(m) }
func (*ResVerfiyCodeForSecure) ProtoMessage()    {}
func (*ResVerfiyCodeForSecure) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{131}
}
func (m *ResVerfiyCodeForSecure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResVerfiyCodeForSecure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResVerfiyCodeForSecure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResVerfiyCodeForSecure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResVerfiyCodeForSecure.Merge(m, src)
}
func (m *ResVerfiyCodeForSecure) XXX_Size() int {
	return m.Size()
}
func (m *ResVerfiyCodeForSecure) XXX_DiscardUnknown() {
	xxx_messageInfo_ResVerfiyCodeForSecure.DiscardUnknown(m)
}

var xxx_messageInfo_ResVerfiyCodeForSecure proto.InternalMessageInfo

func (m *ResVerfiyCodeForSecure) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResVerfiyCodeForSecure) GetSecureToken() string {
	if m != nil {
		return m.SecureToken
	}
	return ""
}

type ReqBindPhoneNumber struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Phone                string   `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBindPhoneNumber) Reset()         { *m = ReqBindPhoneNumber{} }
func (m *ReqBindPhoneNumber) String() string { return proto.CompactTextString(m) }
func (*ReqBindPhoneNumber) ProtoMessage()    {}
func (*ReqBindPhoneNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{132}
}
func (m *ReqBindPhoneNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBindPhoneNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBindPhoneNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBindPhoneNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBindPhoneNumber.Merge(m, src)
}
func (m *ReqBindPhoneNumber) XXX_Size() int {
	return m.Size()
}
func (m *ReqBindPhoneNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBindPhoneNumber.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBindPhoneNumber proto.InternalMessageInfo

func (m *ReqBindPhoneNumber) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqBindPhoneNumber) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqBindPhoneNumber) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ReqBindEmail struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBindEmail) Reset()         { *m = ReqBindEmail{} }
func (m *ReqBindEmail) String() string { return proto.CompactTextString(m) }
func (*ReqBindEmail) ProtoMessage()    {}
func (*ReqBindEmail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{133}
}
func (m *ReqBindEmail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBindEmail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBindEmail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBindEmail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBindEmail.Merge(m, src)
}
func (m *ReqBindEmail) XXX_Size() int {
	return m.Size()
}
func (m *ReqBindEmail) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBindEmail.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBindEmail proto.InternalMessageInfo

func (m *ReqBindEmail) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReqBindEmail) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqBindEmail) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ReqModifyPassword struct {
	NewPassword          string   `protobuf:"bytes,1,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	OldPassword          string   `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	SecureToken          string   `protobuf:"bytes,3,opt,name=secure_token,json=secureToken,proto3" json:"secure_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqModifyPassword) Reset()         { *m = ReqModifyPassword{} }
func (m *ReqModifyPassword) String() string { return proto.CompactTextString(m) }
func (*ReqModifyPassword) ProtoMessage()    {}
func (*ReqModifyPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{134}
}
func (m *ReqModifyPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqModifyPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqModifyPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqModifyPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqModifyPassword.Merge(m, src)
}
func (m *ReqModifyPassword) XXX_Size() int {
	return m.Size()
}
func (m *ReqModifyPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqModifyPassword.DiscardUnknown(m)
}

var xxx_messageInfo_ReqModifyPassword proto.InternalMessageInfo

func (m *ReqModifyPassword) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *ReqModifyPassword) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *ReqModifyPassword) GetSecureToken() string {
	if m != nil {
		return m.SecureToken
	}
	return ""
}

type ReqOauth2Auth struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Uid                  string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqOauth2Auth) Reset()         { *m = ReqOauth2Auth{} }
func (m *ReqOauth2Auth) String() string { return proto.CompactTextString(m) }
func (*ReqOauth2Auth) ProtoMessage()    {}
func (*ReqOauth2Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{135}
}
func (m *ReqOauth2Auth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOauth2Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOauth2Auth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOauth2Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOauth2Auth.Merge(m, src)
}
func (m *ReqOauth2Auth) XXX_Size() int {
	return m.Size()
}
func (m *ReqOauth2Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOauth2Auth.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOauth2Auth proto.InternalMessageInfo

func (m *ReqOauth2Auth) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqOauth2Auth) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqOauth2Auth) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ResOauth2Auth struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResOauth2Auth) Reset()         { *m = ResOauth2Auth{} }
func (m *ResOauth2Auth) String() string { return proto.CompactTextString(m) }
func (*ResOauth2Auth) ProtoMessage()    {}
func (*ResOauth2Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{136}
}
func (m *ResOauth2Auth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResOauth2Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResOauth2Auth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResOauth2Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResOauth2Auth.Merge(m, src)
}
func (m *ResOauth2Auth) XXX_Size() int {
	return m.Size()
}
func (m *ResOauth2Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_ResOauth2Auth.DiscardUnknown(m)
}

var xxx_messageInfo_ResOauth2Auth proto.InternalMessageInfo

func (m *ResOauth2Auth) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResOauth2Auth) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ReqOauth2Check struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqOauth2Check) Reset()         { *m = ReqOauth2Check{} }
func (m *ReqOauth2Check) String() string { return proto.CompactTextString(m) }
func (*ReqOauth2Check) ProtoMessage()    {}
func (*ReqOauth2Check) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{137}
}
func (m *ReqOauth2Check) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOauth2Check) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOauth2Check.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOauth2Check) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOauth2Check.Merge(m, src)
}
func (m *ReqOauth2Check) XXX_Size() int {
	return m.Size()
}
func (m *ReqOauth2Check) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOauth2Check.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOauth2Check proto.InternalMessageInfo

func (m *ReqOauth2Check) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqOauth2Check) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResOauth2Check struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	HasAccount           bool     `protobuf:"varint,2,opt,name=has_account,json=hasAccount,proto3" json:"has_account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResOauth2Check) Reset()         { *m = ResOauth2Check{} }
func (m *ResOauth2Check) String() string { return proto.CompactTextString(m) }
func (*ResOauth2Check) ProtoMessage()    {}
func (*ResOauth2Check) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{138}
}
func (m *ResOauth2Check) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResOauth2Check) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResOauth2Check.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResOauth2Check) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResOauth2Check.Merge(m, src)
}
func (m *ResOauth2Check) XXX_Size() int {
	return m.Size()
}
func (m *ResOauth2Check) XXX_DiscardUnknown() {
	xxx_messageInfo_ResOauth2Check.DiscardUnknown(m)
}

var xxx_messageInfo_ResOauth2Check proto.InternalMessageInfo

func (m *ResOauth2Check) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResOauth2Check) GetHasAccount() bool {
	if m != nil {
		return m.HasAccount
	}
	return false
}

type ReqOauth2Signup struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AdvertiseStr         string   `protobuf:"bytes,4,opt,name=advertise_str,json=advertiseStr,proto3" json:"advertise_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqOauth2Signup) Reset()         { *m = ReqOauth2Signup{} }
func (m *ReqOauth2Signup) String() string { return proto.CompactTextString(m) }
func (*ReqOauth2Signup) ProtoMessage()    {}
func (*ReqOauth2Signup) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{139}
}
func (m *ReqOauth2Signup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOauth2Signup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOauth2Signup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOauth2Signup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOauth2Signup.Merge(m, src)
}
func (m *ReqOauth2Signup) XXX_Size() int {
	return m.Size()
}
func (m *ReqOauth2Signup) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOauth2Signup.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOauth2Signup proto.InternalMessageInfo

func (m *ReqOauth2Signup) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqOauth2Signup) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *ReqOauth2Signup) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReqOauth2Signup) GetAdvertiseStr() string {
	if m != nil {
		return m.AdvertiseStr
	}
	return ""
}

type ResOauth2Signup struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResOauth2Signup) Reset()         { *m = ResOauth2Signup{} }
func (m *ResOauth2Signup) String() string { return proto.CompactTextString(m) }
func (*ResOauth2Signup) ProtoMessage()    {}
func (*ResOauth2Signup) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{140}
}
func (m *ResOauth2Signup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResOauth2Signup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResOauth2Signup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResOauth2Signup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResOauth2Signup.Merge(m, src)
}
func (m *ResOauth2Signup) XXX_Size() int {
	return m.Size()
}
func (m *ResOauth2Signup) XXX_DiscardUnknown() {
	xxx_messageInfo_ResOauth2Signup.DiscardUnknown(m)
}

var xxx_messageInfo_ResOauth2Signup proto.InternalMessageInfo

func (m *ResOauth2Signup) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReqOauth2Login struct {
	Type                 uint32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	AccessToken          string            `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Reconnect            bool              `protobuf:"varint,3,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	Device               *ClientDeviceInfo `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	RandomKey            string            `protobuf:"bytes,5,opt,name=random_key,json=randomKey,proto3" json:"random_key,omitempty"`
	ClientVersion        string            `protobuf:"bytes,6,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	CurrencyPlatforms    []uint32          `protobuf:"varint,8,rep,packed,name=currency_platforms,json=currencyPlatforms,proto3" json:"currency_platforms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReqOauth2Login) Reset()         { *m = ReqOauth2Login{} }
func (m *ReqOauth2Login) String() string { return proto.CompactTextString(m) }
func (*ReqOauth2Login) ProtoMessage()    {}
func (*ReqOauth2Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{141}
}
func (m *ReqOauth2Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOauth2Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOauth2Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOauth2Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOauth2Login.Merge(m, src)
}
func (m *ReqOauth2Login) XXX_Size() int {
	return m.Size()
}
func (m *ReqOauth2Login) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOauth2Login.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOauth2Login proto.InternalMessageInfo

func (m *ReqOauth2Login) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqOauth2Login) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *ReqOauth2Login) GetReconnect() bool {
	if m != nil {
		return m.Reconnect
	}
	return false
}

func (m *ReqOauth2Login) GetDevice() *ClientDeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ReqOauth2Login) GetRandomKey() string {
	if m != nil {
		return m.RandomKey
	}
	return ""
}

func (m *ReqOauth2Login) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ReqOauth2Login) GetCurrencyPlatforms() []uint32 {
	if m != nil {
		return m.CurrencyPlatforms
	}
	return nil
}

type ReqLogout struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqLogout) Reset()         { *m = ReqLogout{} }
func (m *ReqLogout) String() string { return proto.CompactTextString(m) }
func (*ReqLogout) ProtoMessage()    {}
func (*ReqLogout) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{142}
}
func (m *ReqLogout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLogout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLogout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLogout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLogout.Merge(m, src)
}
func (m *ReqLogout) XXX_Size() int {
	return m.Size()
}
func (m *ReqLogout) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLogout.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLogout proto.InternalMessageInfo

type ResLogout struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResLogout) Reset()         { *m = ResLogout{} }
func (m *ResLogout) String() string { return proto.CompactTextString(m) }
func (*ResLogout) ProtoMessage()    {}
func (*ResLogout) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{143}
}
func (m *ResLogout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResLogout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResLogout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResLogout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResLogout.Merge(m, src)
}
func (m *ResLogout) XXX_Size() int {
	return m.Size()
}
func (m *ResLogout) XXX_DiscardUnknown() {
	xxx_messageInfo_ResLogout.DiscardUnknown(m)
}

var xxx_messageInfo_ResLogout proto.InternalMessageInfo

func (m *ResLogout) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReqHeatBeat struct {
	NoOperationCounter   uint32   `protobuf:"varint,1,opt,name=no_operation_counter,json=noOperationCounter,proto3" json:"no_operation_counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqHeatBeat) Reset()         { *m = ReqHeatBeat{} }
func (m *ReqHeatBeat) String() string { return proto.CompactTextString(m) }
func (*ReqHeatBeat) ProtoMessage()    {}
func (*ReqHeatBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{144}
}
func (m *ReqHeatBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqHeatBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqHeatBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqHeatBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqHeatBeat.Merge(m, src)
}
func (m *ReqHeatBeat) XXX_Size() int {
	return m.Size()
}
func (m *ReqHeatBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqHeatBeat.DiscardUnknown(m)
}

var xxx_messageInfo_ReqHeatBeat proto.InternalMessageInfo

func (m *ReqHeatBeat) GetNoOperationCounter() uint32 {
	if m != nil {
		return m.NoOperationCounter
	}
	return 0
}

type ReqLoginBeat struct {
	Contract             string   `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqLoginBeat) Reset()         { *m = ReqLoginBeat{} }
func (m *ReqLoginBeat) String() string { return proto.CompactTextString(m) }
func (*ReqLoginBeat) ProtoMessage()    {}
func (*ReqLoginBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{145}
}
func (m *ReqLoginBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLoginBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLoginBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLoginBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLoginBeat.Merge(m, src)
}
func (m *ReqLoginBeat) XXX_Size() int {
	return m.Size()
}
func (m *ReqLoginBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLoginBeat.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLoginBeat proto.InternalMessageInfo

func (m *ReqLoginBeat) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

type ReqJoinMatchQueue struct {
	MatchMode            uint32   `protobuf:"varint,1,opt,name=match_mode,json=matchMode,proto3" json:"match_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqJoinMatchQueue) Reset()         { *m = ReqJoinMatchQueue{} }
func (m *ReqJoinMatchQueue) String() string { return proto.CompactTextString(m) }
func (*ReqJoinMatchQueue) ProtoMessage()    {}
func (*ReqJoinMatchQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{146}
}
func (m *ReqJoinMatchQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqJoinMatchQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqJoinMatchQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqJoinMatchQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqJoinMatchQueue.Merge(m, src)
}
func (m *ReqJoinMatchQueue) XXX_Size() int {
	return m.Size()
}
func (m *ReqJoinMatchQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqJoinMatchQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ReqJoinMatchQueue proto.InternalMessageInfo

func (m *ReqJoinMatchQueue) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

type ReqCancelMatchQueue struct {
	MatchMode            uint32   `protobuf:"varint,1,opt,name=match_mode,json=matchMode,proto3" json:"match_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCancelMatchQueue) Reset()         { *m = ReqCancelMatchQueue{} }
func (m *ReqCancelMatchQueue) String() string { return proto.CompactTextString(m) }
func (*ReqCancelMatchQueue) ProtoMessage()    {}
func (*ReqCancelMatchQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{147}
}
func (m *ReqCancelMatchQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCancelMatchQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCancelMatchQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCancelMatchQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCancelMatchQueue.Merge(m, src)
}
func (m *ReqCancelMatchQueue) XXX_Size() int {
	return m.Size()
}
func (m *ReqCancelMatchQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCancelMatchQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCancelMatchQueue proto.InternalMessageInfo

func (m *ReqCancelMatchQueue) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

type ReqAccountInfo struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqAccountInfo) Reset()         { *m = ReqAccountInfo{} }
func (m *ReqAccountInfo) String() string { return proto.CompactTextString(m) }
func (*ReqAccountInfo) ProtoMessage()    {}
func (*ReqAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{148}
}
func (m *ReqAccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqAccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqAccountInfo.Merge(m, src)
}
func (m *ReqAccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqAccountInfo proto.InternalMessageInfo

func (m *ReqAccountInfo) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ResAccountInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Account              *Account `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Room                 *Room    `protobuf:"bytes,3,opt,name=room,proto3" json:"room,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResAccountInfo) Reset()         { *m = ResAccountInfo{} }
func (m *ResAccountInfo) String() string { return proto.CompactTextString(m) }
func (*ResAccountInfo) ProtoMessage()    {}
func (*ResAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{149}
}
func (m *ResAccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountInfo.Merge(m, src)
}
func (m *ResAccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountInfo proto.InternalMessageInfo

func (m *ResAccountInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAccountInfo) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *ResAccountInfo) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type ReqCreateNickname struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AdvertiseStr         string   `protobuf:"bytes,2,opt,name=advertise_str,json=advertiseStr,proto3" json:"advertise_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateNickname) Reset()         { *m = ReqCreateNickname{} }
func (m *ReqCreateNickname) String() string { return proto.CompactTextString(m) }
func (*ReqCreateNickname) ProtoMessage()    {}
func (*ReqCreateNickname) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{150}
}
func (m *ReqCreateNickname) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateNickname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateNickname.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateNickname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateNickname.Merge(m, src)
}
func (m *ReqCreateNickname) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateNickname) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateNickname.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateNickname proto.InternalMessageInfo

func (m *ReqCreateNickname) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ReqCreateNickname) GetAdvertiseStr() string {
	if m != nil {
		return m.AdvertiseStr
	}
	return ""
}

type ReqModifyNickname struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UseItemId            uint32   `protobuf:"varint,2,opt,name=use_item_id,json=useItemId,proto3" json:"use_item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqModifyNickname) Reset()         { *m = ReqModifyNickname{} }
func (m *ReqModifyNickname) String() string { return proto.CompactTextString(m) }
func (*ReqModifyNickname) ProtoMessage()    {}
func (*ReqModifyNickname) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{151}
}
func (m *ReqModifyNickname) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqModifyNickname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqModifyNickname.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqModifyNickname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqModifyNickname.Merge(m, src)
}
func (m *ReqModifyNickname) XXX_Size() int {
	return m.Size()
}
func (m *ReqModifyNickname) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqModifyNickname.DiscardUnknown(m)
}

var xxx_messageInfo_ReqModifyNickname proto.InternalMessageInfo

func (m *ReqModifyNickname) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ReqModifyNickname) GetUseItemId() uint32 {
	if m != nil {
		return m.UseItemId
	}
	return 0
}

type ReqModifyBirthday struct {
	Birthday             int32    `protobuf:"varint,1,opt,name=birthday,proto3" json:"birthday,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqModifyBirthday) Reset()         { *m = ReqModifyBirthday{} }
func (m *ReqModifyBirthday) String() string { return proto.CompactTextString(m) }
func (*ReqModifyBirthday) ProtoMessage()    {}
func (*ReqModifyBirthday) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{152}
}
func (m *ReqModifyBirthday) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqModifyBirthday) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqModifyBirthday.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqModifyBirthday) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqModifyBirthday.Merge(m, src)
}
func (m *ReqModifyBirthday) XXX_Size() int {
	return m.Size()
}
func (m *ReqModifyBirthday) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqModifyBirthday.DiscardUnknown(m)
}

var xxx_messageInfo_ReqModifyBirthday proto.InternalMessageInfo

func (m *ReqModifyBirthday) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

type ResSelfRoom struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Room                 *Room    `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResSelfRoom) Reset()         { *m = ResSelfRoom{} }
func (m *ResSelfRoom) String() string { return proto.CompactTextString(m) }
func (*ResSelfRoom) ProtoMessage()    {}
func (*ResSelfRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{153}
}
func (m *ResSelfRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResSelfRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResSelfRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResSelfRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSelfRoom.Merge(m, src)
}
func (m *ResSelfRoom) XXX_Size() int {
	return m.Size()
}
func (m *ResSelfRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSelfRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ResSelfRoom proto.InternalMessageInfo

func (m *ResSelfRoom) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResSelfRoom) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type ReqCreateRoom struct {
	PlayerCount          uint32    `protobuf:"varint,1,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	Mode                 *GameMode `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	PublicLive           bool      `protobuf:"varint,3,opt,name=public_live,json=publicLive,proto3" json:"public_live,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqCreateRoom) Reset()         { *m = ReqCreateRoom{} }
func (m *ReqCreateRoom) String() string { return proto.CompactTextString(m) }
func (*ReqCreateRoom) ProtoMessage()    {}
func (*ReqCreateRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{154}
}
func (m *ReqCreateRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateRoom.Merge(m, src)
}
func (m *ReqCreateRoom) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateRoom proto.InternalMessageInfo

func (m *ReqCreateRoom) GetPlayerCount() uint32 {
	if m != nil {
		return m.PlayerCount
	}
	return 0
}

func (m *ReqCreateRoom) GetMode() *GameMode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *ReqCreateRoom) GetPublicLive() bool {
	if m != nil {
		return m.PublicLive
	}
	return false
}

type ResCreateRoom struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Room                 *Room    `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateRoom) Reset()         { *m = ResCreateRoom{} }
func (m *ResCreateRoom) String() string { return proto.CompactTextString(m) }
func (*ResCreateRoom) ProtoMessage()    {}
func (*ResCreateRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{155}
}
func (m *ResCreateRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateRoom.Merge(m, src)
}
func (m *ResCreateRoom) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateRoom proto.InternalMessageInfo

func (m *ResCreateRoom) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateRoom) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type ReqJoinRoom struct {
	RoomId               uint32   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqJoinRoom) Reset()         { *m = ReqJoinRoom{} }
func (m *ReqJoinRoom) String() string { return proto.CompactTextString(m) }
func (*ReqJoinRoom) ProtoMessage()    {}
func (*ReqJoinRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{156}
}
func (m *ReqJoinRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqJoinRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqJoinRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqJoinRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqJoinRoom.Merge(m, src)
}
func (m *ReqJoinRoom) XXX_Size() int {
	return m.Size()
}
func (m *ReqJoinRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqJoinRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ReqJoinRoom proto.InternalMessageInfo

func (m *ReqJoinRoom) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type ResJoinRoom struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Room                 *Room    `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResJoinRoom) Reset()         { *m = ResJoinRoom{} }
func (m *ResJoinRoom) String() string { return proto.CompactTextString(m) }
func (*ResJoinRoom) ProtoMessage()    {}
func (*ResJoinRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{157}
}
func (m *ResJoinRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResJoinRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResJoinRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResJoinRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResJoinRoom.Merge(m, src)
}
func (m *ResJoinRoom) XXX_Size() int {
	return m.Size()
}
func (m *ResJoinRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ResJoinRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ResJoinRoom proto.InternalMessageInfo

func (m *ResJoinRoom) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResJoinRoom) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type ReqRoomReady struct {
	Ready                bool     `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRoomReady) Reset()         { *m = ReqRoomReady{} }
func (m *ReqRoomReady) String() string { return proto.CompactTextString(m) }
func (*ReqRoomReady) ProtoMessage()    {}
func (*ReqRoomReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{158}
}
func (m *ReqRoomReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRoomReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRoomReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRoomReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRoomReady.Merge(m, src)
}
func (m *ReqRoomReady) XXX_Size() int {
	return m.Size()
}
func (m *ReqRoomReady) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRoomReady.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRoomReady proto.InternalMessageInfo

func (m *ReqRoomReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type ReqRoomStart struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRoomStart) Reset()         { *m = ReqRoomStart{} }
func (m *ReqRoomStart) String() string { return proto.CompactTextString(m) }
func (*ReqRoomStart) ProtoMessage()    {}
func (*ReqRoomStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{159}
}
func (m *ReqRoomStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRoomStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRoomStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRoomStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRoomStart.Merge(m, src)
}
func (m *ReqRoomStart) XXX_Size() int {
	return m.Size()
}
func (m *ReqRoomStart) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRoomStart.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRoomStart proto.InternalMessageInfo

type ReqRoomKick struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRoomKick) Reset()         { *m = ReqRoomKick{} }
func (m *ReqRoomKick) String() string { return proto.CompactTextString(m) }
func (*ReqRoomKick) ProtoMessage()    {}
func (*ReqRoomKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{160}
}
func (m *ReqRoomKick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRoomKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRoomKick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRoomKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRoomKick.Merge(m, src)
}
func (m *ReqRoomKick) XXX_Size() int {
	return m.Size()
}
func (m *ReqRoomKick) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRoomKick.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRoomKick proto.InternalMessageInfo

func (m *ReqRoomKick) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ReqModifyRoom struct {
	RobotCount           uint32   `protobuf:"varint,1,opt,name=robot_count,json=robotCount,proto3" json:"robot_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqModifyRoom) Reset()         { *m = ReqModifyRoom{} }
func (m *ReqModifyRoom) String() string { return proto.CompactTextString(m) }
func (*ReqModifyRoom) ProtoMessage()    {}
func (*ReqModifyRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{161}
}
func (m *ReqModifyRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqModifyRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqModifyRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqModifyRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqModifyRoom.Merge(m, src)
}
func (m *ReqModifyRoom) XXX_Size() int {
	return m.Size()
}
func (m *ReqModifyRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqModifyRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ReqModifyRoom proto.InternalMessageInfo

func (m *ReqModifyRoom) GetRobotCount() uint32 {
	if m != nil {
		return m.RobotCount
	}
	return 0
}

type ReqChangeAvatar struct {
	AvatarId             uint32   `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeAvatar) Reset()         { *m = ReqChangeAvatar{} }
func (m *ReqChangeAvatar) String() string { return proto.CompactTextString(m) }
func (*ReqChangeAvatar) ProtoMessage()    {}
func (*ReqChangeAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{162}
}
func (m *ReqChangeAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeAvatar.Merge(m, src)
}
func (m *ReqChangeAvatar) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeAvatar proto.InternalMessageInfo

func (m *ReqChangeAvatar) GetAvatarId() uint32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

type ReqAccountStatisticInfo struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqAccountStatisticInfo) Reset()         { *m = ReqAccountStatisticInfo{} }
func (m *ReqAccountStatisticInfo) String() string { return proto.CompactTextString(m) }
func (*ReqAccountStatisticInfo) ProtoMessage()    {}
func (*ReqAccountStatisticInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{163}
}
func (m *ReqAccountStatisticInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqAccountStatisticInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqAccountStatisticInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqAccountStatisticInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqAccountStatisticInfo.Merge(m, src)
}
func (m *ReqAccountStatisticInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqAccountStatisticInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqAccountStatisticInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqAccountStatisticInfo proto.InternalMessageInfo

func (m *ReqAccountStatisticInfo) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ResAccountStatisticInfo struct {
	Error                *Error                    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StatisticData        []*AccountStatisticData   `protobuf:"bytes,2,rep,name=statistic_data,json=statisticData,proto3" json:"statistic_data,omitempty"`
	DetailData           *AccountDetailStatisticV2 `protobuf:"bytes,3,opt,name=detail_data,json=detailData,proto3" json:"detail_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ResAccountStatisticInfo) Reset()         { *m = ResAccountStatisticInfo{} }
func (m *ResAccountStatisticInfo) String() string { return proto.CompactTextString(m) }
func (*ResAccountStatisticInfo) ProtoMessage()    {}
func (*ResAccountStatisticInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{164}
}
func (m *ResAccountStatisticInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountStatisticInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountStatisticInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountStatisticInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountStatisticInfo.Merge(m, src)
}
func (m *ResAccountStatisticInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountStatisticInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountStatisticInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountStatisticInfo proto.InternalMessageInfo

func (m *ResAccountStatisticInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAccountStatisticInfo) GetStatisticData() []*AccountStatisticData {
	if m != nil {
		return m.StatisticData
	}
	return nil
}

func (m *ResAccountStatisticInfo) GetDetailData() *AccountDetailStatisticV2 {
	if m != nil {
		return m.DetailData
	}
	return nil
}

type ResAccountCharacterInfo struct {
	UnlockList           []uint32 `protobuf:"varint,1,rep,packed,name=unlock_list,json=unlockList,proto3" json:"unlock_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResAccountCharacterInfo) Reset()         { *m = ResAccountCharacterInfo{} }
func (m *ResAccountCharacterInfo) String() string { return proto.CompactTextString(m) }
func (*ResAccountCharacterInfo) ProtoMessage()    {}
func (*ResAccountCharacterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{165}
}
func (m *ResAccountCharacterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountCharacterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountCharacterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountCharacterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountCharacterInfo.Merge(m, src)
}
func (m *ResAccountCharacterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountCharacterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountCharacterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountCharacterInfo proto.InternalMessageInfo

func (m *ResAccountCharacterInfo) GetUnlockList() []uint32 {
	if m != nil {
		return m.UnlockList
	}
	return nil
}

type ReqShopPurchase struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqShopPurchase) Reset()         { *m = ReqShopPurchase{} }
func (m *ReqShopPurchase) String() string { return proto.CompactTextString(m) }
func (*ReqShopPurchase) ProtoMessage()    {}
func (*ReqShopPurchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{166}
}
func (m *ReqShopPurchase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqShopPurchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqShopPurchase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqShopPurchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqShopPurchase.Merge(m, src)
}
func (m *ReqShopPurchase) XXX_Size() int {
	return m.Size()
}
func (m *ReqShopPurchase) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqShopPurchase.DiscardUnknown(m)
}

var xxx_messageInfo_ReqShopPurchase proto.InternalMessageInfo

func (m *ReqShopPurchase) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ReqShopPurchase) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ResShopPurchase struct {
	Error                *Error         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Update               *AccountUpdate `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResShopPurchase) Reset()         { *m = ResShopPurchase{} }
func (m *ResShopPurchase) String() string { return proto.CompactTextString(m) }
func (*ResShopPurchase) ProtoMessage()    {}
func (*ResShopPurchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{167}
}
func (m *ResShopPurchase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResShopPurchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResShopPurchase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResShopPurchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResShopPurchase.Merge(m, src)
}
func (m *ResShopPurchase) XXX_Size() int {
	return m.Size()
}
func (m *ResShopPurchase) XXX_DiscardUnknown() {
	xxx_messageInfo_ResShopPurchase.DiscardUnknown(m)
}

var xxx_messageInfo_ResShopPurchase proto.InternalMessageInfo

func (m *ResShopPurchase) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResShopPurchase) GetUpdate() *AccountUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type ReqGameRecord struct {
	GameUuid             string   `protobuf:"bytes,1,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGameRecord) Reset()         { *m = ReqGameRecord{} }
func (m *ReqGameRecord) String() string { return proto.CompactTextString(m) }
func (*ReqGameRecord) ProtoMessage()    {}
func (*ReqGameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{168}
}
func (m *ReqGameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGameRecord.Merge(m, src)
}
func (m *ReqGameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ReqGameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGameRecord proto.InternalMessageInfo

func (m *ReqGameRecord) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

type ResGameRecord struct {
	Error                *Error      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Head                 *RecordGame `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Data                 []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataUrl              string      `protobuf:"bytes,5,opt,name=data_url,json=dataUrl,proto3" json:"data_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResGameRecord) Reset()         { *m = ResGameRecord{} }
func (m *ResGameRecord) String() string { return proto.CompactTextString(m) }
func (*ResGameRecord) ProtoMessage()    {}
func (*ResGameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{169}
}
func (m *ResGameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGameRecord.Merge(m, src)
}
func (m *ResGameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ResGameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ResGameRecord proto.InternalMessageInfo

func (m *ResGameRecord) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGameRecord) GetHead() *RecordGame {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *ResGameRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ResGameRecord) GetDataUrl() string {
	if m != nil {
		return m.DataUrl
	}
	return ""
}

type ReqGameRecordList struct {
	Start                uint32   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Type                 uint32   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGameRecordList) Reset()         { *m = ReqGameRecordList{} }
func (m *ReqGameRecordList) String() string { return proto.CompactTextString(m) }
func (*ReqGameRecordList) ProtoMessage()    {}
func (*ReqGameRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{170}
}
func (m *ReqGameRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGameRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGameRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGameRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGameRecordList.Merge(m, src)
}
func (m *ReqGameRecordList) XXX_Size() int {
	return m.Size()
}
func (m *ReqGameRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGameRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGameRecordList proto.InternalMessageInfo

func (m *ReqGameRecordList) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqGameRecordList) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqGameRecordList) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResGameRecordList struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	TotalCount           uint32        `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	RecordList           []*RecordGame `protobuf:"bytes,3,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResGameRecordList) Reset()         { *m = ResGameRecordList{} }
func (m *ResGameRecordList) String() string { return proto.CompactTextString(m) }
func (*ResGameRecordList) ProtoMessage()    {}
func (*ResGameRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{171}
}
func (m *ResGameRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGameRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGameRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGameRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGameRecordList.Merge(m, src)
}
func (m *ResGameRecordList) XXX_Size() int {
	return m.Size()
}
func (m *ResGameRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGameRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_ResGameRecordList proto.InternalMessageInfo

func (m *ResGameRecordList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGameRecordList) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ResGameRecordList) GetRecordList() []*RecordGame {
	if m != nil {
		return m.RecordList
	}
	return nil
}

type ResCollectedGameRecordList struct {
	Error                *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RecordList           []*RecordCollectedData `protobuf:"bytes,2,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty"`
	RecordCollectLimit   uint32                 `protobuf:"varint,3,opt,name=record_collect_limit,json=recordCollectLimit,proto3" json:"record_collect_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ResCollectedGameRecordList) Reset()         { *m = ResCollectedGameRecordList{} }
func (m *ResCollectedGameRecordList) String() string { return proto.CompactTextString(m) }
func (*ResCollectedGameRecordList) ProtoMessage()    {}
func (*ResCollectedGameRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{172}
}
func (m *ResCollectedGameRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCollectedGameRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCollectedGameRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCollectedGameRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCollectedGameRecordList.Merge(m, src)
}
func (m *ResCollectedGameRecordList) XXX_Size() int {
	return m.Size()
}
func (m *ResCollectedGameRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCollectedGameRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_ResCollectedGameRecordList proto.InternalMessageInfo

func (m *ResCollectedGameRecordList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCollectedGameRecordList) GetRecordList() []*RecordCollectedData {
	if m != nil {
		return m.RecordList
	}
	return nil
}

func (m *ResCollectedGameRecordList) GetRecordCollectLimit() uint32 {
	if m != nil {
		return m.RecordCollectLimit
	}
	return 0
}

type ReqGameRecordsDetail struct {
	UuidList             []string `protobuf:"bytes,1,rep,name=uuid_list,json=uuidList,proto3" json:"uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGameRecordsDetail) Reset()         { *m = ReqGameRecordsDetail{} }
func (m *ReqGameRecordsDetail) String() string { return proto.CompactTextString(m) }
func (*ReqGameRecordsDetail) ProtoMessage()    {}
func (*ReqGameRecordsDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{173}
}
func (m *ReqGameRecordsDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGameRecordsDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGameRecordsDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGameRecordsDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGameRecordsDetail.Merge(m, src)
}
func (m *ReqGameRecordsDetail) XXX_Size() int {
	return m.Size()
}
func (m *ReqGameRecordsDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGameRecordsDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGameRecordsDetail proto.InternalMessageInfo

func (m *ReqGameRecordsDetail) GetUuidList() []string {
	if m != nil {
		return m.UuidList
	}
	return nil
}

type ResGameRecordsDetail struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RecordList           []*RecordGame `protobuf:"bytes,2,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResGameRecordsDetail) Reset()         { *m = ResGameRecordsDetail{} }
func (m *ResGameRecordsDetail) String() string { return proto.CompactTextString(m) }
func (*ResGameRecordsDetail) ProtoMessage()    {}
func (*ResGameRecordsDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{174}
}
func (m *ResGameRecordsDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGameRecordsDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGameRecordsDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGameRecordsDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGameRecordsDetail.Merge(m, src)
}
func (m *ResGameRecordsDetail) XXX_Size() int {
	return m.Size()
}
func (m *ResGameRecordsDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGameRecordsDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ResGameRecordsDetail proto.InternalMessageInfo

func (m *ResGameRecordsDetail) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGameRecordsDetail) GetRecordList() []*RecordGame {
	if m != nil {
		return m.RecordList
	}
	return nil
}

type ReqAddCollectedGameRecord struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Remarks              string   `protobuf:"bytes,2,opt,name=remarks,proto3" json:"remarks,omitempty"`
	StartTime            uint32   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              uint32   `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqAddCollectedGameRecord) Reset()         { *m = ReqAddCollectedGameRecord{} }
func (m *ReqAddCollectedGameRecord) String() string { return proto.CompactTextString(m) }
func (*ReqAddCollectedGameRecord) ProtoMessage()    {}
func (*ReqAddCollectedGameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{175}
}
func (m *ReqAddCollectedGameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqAddCollectedGameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqAddCollectedGameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqAddCollectedGameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqAddCollectedGameRecord.Merge(m, src)
}
func (m *ReqAddCollectedGameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ReqAddCollectedGameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqAddCollectedGameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReqAddCollectedGameRecord proto.InternalMessageInfo

func (m *ReqAddCollectedGameRecord) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ReqAddCollectedGameRecord) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func (m *ReqAddCollectedGameRecord) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ReqAddCollectedGameRecord) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type ResAddCollectedGameRecord struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResAddCollectedGameRecord) Reset()         { *m = ResAddCollectedGameRecord{} }
func (m *ResAddCollectedGameRecord) String() string { return proto.CompactTextString(m) }
func (*ResAddCollectedGameRecord) ProtoMessage()    {}
func (*ResAddCollectedGameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{176}
}
func (m *ResAddCollectedGameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAddCollectedGameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAddCollectedGameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAddCollectedGameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAddCollectedGameRecord.Merge(m, src)
}
func (m *ResAddCollectedGameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ResAddCollectedGameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAddCollectedGameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ResAddCollectedGameRecord proto.InternalMessageInfo

func (m *ResAddCollectedGameRecord) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReqRemoveCollectedGameRecord struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRemoveCollectedGameRecord) Reset()         { *m = ReqRemoveCollectedGameRecord{} }
func (m *ReqRemoveCollectedGameRecord) String() string { return proto.CompactTextString(m) }
func (*ReqRemoveCollectedGameRecord) ProtoMessage()    {}
func (*ReqRemoveCollectedGameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{177}
}
func (m *ReqRemoveCollectedGameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRemoveCollectedGameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRemoveCollectedGameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRemoveCollectedGameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRemoveCollectedGameRecord.Merge(m, src)
}
func (m *ReqRemoveCollectedGameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ReqRemoveCollectedGameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRemoveCollectedGameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRemoveCollectedGameRecord proto.InternalMessageInfo

func (m *ReqRemoveCollectedGameRecord) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type ResRemoveCollectedGameRecord struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResRemoveCollectedGameRecord) Reset()         { *m = ResRemoveCollectedGameRecord{} }
func (m *ResRemoveCollectedGameRecord) String() string { return proto.CompactTextString(m) }
func (*ResRemoveCollectedGameRecord) ProtoMessage()    {}
func (*ResRemoveCollectedGameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{178}
}
func (m *ResRemoveCollectedGameRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResRemoveCollectedGameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResRemoveCollectedGameRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResRemoveCollectedGameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResRemoveCollectedGameRecord.Merge(m, src)
}
func (m *ResRemoveCollectedGameRecord) XXX_Size() int {
	return m.Size()
}
func (m *ResRemoveCollectedGameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ResRemoveCollectedGameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ResRemoveCollectedGameRecord proto.InternalMessageInfo

func (m *ResRemoveCollectedGameRecord) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReqChangeCollectedGameRecordRemarks struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Remarks              string   `protobuf:"bytes,2,opt,name=remarks,proto3" json:"remarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeCollectedGameRecordRemarks) Reset()         { *m = ReqChangeCollectedGameRecordRemarks{} }
func (m *ReqChangeCollectedGameRecordRemarks) String() string { return proto.CompactTextString(m) }
func (*ReqChangeCollectedGameRecordRemarks) ProtoMessage()    {}
func (*ReqChangeCollectedGameRecordRemarks) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{179}
}
func (m *ReqChangeCollectedGameRecordRemarks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeCollectedGameRecordRemarks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeCollectedGameRecordRemarks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeCollectedGameRecordRemarks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeCollectedGameRecordRemarks.Merge(m, src)
}
func (m *ReqChangeCollectedGameRecordRemarks) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeCollectedGameRecordRemarks) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeCollectedGameRecordRemarks.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeCollectedGameRecordRemarks proto.InternalMessageInfo

func (m *ReqChangeCollectedGameRecordRemarks) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ReqChangeCollectedGameRecordRemarks) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

type ResChangeCollectedGameRecordRemarks struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResChangeCollectedGameRecordRemarks) Reset()         { *m = ResChangeCollectedGameRecordRemarks{} }
func (m *ResChangeCollectedGameRecordRemarks) String() string { return proto.CompactTextString(m) }
func (*ResChangeCollectedGameRecordRemarks) ProtoMessage()    {}
func (*ResChangeCollectedGameRecordRemarks) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{180}
}
func (m *ResChangeCollectedGameRecordRemarks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResChangeCollectedGameRecordRemarks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResChangeCollectedGameRecordRemarks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResChangeCollectedGameRecordRemarks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResChangeCollectedGameRecordRemarks.Merge(m, src)
}
func (m *ResChangeCollectedGameRecordRemarks) XXX_Size() int {
	return m.Size()
}
func (m *ResChangeCollectedGameRecordRemarks) XXX_DiscardUnknown() {
	xxx_messageInfo_ResChangeCollectedGameRecordRemarks.DiscardUnknown(m)
}

var xxx_messageInfo_ResChangeCollectedGameRecordRemarks proto.InternalMessageInfo

func (m *ResChangeCollectedGameRecordRemarks) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReqLevelLeaderboard struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqLevelLeaderboard) Reset()         { *m = ReqLevelLeaderboard{} }
func (m *ReqLevelLeaderboard) String() string { return proto.CompactTextString(m) }
func (*ReqLevelLeaderboard) ProtoMessage()    {}
func (*ReqLevelLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{181}
}
func (m *ReqLevelLeaderboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLevelLeaderboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLevelLeaderboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLevelLeaderboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLevelLeaderboard.Merge(m, src)
}
func (m *ReqLevelLeaderboard) XXX_Size() int {
	return m.Size()
}
func (m *ReqLevelLeaderboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLevelLeaderboard.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLevelLeaderboard proto.InternalMessageInfo

func (m *ReqLevelLeaderboard) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResLevelLeaderboard struct {
	Error                *Error                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Items                []*ResLevelLeaderboard_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	SelfRank             uint32                      `protobuf:"varint,3,opt,name=self_rank,json=selfRank,proto3" json:"self_rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ResLevelLeaderboard) Reset()         { *m = ResLevelLeaderboard{} }
func (m *ResLevelLeaderboard) String() string { return proto.CompactTextString(m) }
func (*ResLevelLeaderboard) ProtoMessage()    {}
func (*ResLevelLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{182}
}
func (m *ResLevelLeaderboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResLevelLeaderboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResLevelLeaderboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResLevelLeaderboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResLevelLeaderboard.Merge(m, src)
}
func (m *ResLevelLeaderboard) XXX_Size() int {
	return m.Size()
}
func (m *ResLevelLeaderboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ResLevelLeaderboard.DiscardUnknown(m)
}

var xxx_messageInfo_ResLevelLeaderboard proto.InternalMessageInfo

func (m *ResLevelLeaderboard) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResLevelLeaderboard) GetItems() []*ResLevelLeaderboard_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ResLevelLeaderboard) GetSelfRank() uint32 {
	if m != nil {
		return m.SelfRank
	}
	return 0
}

type ResLevelLeaderboard_Item struct {
	AccountId            uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Level                *AccountLevel `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResLevelLeaderboard_Item) Reset()         { *m = ResLevelLeaderboard_Item{} }
func (m *ResLevelLeaderboard_Item) String() string { return proto.CompactTextString(m) }
func (*ResLevelLeaderboard_Item) ProtoMessage()    {}
func (*ResLevelLeaderboard_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{182, 0}
}
func (m *ResLevelLeaderboard_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResLevelLeaderboard_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResLevelLeaderboard_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResLevelLeaderboard_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResLevelLeaderboard_Item.Merge(m, src)
}
func (m *ResLevelLeaderboard_Item) XXX_Size() int {
	return m.Size()
}
func (m *ResLevelLeaderboard_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_ResLevelLeaderboard_Item.DiscardUnknown(m)
}

var xxx_messageInfo_ResLevelLeaderboard_Item proto.InternalMessageInfo

func (m *ResLevelLeaderboard_Item) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ResLevelLeaderboard_Item) GetLevel() *AccountLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

type ReqMultiAccountId struct {
	AccountIdList        []uint32 `protobuf:"varint,1,rep,packed,name=account_id_list,json=accountIdList,proto3" json:"account_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqMultiAccountId) Reset()         { *m = ReqMultiAccountId{} }
func (m *ReqMultiAccountId) String() string { return proto.CompactTextString(m) }
func (*ReqMultiAccountId) ProtoMessage()    {}
func (*ReqMultiAccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{183}
}
func (m *ReqMultiAccountId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqMultiAccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqMultiAccountId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqMultiAccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMultiAccountId.Merge(m, src)
}
func (m *ReqMultiAccountId) XXX_Size() int {
	return m.Size()
}
func (m *ReqMultiAccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMultiAccountId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMultiAccountId proto.InternalMessageInfo

func (m *ReqMultiAccountId) GetAccountIdList() []uint32 {
	if m != nil {
		return m.AccountIdList
	}
	return nil
}

type ResMultiAccountBrief struct {
	Error                *Error            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Players              []*PlayerBaseView `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResMultiAccountBrief) Reset()         { *m = ResMultiAccountBrief{} }
func (m *ResMultiAccountBrief) String() string { return proto.CompactTextString(m) }
func (*ResMultiAccountBrief) ProtoMessage()    {}
func (*ResMultiAccountBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{184}
}
func (m *ResMultiAccountBrief) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMultiAccountBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMultiAccountBrief.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMultiAccountBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMultiAccountBrief.Merge(m, src)
}
func (m *ResMultiAccountBrief) XXX_Size() int {
	return m.Size()
}
func (m *ResMultiAccountBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMultiAccountBrief.DiscardUnknown(m)
}

var xxx_messageInfo_ResMultiAccountBrief proto.InternalMessageInfo

func (m *ResMultiAccountBrief) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResMultiAccountBrief) GetPlayers() []*PlayerBaseView {
	if m != nil {
		return m.Players
	}
	return nil
}

type ResFriendList struct {
	Error                *Error    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Friends              []*Friend `protobuf:"bytes,2,rep,name=friends,proto3" json:"friends,omitempty"`
	FriendMaxCount       uint32    `protobuf:"varint,3,opt,name=friend_max_count,json=friendMaxCount,proto3" json:"friend_max_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResFriendList) Reset()         { *m = ResFriendList{} }
func (m *ResFriendList) String() string { return proto.CompactTextString(m) }
func (*ResFriendList) ProtoMessage()    {}
func (*ResFriendList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{185}
}
func (m *ResFriendList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFriendList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFriendList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFriendList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFriendList.Merge(m, src)
}
func (m *ResFriendList) XXX_Size() int {
	return m.Size()
}
func (m *ResFriendList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFriendList.DiscardUnknown(m)
}

var xxx_messageInfo_ResFriendList proto.InternalMessageInfo

func (m *ResFriendList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFriendList) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *ResFriendList) GetFriendMaxCount() uint32 {
	if m != nil {
		return m.FriendMaxCount
	}
	return 0
}

type ResFriendApplyList struct {
	Error                *Error                            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Applies              []*ResFriendApplyList_FriendApply `protobuf:"bytes,2,rep,name=applies,proto3" json:"applies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ResFriendApplyList) Reset()         { *m = ResFriendApplyList{} }
func (m *ResFriendApplyList) String() string { return proto.CompactTextString(m) }
func (*ResFriendApplyList) ProtoMessage()    {}
func (*ResFriendApplyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{186}
}
func (m *ResFriendApplyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFriendApplyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFriendApplyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFriendApplyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFriendApplyList.Merge(m, src)
}
func (m *ResFriendApplyList) XXX_Size() int {
	return m.Size()
}
func (m *ResFriendApplyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFriendApplyList.DiscardUnknown(m)
}

var xxx_messageInfo_ResFriendApplyList proto.InternalMessageInfo

func (m *ResFriendApplyList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFriendApplyList) GetApplies() []*ResFriendApplyList_FriendApply {
	if m != nil {
		return m.Applies
	}
	return nil
}

type ResFriendApplyList_FriendApply struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplyTime            uint32   `protobuf:"varint,2,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResFriendApplyList_FriendApply) Reset()         { *m = ResFriendApplyList_FriendApply{} }
func (m *ResFriendApplyList_FriendApply) String() string { return proto.CompactTextString(m) }
func (*ResFriendApplyList_FriendApply) ProtoMessage()    {}
func (*ResFriendApplyList_FriendApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{186, 0}
}
func (m *ResFriendApplyList_FriendApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFriendApplyList_FriendApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFriendApplyList_FriendApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFriendApplyList_FriendApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFriendApplyList_FriendApply.Merge(m, src)
}
func (m *ResFriendApplyList_FriendApply) XXX_Size() int {
	return m.Size()
}
func (m *ResFriendApplyList_FriendApply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFriendApplyList_FriendApply.DiscardUnknown(m)
}

var xxx_messageInfo_ResFriendApplyList_FriendApply proto.InternalMessageInfo

func (m *ResFriendApplyList_FriendApply) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ResFriendApplyList_FriendApply) GetApplyTime() uint32 {
	if m != nil {
		return m.ApplyTime
	}
	return 0
}

type ReqApplyFriend struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqApplyFriend) Reset()         { *m = ReqApplyFriend{} }
func (m *ReqApplyFriend) String() string { return proto.CompactTextString(m) }
func (*ReqApplyFriend) ProtoMessage()    {}
func (*ReqApplyFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{187}
}
func (m *ReqApplyFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqApplyFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqApplyFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqApplyFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqApplyFriend.Merge(m, src)
}
func (m *ReqApplyFriend) XXX_Size() int {
	return m.Size()
}
func (m *ReqApplyFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqApplyFriend.DiscardUnknown(m)
}

var xxx_messageInfo_ReqApplyFriend proto.InternalMessageInfo

func (m *ReqApplyFriend) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type ReqHandleFriendApply struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Method               uint32   `protobuf:"varint,2,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqHandleFriendApply) Reset()         { *m = ReqHandleFriendApply{} }
func (m *ReqHandleFriendApply) String() string { return proto.CompactTextString(m) }
func (*ReqHandleFriendApply) ProtoMessage()    {}
func (*ReqHandleFriendApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{188}
}
func (m *ReqHandleFriendApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqHandleFriendApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqHandleFriendApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqHandleFriendApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqHandleFriendApply.Merge(m, src)
}
func (m *ReqHandleFriendApply) XXX_Size() int {
	return m.Size()
}
func (m *ReqHandleFriendApply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqHandleFriendApply.DiscardUnknown(m)
}

var xxx_messageInfo_ReqHandleFriendApply proto.InternalMessageInfo

func (m *ReqHandleFriendApply) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ReqHandleFriendApply) GetMethod() uint32 {
	if m != nil {
		return m.Method
	}
	return 0
}

type ReqRemoveFriend struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRemoveFriend) Reset()         { *m = ReqRemoveFriend{} }
func (m *ReqRemoveFriend) String() string { return proto.CompactTextString(m) }
func (*ReqRemoveFriend) ProtoMessage()    {}
func (*ReqRemoveFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{189}
}
func (m *ReqRemoveFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRemoveFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRemoveFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRemoveFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRemoveFriend.Merge(m, src)
}
func (m *ReqRemoveFriend) XXX_Size() int {
	return m.Size()
}
func (m *ReqRemoveFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRemoveFriend.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRemoveFriend proto.InternalMessageInfo

func (m *ReqRemoveFriend) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type ReqSearchAccountByPattern struct {
	SearchNext           bool     `protobuf:"varint,1,opt,name=search_next,json=searchNext,proto3" json:"search_next,omitempty"`
	Pattern              string   `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSearchAccountByPattern) Reset()         { *m = ReqSearchAccountByPattern{} }
func (m *ReqSearchAccountByPattern) String() string { return proto.CompactTextString(m) }
func (*ReqSearchAccountByPattern) ProtoMessage()    {}
func (*ReqSearchAccountByPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{190}
}
func (m *ReqSearchAccountByPattern) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSearchAccountByPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSearchAccountByPattern.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSearchAccountByPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSearchAccountByPattern.Merge(m, src)
}
func (m *ReqSearchAccountByPattern) XXX_Size() int {
	return m.Size()
}
func (m *ReqSearchAccountByPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSearchAccountByPattern.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSearchAccountByPattern proto.InternalMessageInfo

func (m *ReqSearchAccountByPattern) GetSearchNext() bool {
	if m != nil {
		return m.SearchNext
	}
	return false
}

func (m *ReqSearchAccountByPattern) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type ResSearchAccountByPattern struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	IsFinished           bool     `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	MatchAccounts        []uint32 `protobuf:"varint,3,rep,packed,name=match_accounts,json=matchAccounts,proto3" json:"match_accounts,omitempty"`
	DecodeId             uint32   `protobuf:"varint,4,opt,name=decode_id,json=decodeId,proto3" json:"decode_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResSearchAccountByPattern) Reset()         { *m = ResSearchAccountByPattern{} }
func (m *ResSearchAccountByPattern) String() string { return proto.CompactTextString(m) }
func (*ResSearchAccountByPattern) ProtoMessage()    {}
func (*ResSearchAccountByPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{191}
}
func (m *ResSearchAccountByPattern) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResSearchAccountByPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResSearchAccountByPattern.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResSearchAccountByPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSearchAccountByPattern.Merge(m, src)
}
func (m *ResSearchAccountByPattern) XXX_Size() int {
	return m.Size()
}
func (m *ResSearchAccountByPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSearchAccountByPattern.DiscardUnknown(m)
}

var xxx_messageInfo_ResSearchAccountByPattern proto.InternalMessageInfo

func (m *ResSearchAccountByPattern) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResSearchAccountByPattern) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *ResSearchAccountByPattern) GetMatchAccounts() []uint32 {
	if m != nil {
		return m.MatchAccounts
	}
	return nil
}

func (m *ResSearchAccountByPattern) GetDecodeId() uint32 {
	if m != nil {
		return m.DecodeId
	}
	return 0
}

type ReqAccountList struct {
	AccountIdList        []uint32 `protobuf:"varint,1,rep,packed,name=account_id_list,json=accountIdList,proto3" json:"account_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqAccountList) Reset()         { *m = ReqAccountList{} }
func (m *ReqAccountList) String() string { return proto.CompactTextString(m) }
func (*ReqAccountList) ProtoMessage()    {}
func (*ReqAccountList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{192}
}
func (m *ReqAccountList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqAccountList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqAccountList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqAccountList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqAccountList.Merge(m, src)
}
func (m *ReqAccountList) XXX_Size() int {
	return m.Size()
}
func (m *ReqAccountList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqAccountList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqAccountList proto.InternalMessageInfo

func (m *ReqAccountList) GetAccountIdList() []uint32 {
	if m != nil {
		return m.AccountIdList
	}
	return nil
}

type ResAccountStates struct {
	Error                *Error                `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	States               []*AccountActiveState `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ResAccountStates) Reset()         { *m = ResAccountStates{} }
func (m *ResAccountStates) String() string { return proto.CompactTextString(m) }
func (*ResAccountStates) ProtoMessage()    {}
func (*ResAccountStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{193}
}
func (m *ResAccountStates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountStates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountStates.Merge(m, src)
}
func (m *ResAccountStates) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountStates) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountStates.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountStates proto.InternalMessageInfo

func (m *ResAccountStates) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAccountStates) GetStates() []*AccountActiveState {
	if m != nil {
		return m.States
	}
	return nil
}

type ReqSearchAccountById struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSearchAccountById) Reset()         { *m = ReqSearchAccountById{} }
func (m *ReqSearchAccountById) String() string { return proto.CompactTextString(m) }
func (*ReqSearchAccountById) ProtoMessage()    {}
func (*ReqSearchAccountById) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{194}
}
func (m *ReqSearchAccountById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSearchAccountById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSearchAccountById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSearchAccountById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSearchAccountById.Merge(m, src)
}
func (m *ReqSearchAccountById) XXX_Size() int {
	return m.Size()
}
func (m *ReqSearchAccountById) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSearchAccountById.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSearchAccountById proto.InternalMessageInfo

func (m *ReqSearchAccountById) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ResSearchAccountById struct {
	Error                *Error          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Player               *PlayerBaseView `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResSearchAccountById) Reset()         { *m = ResSearchAccountById{} }
func (m *ResSearchAccountById) String() string { return proto.CompactTextString(m) }
func (*ResSearchAccountById) ProtoMessage()    {}
func (*ResSearchAccountById) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{195}
}
func (m *ResSearchAccountById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResSearchAccountById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResSearchAccountById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResSearchAccountById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSearchAccountById.Merge(m, src)
}
func (m *ResSearchAccountById) XXX_Size() int {
	return m.Size()
}
func (m *ResSearchAccountById) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSearchAccountById.DiscardUnknown(m)
}

var xxx_messageInfo_ResSearchAccountById proto.InternalMessageInfo

func (m *ResSearchAccountById) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResSearchAccountById) GetPlayer() *PlayerBaseView {
	if m != nil {
		return m.Player
	}
	return nil
}

type ResBagInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Bag                  *Bag     `protobuf:"bytes,2,opt,name=bag,proto3" json:"bag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResBagInfo) Reset()         { *m = ResBagInfo{} }
func (m *ResBagInfo) String() string { return proto.CompactTextString(m) }
func (*ResBagInfo) ProtoMessage()    {}
func (*ResBagInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{196}
}
func (m *ResBagInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResBagInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResBagInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResBagInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResBagInfo.Merge(m, src)
}
func (m *ResBagInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResBagInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResBagInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResBagInfo proto.InternalMessageInfo

func (m *ResBagInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResBagInfo) GetBag() *Bag {
	if m != nil {
		return m.Bag
	}
	return nil
}

type ReqUseBagItem struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUseBagItem) Reset()         { *m = ReqUseBagItem{} }
func (m *ReqUseBagItem) String() string { return proto.CompactTextString(m) }
func (*ReqUseBagItem) ProtoMessage()    {}
func (*ReqUseBagItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{197}
}
func (m *ReqUseBagItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUseBagItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUseBagItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUseBagItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUseBagItem.Merge(m, src)
}
func (m *ReqUseBagItem) XXX_Size() int {
	return m.Size()
}
func (m *ReqUseBagItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUseBagItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUseBagItem proto.InternalMessageInfo

func (m *ReqUseBagItem) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type ReqOpenManualItem struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	SelectId             uint32   `protobuf:"varint,3,opt,name=select_id,json=selectId,proto3" json:"select_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqOpenManualItem) Reset()         { *m = ReqOpenManualItem{} }
func (m *ReqOpenManualItem) String() string { return proto.CompactTextString(m) }
func (*ReqOpenManualItem) ProtoMessage()    {}
func (*ReqOpenManualItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{198}
}
func (m *ReqOpenManualItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOpenManualItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOpenManualItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOpenManualItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOpenManualItem.Merge(m, src)
}
func (m *ReqOpenManualItem) XXX_Size() int {
	return m.Size()
}
func (m *ReqOpenManualItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOpenManualItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOpenManualItem proto.InternalMessageInfo

func (m *ReqOpenManualItem) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ReqOpenManualItem) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqOpenManualItem) GetSelectId() uint32 {
	if m != nil {
		return m.SelectId
	}
	return 0
}

type ReqOpenRandomRewardItem struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqOpenRandomRewardItem) Reset()         { *m = ReqOpenRandomRewardItem{} }
func (m *ReqOpenRandomRewardItem) String() string { return proto.CompactTextString(m) }
func (*ReqOpenRandomRewardItem) ProtoMessage()    {}
func (*ReqOpenRandomRewardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{199}
}
func (m *ReqOpenRandomRewardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOpenRandomRewardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOpenRandomRewardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOpenRandomRewardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOpenRandomRewardItem.Merge(m, src)
}
func (m *ReqOpenRandomRewardItem) XXX_Size() int {
	return m.Size()
}
func (m *ReqOpenRandomRewardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOpenRandomRewardItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOpenRandomRewardItem proto.InternalMessageInfo

func (m *ReqOpenRandomRewardItem) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type ResOpenRandomRewardItem struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Results              []*OpenResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResOpenRandomRewardItem) Reset()         { *m = ResOpenRandomRewardItem{} }
func (m *ResOpenRandomRewardItem) String() string { return proto.CompactTextString(m) }
func (*ResOpenRandomRewardItem) ProtoMessage()    {}
func (*ResOpenRandomRewardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{200}
}
func (m *ResOpenRandomRewardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResOpenRandomRewardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResOpenRandomRewardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResOpenRandomRewardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResOpenRandomRewardItem.Merge(m, src)
}
func (m *ResOpenRandomRewardItem) XXX_Size() int {
	return m.Size()
}
func (m *ResOpenRandomRewardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ResOpenRandomRewardItem.DiscardUnknown(m)
}

var xxx_messageInfo_ResOpenRandomRewardItem proto.InternalMessageInfo

func (m *ResOpenRandomRewardItem) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResOpenRandomRewardItem) GetResults() []*OpenResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type ReqComposeShard struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqComposeShard) Reset()         { *m = ReqComposeShard{} }
func (m *ReqComposeShard) String() string { return proto.CompactTextString(m) }
func (*ReqComposeShard) ProtoMessage()    {}
func (*ReqComposeShard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{201}
}
func (m *ReqComposeShard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqComposeShard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqComposeShard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqComposeShard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqComposeShard.Merge(m, src)
}
func (m *ReqComposeShard) XXX_Size() int {
	return m.Size()
}
func (m *ReqComposeShard) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqComposeShard.DiscardUnknown(m)
}

var xxx_messageInfo_ReqComposeShard proto.InternalMessageInfo

func (m *ReqComposeShard) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type ResAnnouncement struct {
	Error                *Error          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Announcements        []*Announcement `protobuf:"bytes,2,rep,name=announcements,proto3" json:"announcements,omitempty"`
	Sort                 []uint32        `protobuf:"varint,3,rep,packed,name=sort,proto3" json:"sort,omitempty"`
	ReadList             []uint32        `protobuf:"varint,4,rep,packed,name=read_list,json=readList,proto3" json:"read_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResAnnouncement) Reset()         { *m = ResAnnouncement{} }
func (m *ResAnnouncement) String() string { return proto.CompactTextString(m) }
func (*ResAnnouncement) ProtoMessage()    {}
func (*ResAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{202}
}
func (m *ResAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAnnouncement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAnnouncement.Merge(m, src)
}
func (m *ResAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *ResAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_ResAnnouncement proto.InternalMessageInfo

func (m *ResAnnouncement) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAnnouncement) GetAnnouncements() []*Announcement {
	if m != nil {
		return m.Announcements
	}
	return nil
}

func (m *ResAnnouncement) GetSort() []uint32 {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ResAnnouncement) GetReadList() []uint32 {
	if m != nil {
		return m.ReadList
	}
	return nil
}

type ResMailInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Mails                []*Mail  `protobuf:"bytes,2,rep,name=mails,proto3" json:"mails,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResMailInfo) Reset()         { *m = ResMailInfo{} }
func (m *ResMailInfo) String() string { return proto.CompactTextString(m) }
func (*ResMailInfo) ProtoMessage()    {}
func (*ResMailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{203}
}
func (m *ResMailInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMailInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMailInfo.Merge(m, src)
}
func (m *ResMailInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResMailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResMailInfo proto.InternalMessageInfo

func (m *ResMailInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResMailInfo) GetMails() []*Mail {
	if m != nil {
		return m.Mails
	}
	return nil
}

type ReqReadMail struct {
	MailId               uint32   `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqReadMail) Reset()         { *m = ReqReadMail{} }
func (m *ReqReadMail) String() string { return proto.CompactTextString(m) }
func (*ReqReadMail) ProtoMessage()    {}
func (*ReqReadMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{204}
}
func (m *ReqReadMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqReadMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqReadMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqReadMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqReadMail.Merge(m, src)
}
func (m *ReqReadMail) XXX_Size() int {
	return m.Size()
}
func (m *ReqReadMail) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqReadMail.DiscardUnknown(m)
}

var xxx_messageInfo_ReqReadMail proto.InternalMessageInfo

func (m *ReqReadMail) GetMailId() uint32 {
	if m != nil {
		return m.MailId
	}
	return 0
}

type ReqDeleteMail struct {
	MailId               uint32   `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqDeleteMail) Reset()         { *m = ReqDeleteMail{} }
func (m *ReqDeleteMail) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteMail) ProtoMessage()    {}
func (*ReqDeleteMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{205}
}
func (m *ReqDeleteMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDeleteMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDeleteMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDeleteMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDeleteMail.Merge(m, src)
}
func (m *ReqDeleteMail) XXX_Size() int {
	return m.Size()
}
func (m *ReqDeleteMail) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDeleteMail.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDeleteMail proto.InternalMessageInfo

func (m *ReqDeleteMail) GetMailId() uint32 {
	if m != nil {
		return m.MailId
	}
	return 0
}

type ReqTakeAttachment struct {
	MailId               uint32   `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqTakeAttachment) Reset()         { *m = ReqTakeAttachment{} }
func (m *ReqTakeAttachment) String() string { return proto.CompactTextString(m) }
func (*ReqTakeAttachment) ProtoMessage()    {}
func (*ReqTakeAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{206}
}
func (m *ReqTakeAttachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqTakeAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqTakeAttachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqTakeAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqTakeAttachment.Merge(m, src)
}
func (m *ReqTakeAttachment) XXX_Size() int {
	return m.Size()
}
func (m *ReqTakeAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqTakeAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_ReqTakeAttachment proto.InternalMessageInfo

func (m *ReqTakeAttachment) GetMailId() uint32 {
	if m != nil {
		return m.MailId
	}
	return 0
}

type ResAchievement struct {
	Error                *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Progresses           []*AchievementProgress `protobuf:"bytes,2,rep,name=progresses,proto3" json:"progresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ResAchievement) Reset()         { *m = ResAchievement{} }
func (m *ResAchievement) String() string { return proto.CompactTextString(m) }
func (*ResAchievement) ProtoMessage()    {}
func (*ResAchievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{207}
}
func (m *ResAchievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAchievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAchievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAchievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAchievement.Merge(m, src)
}
func (m *ResAchievement) XXX_Size() int {
	return m.Size()
}
func (m *ResAchievement) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAchievement.DiscardUnknown(m)
}

var xxx_messageInfo_ResAchievement proto.InternalMessageInfo

func (m *ResAchievement) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAchievement) GetProgresses() []*AchievementProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type ResTitleList struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	TitleList            []uint32 `protobuf:"varint,2,rep,packed,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResTitleList) Reset()         { *m = ResTitleList{} }
func (m *ResTitleList) String() string { return proto.CompactTextString(m) }
func (*ResTitleList) ProtoMessage()    {}
func (*ResTitleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{208}
}
func (m *ResTitleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResTitleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResTitleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResTitleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResTitleList.Merge(m, src)
}
func (m *ResTitleList) XXX_Size() int {
	return m.Size()
}
func (m *ResTitleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResTitleList.DiscardUnknown(m)
}

var xxx_messageInfo_ResTitleList proto.InternalMessageInfo

func (m *ResTitleList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResTitleList) GetTitleList() []uint32 {
	if m != nil {
		return m.TitleList
	}
	return nil
}

type ReqUseTitle struct {
	Title                uint32   `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUseTitle) Reset()         { *m = ReqUseTitle{} }
func (m *ReqUseTitle) String() string { return proto.CompactTextString(m) }
func (*ReqUseTitle) ProtoMessage()    {}
func (*ReqUseTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{209}
}
func (m *ReqUseTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUseTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUseTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUseTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUseTitle.Merge(m, src)
}
func (m *ReqUseTitle) XXX_Size() int {
	return m.Size()
}
func (m *ReqUseTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUseTitle.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUseTitle proto.InternalMessageInfo

func (m *ReqUseTitle) GetTitle() uint32 {
	if m != nil {
		return m.Title
	}
	return 0
}

type ReqBuyShiLian struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBuyShiLian) Reset()         { *m = ReqBuyShiLian{} }
func (m *ReqBuyShiLian) String() string { return proto.CompactTextString(m) }
func (*ReqBuyShiLian) ProtoMessage()    {}
func (*ReqBuyShiLian) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{210}
}
func (m *ReqBuyShiLian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBuyShiLian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBuyShiLian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBuyShiLian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBuyShiLian.Merge(m, src)
}
func (m *ReqBuyShiLian) XXX_Size() int {
	return m.Size()
}
func (m *ReqBuyShiLian) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBuyShiLian.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBuyShiLian proto.InternalMessageInfo

func (m *ReqBuyShiLian) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ReqUpdateClientValue struct {
	Key                  uint32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpdateClientValue) Reset()         { *m = ReqUpdateClientValue{} }
func (m *ReqUpdateClientValue) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateClientValue) ProtoMessage()    {}
func (*ReqUpdateClientValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{211}
}
func (m *ReqUpdateClientValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdateClientValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdateClientValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdateClientValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateClientValue.Merge(m, src)
}
func (m *ReqUpdateClientValue) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdateClientValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateClientValue.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateClientValue proto.InternalMessageInfo

func (m *ReqUpdateClientValue) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *ReqUpdateClientValue) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ResClientValue struct {
	Datas                []*ResClientValue_Value `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	RechargedCount       uint32                  `protobuf:"varint,2,opt,name=recharged_count,json=rechargedCount,proto3" json:"recharged_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ResClientValue) Reset()         { *m = ResClientValue{} }
func (m *ResClientValue) String() string { return proto.CompactTextString(m) }
func (*ResClientValue) ProtoMessage()    {}
func (*ResClientValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{212}
}
func (m *ResClientValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResClientValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResClientValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResClientValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResClientValue.Merge(m, src)
}
func (m *ResClientValue) XXX_Size() int {
	return m.Size()
}
func (m *ResClientValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ResClientValue.DiscardUnknown(m)
}

var xxx_messageInfo_ResClientValue proto.InternalMessageInfo

func (m *ResClientValue) GetDatas() []*ResClientValue_Value {
	if m != nil {
		return m.Datas
	}
	return nil
}

func (m *ResClientValue) GetRechargedCount() uint32 {
	if m != nil {
		return m.RechargedCount
	}
	return 0
}

type ResClientValue_Value struct {
	Key                  uint32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResClientValue_Value) Reset()         { *m = ResClientValue_Value{} }
func (m *ResClientValue_Value) String() string { return proto.CompactTextString(m) }
func (*ResClientValue_Value) ProtoMessage()    {}
func (*ResClientValue_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{212, 0}
}
func (m *ResClientValue_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResClientValue_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResClientValue_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResClientValue_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResClientValue_Value.Merge(m, src)
}
func (m *ResClientValue_Value) XXX_Size() int {
	return m.Size()
}
func (m *ResClientValue_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_ResClientValue_Value.DiscardUnknown(m)
}

var xxx_messageInfo_ResClientValue_Value proto.InternalMessageInfo

func (m *ResClientValue_Value) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *ResClientValue_Value) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ReqClientMessage struct {
	Timestamp            uint32   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqClientMessage) Reset()         { *m = ReqClientMessage{} }
func (m *ReqClientMessage) String() string { return proto.CompactTextString(m) }
func (*ReqClientMessage) ProtoMessage()    {}
func (*ReqClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{213}
}
func (m *ReqClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqClientMessage.Merge(m, src)
}
func (m *ReqClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqClientMessage proto.InternalMessageInfo

func (m *ReqClientMessage) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ReqClientMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReqCurrentMatchInfo struct {
	ModeList             []uint32 `protobuf:"varint,1,rep,packed,name=mode_list,json=modeList,proto3" json:"mode_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCurrentMatchInfo) Reset()         { *m = ReqCurrentMatchInfo{} }
func (m *ReqCurrentMatchInfo) String() string { return proto.CompactTextString(m) }
func (*ReqCurrentMatchInfo) ProtoMessage()    {}
func (*ReqCurrentMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{214}
}
func (m *ReqCurrentMatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCurrentMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCurrentMatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCurrentMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCurrentMatchInfo.Merge(m, src)
}
func (m *ReqCurrentMatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqCurrentMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCurrentMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCurrentMatchInfo proto.InternalMessageInfo

func (m *ReqCurrentMatchInfo) GetModeList() []uint32 {
	if m != nil {
		return m.ModeList
	}
	return nil
}

type ResCurrentMatchInfo struct {
	Error                *Error                                  `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Matches              []*ResCurrentMatchInfo_CurrentMatchInfo `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ResCurrentMatchInfo) Reset()         { *m = ResCurrentMatchInfo{} }
func (m *ResCurrentMatchInfo) String() string { return proto.CompactTextString(m) }
func (*ResCurrentMatchInfo) ProtoMessage()    {}
func (*ResCurrentMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{215}
}
func (m *ResCurrentMatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCurrentMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCurrentMatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCurrentMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCurrentMatchInfo.Merge(m, src)
}
func (m *ResCurrentMatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResCurrentMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCurrentMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResCurrentMatchInfo proto.InternalMessageInfo

func (m *ResCurrentMatchInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCurrentMatchInfo) GetMatches() []*ResCurrentMatchInfo_CurrentMatchInfo {
	if m != nil {
		return m.Matches
	}
	return nil
}

type ResCurrentMatchInfo_CurrentMatchInfo struct {
	ModeId               uint32   `protobuf:"varint,1,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	PlayingCount         uint32   `protobuf:"varint,2,opt,name=playing_count,json=playingCount,proto3" json:"playing_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCurrentMatchInfo_CurrentMatchInfo) Reset()         { *m = ResCurrentMatchInfo_CurrentMatchInfo{} }
func (m *ResCurrentMatchInfo_CurrentMatchInfo) String() string { return proto.CompactTextString(m) }
func (*ResCurrentMatchInfo_CurrentMatchInfo) ProtoMessage()    {}
func (*ResCurrentMatchInfo_CurrentMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{215, 0}
}
func (m *ResCurrentMatchInfo_CurrentMatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCurrentMatchInfo_CurrentMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCurrentMatchInfo_CurrentMatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCurrentMatchInfo_CurrentMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCurrentMatchInfo_CurrentMatchInfo.Merge(m, src)
}
func (m *ResCurrentMatchInfo_CurrentMatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResCurrentMatchInfo_CurrentMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCurrentMatchInfo_CurrentMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResCurrentMatchInfo_CurrentMatchInfo proto.InternalMessageInfo

func (m *ResCurrentMatchInfo_CurrentMatchInfo) GetModeId() uint32 {
	if m != nil {
		return m.ModeId
	}
	return 0
}

func (m *ResCurrentMatchInfo_CurrentMatchInfo) GetPlayingCount() uint32 {
	if m != nil {
		return m.PlayingCount
	}
	return 0
}

type ReqReadAnnouncement struct {
	AnnouncementId       uint32   `protobuf:"varint,1,opt,name=announcement_id,json=announcementId,proto3" json:"announcement_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqReadAnnouncement) Reset()         { *m = ReqReadAnnouncement{} }
func (m *ReqReadAnnouncement) String() string { return proto.CompactTextString(m) }
func (*ReqReadAnnouncement) ProtoMessage()    {}
func (*ReqReadAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{216}
}
func (m *ReqReadAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqReadAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqReadAnnouncement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqReadAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqReadAnnouncement.Merge(m, src)
}
func (m *ReqReadAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *ReqReadAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqReadAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_ReqReadAnnouncement proto.InternalMessageInfo

func (m *ReqReadAnnouncement) GetAnnouncementId() uint32 {
	if m != nil {
		return m.AnnouncementId
	}
	return 0
}

type ResReviveCoinInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	HasGained            bool     `protobuf:"varint,2,opt,name=has_gained,json=hasGained,proto3" json:"has_gained,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResReviveCoinInfo) Reset()         { *m = ResReviveCoinInfo{} }
func (m *ResReviveCoinInfo) String() string { return proto.CompactTextString(m) }
func (*ResReviveCoinInfo) ProtoMessage()    {}
func (*ResReviveCoinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{217}
}
func (m *ResReviveCoinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResReviveCoinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResReviveCoinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResReviveCoinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResReviveCoinInfo.Merge(m, src)
}
func (m *ResReviveCoinInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResReviveCoinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResReviveCoinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResReviveCoinInfo proto.InternalMessageInfo

func (m *ResReviveCoinInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResReviveCoinInfo) GetHasGained() bool {
	if m != nil {
		return m.HasGained
	}
	return false
}

type ResDailyTask struct {
	Error                *Error          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Progresses           []*TaskProgress `protobuf:"bytes,2,rep,name=progresses,proto3" json:"progresses,omitempty"`
	HasRefreshCount      bool            `protobuf:"varint,3,opt,name=has_refresh_count,json=hasRefreshCount,proto3" json:"has_refresh_count,omitempty"`
	MaxDailyTaskCount    uint32          `protobuf:"varint,4,opt,name=max_daily_task_count,json=maxDailyTaskCount,proto3" json:"max_daily_task_count,omitempty"`
	RefreshCount         uint32          `protobuf:"varint,5,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResDailyTask) Reset()         { *m = ResDailyTask{} }
func (m *ResDailyTask) String() string { return proto.CompactTextString(m) }
func (*ResDailyTask) ProtoMessage()    {}
func (*ResDailyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{218}
}
func (m *ResDailyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResDailyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResDailyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResDailyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResDailyTask.Merge(m, src)
}
func (m *ResDailyTask) XXX_Size() int {
	return m.Size()
}
func (m *ResDailyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ResDailyTask.DiscardUnknown(m)
}

var xxx_messageInfo_ResDailyTask proto.InternalMessageInfo

func (m *ResDailyTask) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResDailyTask) GetProgresses() []*TaskProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

func (m *ResDailyTask) GetHasRefreshCount() bool {
	if m != nil {
		return m.HasRefreshCount
	}
	return false
}

func (m *ResDailyTask) GetMaxDailyTaskCount() uint32 {
	if m != nil {
		return m.MaxDailyTaskCount
	}
	return 0
}

func (m *ResDailyTask) GetRefreshCount() uint32 {
	if m != nil {
		return m.RefreshCount
	}
	return 0
}

type ReqRefreshDailyTask struct {
	TaskId               uint32   `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRefreshDailyTask) Reset()         { *m = ReqRefreshDailyTask{} }
func (m *ReqRefreshDailyTask) String() string { return proto.CompactTextString(m) }
func (*ReqRefreshDailyTask) ProtoMessage()    {}
func (*ReqRefreshDailyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{219}
}
func (m *ReqRefreshDailyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRefreshDailyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRefreshDailyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRefreshDailyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRefreshDailyTask.Merge(m, src)
}
func (m *ReqRefreshDailyTask) XXX_Size() int {
	return m.Size()
}
func (m *ReqRefreshDailyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRefreshDailyTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRefreshDailyTask proto.InternalMessageInfo

func (m *ReqRefreshDailyTask) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type ResRefreshDailyTask struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Progress             *TaskProgress `protobuf:"bytes,2,opt,name=progress,proto3" json:"progress,omitempty"`
	RefreshCount         uint32        `protobuf:"varint,3,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResRefreshDailyTask) Reset()         { *m = ResRefreshDailyTask{} }
func (m *ResRefreshDailyTask) String() string { return proto.CompactTextString(m) }
func (*ResRefreshDailyTask) ProtoMessage()    {}
func (*ResRefreshDailyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{220}
}
func (m *ResRefreshDailyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResRefreshDailyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResRefreshDailyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResRefreshDailyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResRefreshDailyTask.Merge(m, src)
}
func (m *ResRefreshDailyTask) XXX_Size() int {
	return m.Size()
}
func (m *ResRefreshDailyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ResRefreshDailyTask.DiscardUnknown(m)
}

var xxx_messageInfo_ResRefreshDailyTask proto.InternalMessageInfo

func (m *ResRefreshDailyTask) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResRefreshDailyTask) GetProgress() *TaskProgress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *ResRefreshDailyTask) GetRefreshCount() uint32 {
	if m != nil {
		return m.RefreshCount
	}
	return 0
}

type ReqUseGiftCode struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUseGiftCode) Reset()         { *m = ReqUseGiftCode{} }
func (m *ReqUseGiftCode) String() string { return proto.CompactTextString(m) }
func (*ReqUseGiftCode) ProtoMessage()    {}
func (*ReqUseGiftCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{221}
}
func (m *ReqUseGiftCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUseGiftCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUseGiftCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUseGiftCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUseGiftCode.Merge(m, src)
}
func (m *ReqUseGiftCode) XXX_Size() int {
	return m.Size()
}
func (m *ReqUseGiftCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUseGiftCode.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUseGiftCode proto.InternalMessageInfo

func (m *ReqUseGiftCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ResUseGiftCode struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Rewards              []*RewardSlot `protobuf:"bytes,6,rep,name=rewards,proto3" json:"rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResUseGiftCode) Reset()         { *m = ResUseGiftCode{} }
func (m *ResUseGiftCode) String() string { return proto.CompactTextString(m) }
func (*ResUseGiftCode) ProtoMessage()    {}
func (*ResUseGiftCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{222}
}
func (m *ResUseGiftCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResUseGiftCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResUseGiftCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResUseGiftCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUseGiftCode.Merge(m, src)
}
func (m *ResUseGiftCode) XXX_Size() int {
	return m.Size()
}
func (m *ResUseGiftCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUseGiftCode.DiscardUnknown(m)
}

var xxx_messageInfo_ResUseGiftCode proto.InternalMessageInfo

func (m *ResUseGiftCode) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResUseGiftCode) GetRewards() []*RewardSlot {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type ReqSendClientMessage struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type                 uint32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSendClientMessage) Reset()         { *m = ReqSendClientMessage{} }
func (m *ReqSendClientMessage) String() string { return proto.CompactTextString(m) }
func (*ReqSendClientMessage) ProtoMessage()    {}
func (*ReqSendClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{223}
}
func (m *ReqSendClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSendClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSendClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSendClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSendClientMessage.Merge(m, src)
}
func (m *ReqSendClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqSendClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSendClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSendClientMessage proto.InternalMessageInfo

func (m *ReqSendClientMessage) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ReqSendClientMessage) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqSendClientMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ReqGameLiveInfo struct {
	GameUuid             string   `protobuf:"bytes,1,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGameLiveInfo) Reset()         { *m = ReqGameLiveInfo{} }
func (m *ReqGameLiveInfo) String() string { return proto.CompactTextString(m) }
func (*ReqGameLiveInfo) ProtoMessage()    {}
func (*ReqGameLiveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{224}
}
func (m *ReqGameLiveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGameLiveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGameLiveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGameLiveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGameLiveInfo.Merge(m, src)
}
func (m *ReqGameLiveInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqGameLiveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGameLiveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGameLiveInfo proto.InternalMessageInfo

func (m *ReqGameLiveInfo) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

type ResGameLiveInfo struct {
	Error                *Error                `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LeftStartSeconds     uint32                `protobuf:"varint,2,opt,name=left_start_seconds,json=leftStartSeconds,proto3" json:"left_start_seconds,omitempty"`
	LiveHead             *GameLiveHead         `protobuf:"bytes,3,opt,name=live_head,json=liveHead,proto3" json:"live_head,omitempty"`
	Segments             []*GameLiveSegmentUri `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	NowMillisecond       uint32                `protobuf:"varint,5,opt,name=now_millisecond,json=nowMillisecond,proto3" json:"now_millisecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ResGameLiveInfo) Reset()         { *m = ResGameLiveInfo{} }
func (m *ResGameLiveInfo) String() string { return proto.CompactTextString(m) }
func (*ResGameLiveInfo) ProtoMessage()    {}
func (*ResGameLiveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{225}
}
func (m *ResGameLiveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGameLiveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGameLiveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGameLiveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGameLiveInfo.Merge(m, src)
}
func (m *ResGameLiveInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResGameLiveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGameLiveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResGameLiveInfo proto.InternalMessageInfo

func (m *ResGameLiveInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGameLiveInfo) GetLeftStartSeconds() uint32 {
	if m != nil {
		return m.LeftStartSeconds
	}
	return 0
}

func (m *ResGameLiveInfo) GetLiveHead() *GameLiveHead {
	if m != nil {
		return m.LiveHead
	}
	return nil
}

func (m *ResGameLiveInfo) GetSegments() []*GameLiveSegmentUri {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *ResGameLiveInfo) GetNowMillisecond() uint32 {
	if m != nil {
		return m.NowMillisecond
	}
	return 0
}

type ReqGameLiveLeftSegment struct {
	GameUuid             string   `protobuf:"bytes,1,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	LastSegmentId        uint32   `protobuf:"varint,2,opt,name=last_segment_id,json=lastSegmentId,proto3" json:"last_segment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGameLiveLeftSegment) Reset()         { *m = ReqGameLiveLeftSegment{} }
func (m *ReqGameLiveLeftSegment) String() string { return proto.CompactTextString(m) }
func (*ReqGameLiveLeftSegment) ProtoMessage()    {}
func (*ReqGameLiveLeftSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{226}
}
func (m *ReqGameLiveLeftSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGameLiveLeftSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGameLiveLeftSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGameLiveLeftSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGameLiveLeftSegment.Merge(m, src)
}
func (m *ReqGameLiveLeftSegment) XXX_Size() int {
	return m.Size()
}
func (m *ReqGameLiveLeftSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGameLiveLeftSegment.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGameLiveLeftSegment proto.InternalMessageInfo

func (m *ReqGameLiveLeftSegment) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

func (m *ReqGameLiveLeftSegment) GetLastSegmentId() uint32 {
	if m != nil {
		return m.LastSegmentId
	}
	return 0
}

type ResGameLiveLeftSegment struct {
	Error                 *Error                `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LiveState             uint32                `protobuf:"varint,2,opt,name=live_state,json=liveState,proto3" json:"live_state,omitempty"`
	Segments              []*GameLiveSegmentUri `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	NowMillisecond        uint32                `protobuf:"varint,5,opt,name=now_millisecond,json=nowMillisecond,proto3" json:"now_millisecond,omitempty"`
	SegmentEndMillisecond uint32                `protobuf:"varint,6,opt,name=segment_end_millisecond,json=segmentEndMillisecond,proto3" json:"segment_end_millisecond,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *ResGameLiveLeftSegment) Reset()         { *m = ResGameLiveLeftSegment{} }
func (m *ResGameLiveLeftSegment) String() string { return proto.CompactTextString(m) }
func (*ResGameLiveLeftSegment) ProtoMessage()    {}
func (*ResGameLiveLeftSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{227}
}
func (m *ResGameLiveLeftSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGameLiveLeftSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGameLiveLeftSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGameLiveLeftSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGameLiveLeftSegment.Merge(m, src)
}
func (m *ResGameLiveLeftSegment) XXX_Size() int {
	return m.Size()
}
func (m *ResGameLiveLeftSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGameLiveLeftSegment.DiscardUnknown(m)
}

var xxx_messageInfo_ResGameLiveLeftSegment proto.InternalMessageInfo

func (m *ResGameLiveLeftSegment) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGameLiveLeftSegment) GetLiveState() uint32 {
	if m != nil {
		return m.LiveState
	}
	return 0
}

func (m *ResGameLiveLeftSegment) GetSegments() []*GameLiveSegmentUri {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *ResGameLiveLeftSegment) GetNowMillisecond() uint32 {
	if m != nil {
		return m.NowMillisecond
	}
	return 0
}

func (m *ResGameLiveLeftSegment) GetSegmentEndMillisecond() uint32 {
	if m != nil {
		return m.SegmentEndMillisecond
	}
	return 0
}

type ReqGameLiveList struct {
	FilterId             uint32   `protobuf:"varint,1,opt,name=filter_id,json=filterId,proto3" json:"filter_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGameLiveList) Reset()         { *m = ReqGameLiveList{} }
func (m *ReqGameLiveList) String() string { return proto.CompactTextString(m) }
func (*ReqGameLiveList) ProtoMessage()    {}
func (*ReqGameLiveList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{228}
}
func (m *ReqGameLiveList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGameLiveList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGameLiveList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGameLiveList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGameLiveList.Merge(m, src)
}
func (m *ReqGameLiveList) XXX_Size() int {
	return m.Size()
}
func (m *ReqGameLiveList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGameLiveList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGameLiveList proto.InternalMessageInfo

func (m *ReqGameLiveList) GetFilterId() uint32 {
	if m != nil {
		return m.FilterId
	}
	return 0
}

type ResGameLiveList struct {
	Error                *Error          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LiveList             []*GameLiveHead `protobuf:"bytes,2,rep,name=live_list,json=liveList,proto3" json:"live_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResGameLiveList) Reset()         { *m = ResGameLiveList{} }
func (m *ResGameLiveList) String() string { return proto.CompactTextString(m) }
func (*ResGameLiveList) ProtoMessage()    {}
func (*ResGameLiveList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{229}
}
func (m *ResGameLiveList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGameLiveList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGameLiveList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGameLiveList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGameLiveList.Merge(m, src)
}
func (m *ResGameLiveList) XXX_Size() int {
	return m.Size()
}
func (m *ResGameLiveList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGameLiveList.DiscardUnknown(m)
}

var xxx_messageInfo_ResGameLiveList proto.InternalMessageInfo

func (m *ResGameLiveList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGameLiveList) GetLiveList() []*GameLiveHead {
	if m != nil {
		return m.LiveList
	}
	return nil
}

type ResCommentSetting struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	CommentAllow         uint32   `protobuf:"varint,2,opt,name=comment_allow,json=commentAllow,proto3" json:"comment_allow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCommentSetting) Reset()         { *m = ResCommentSetting{} }
func (m *ResCommentSetting) String() string { return proto.CompactTextString(m) }
func (*ResCommentSetting) ProtoMessage()    {}
func (*ResCommentSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{230}
}
func (m *ResCommentSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCommentSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCommentSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCommentSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCommentSetting.Merge(m, src)
}
func (m *ResCommentSetting) XXX_Size() int {
	return m.Size()
}
func (m *ResCommentSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCommentSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ResCommentSetting proto.InternalMessageInfo

func (m *ResCommentSetting) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCommentSetting) GetCommentAllow() uint32 {
	if m != nil {
		return m.CommentAllow
	}
	return 0
}

type ReqUpdateCommentSetting struct {
	CommentAllow         uint32   `protobuf:"varint,1,opt,name=comment_allow,json=commentAllow,proto3" json:"comment_allow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpdateCommentSetting) Reset()         { *m = ReqUpdateCommentSetting{} }
func (m *ReqUpdateCommentSetting) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateCommentSetting) ProtoMessage()    {}
func (*ReqUpdateCommentSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{231}
}
func (m *ReqUpdateCommentSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdateCommentSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdateCommentSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdateCommentSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateCommentSetting.Merge(m, src)
}
func (m *ReqUpdateCommentSetting) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdateCommentSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateCommentSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateCommentSetting proto.InternalMessageInfo

func (m *ReqUpdateCommentSetting) GetCommentAllow() uint32 {
	if m != nil {
		return m.CommentAllow
	}
	return 0
}

type ReqFetchCommentList struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCommentList) Reset()         { *m = ReqFetchCommentList{} }
func (m *ReqFetchCommentList) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCommentList) ProtoMessage()    {}
func (*ReqFetchCommentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{232}
}
func (m *ReqFetchCommentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCommentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCommentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCommentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCommentList.Merge(m, src)
}
func (m *ReqFetchCommentList) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCommentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCommentList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCommentList proto.InternalMessageInfo

func (m *ReqFetchCommentList) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type ResFetchCommentList struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	CommentAllow         uint32   `protobuf:"varint,2,opt,name=comment_allow,json=commentAllow,proto3" json:"comment_allow,omitempty"`
	CommentIdList        []uint32 `protobuf:"varint,3,rep,packed,name=comment_id_list,json=commentIdList,proto3" json:"comment_id_list,omitempty"`
	LastReadId           uint32   `protobuf:"varint,4,opt,name=last_read_id,json=lastReadId,proto3" json:"last_read_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResFetchCommentList) Reset()         { *m = ResFetchCommentList{} }
func (m *ResFetchCommentList) String() string { return proto.CompactTextString(m) }
func (*ResFetchCommentList) ProtoMessage()    {}
func (*ResFetchCommentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{233}
}
func (m *ResFetchCommentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCommentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCommentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCommentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCommentList.Merge(m, src)
}
func (m *ResFetchCommentList) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCommentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCommentList.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCommentList proto.InternalMessageInfo

func (m *ResFetchCommentList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCommentList) GetCommentAllow() uint32 {
	if m != nil {
		return m.CommentAllow
	}
	return 0
}

func (m *ResFetchCommentList) GetCommentIdList() []uint32 {
	if m != nil {
		return m.CommentIdList
	}
	return nil
}

func (m *ResFetchCommentList) GetLastReadId() uint32 {
	if m != nil {
		return m.LastReadId
	}
	return 0
}

type ReqFetchCommentContent struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	CommentIdList        []uint32 `protobuf:"varint,2,rep,packed,name=comment_id_list,json=commentIdList,proto3" json:"comment_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCommentContent) Reset()         { *m = ReqFetchCommentContent{} }
func (m *ReqFetchCommentContent) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCommentContent) ProtoMessage()    {}
func (*ReqFetchCommentContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{234}
}
func (m *ReqFetchCommentContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCommentContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCommentContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCommentContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCommentContent.Merge(m, src)
}
func (m *ReqFetchCommentContent) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCommentContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCommentContent.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCommentContent proto.InternalMessageInfo

func (m *ReqFetchCommentContent) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ReqFetchCommentContent) GetCommentIdList() []uint32 {
	if m != nil {
		return m.CommentIdList
	}
	return nil
}

type ResFetchCommentContent struct {
	Error                *Error         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Comments             []*CommentItem `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResFetchCommentContent) Reset()         { *m = ResFetchCommentContent{} }
func (m *ResFetchCommentContent) String() string { return proto.CompactTextString(m) }
func (*ResFetchCommentContent) ProtoMessage()    {}
func (*ResFetchCommentContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{235}
}
func (m *ResFetchCommentContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCommentContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCommentContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCommentContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCommentContent.Merge(m, src)
}
func (m *ResFetchCommentContent) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCommentContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCommentContent.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCommentContent proto.InternalMessageInfo

func (m *ResFetchCommentContent) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCommentContent) GetComments() []*CommentItem {
	if m != nil {
		return m.Comments
	}
	return nil
}

type ReqLeaveComment struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqLeaveComment) Reset()         { *m = ReqLeaveComment{} }
func (m *ReqLeaveComment) String() string { return proto.CompactTextString(m) }
func (*ReqLeaveComment) ProtoMessage()    {}
func (*ReqLeaveComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{236}
}
func (m *ReqLeaveComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLeaveComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLeaveComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLeaveComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLeaveComment.Merge(m, src)
}
func (m *ReqLeaveComment) XXX_Size() int {
	return m.Size()
}
func (m *ReqLeaveComment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLeaveComment.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLeaveComment proto.InternalMessageInfo

func (m *ReqLeaveComment) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ReqLeaveComment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ReqDeleteComment struct {
	TargetId             uint32   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	DeleteList           []uint32 `protobuf:"varint,2,rep,packed,name=delete_list,json=deleteList,proto3" json:"delete_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqDeleteComment) Reset()         { *m = ReqDeleteComment{} }
func (m *ReqDeleteComment) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteComment) ProtoMessage()    {}
func (*ReqDeleteComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{237}
}
func (m *ReqDeleteComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDeleteComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDeleteComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDeleteComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDeleteComment.Merge(m, src)
}
func (m *ReqDeleteComment) XXX_Size() int {
	return m.Size()
}
func (m *ReqDeleteComment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDeleteComment.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDeleteComment proto.InternalMessageInfo

func (m *ReqDeleteComment) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ReqDeleteComment) GetDeleteList() []uint32 {
	if m != nil {
		return m.DeleteList
	}
	return nil
}

type ReqUpdateReadComment struct {
	ReadId               uint32   `protobuf:"varint,1,opt,name=read_id,json=readId,proto3" json:"read_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpdateReadComment) Reset()         { *m = ReqUpdateReadComment{} }
func (m *ReqUpdateReadComment) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateReadComment) ProtoMessage()    {}
func (*ReqUpdateReadComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{238}
}
func (m *ReqUpdateReadComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdateReadComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdateReadComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdateReadComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateReadComment.Merge(m, src)
}
func (m *ReqUpdateReadComment) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdateReadComment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateReadComment.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateReadComment proto.InternalMessageInfo

func (m *ReqUpdateReadComment) GetReadId() uint32 {
	if m != nil {
		return m.ReadId
	}
	return 0
}

type ReqRollingNotice struct {
	Notice               *RollingNotice `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqRollingNotice) Reset()         { *m = ReqRollingNotice{} }
func (m *ReqRollingNotice) String() string { return proto.CompactTextString(m) }
func (*ReqRollingNotice) ProtoMessage()    {}
func (*ReqRollingNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{239}
}
func (m *ReqRollingNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRollingNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRollingNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRollingNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRollingNotice.Merge(m, src)
}
func (m *ReqRollingNotice) XXX_Size() int {
	return m.Size()
}
func (m *ReqRollingNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRollingNotice.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRollingNotice proto.InternalMessageInfo

func (m *ReqRollingNotice) GetNotice() *RollingNotice {
	if m != nil {
		return m.Notice
	}
	return nil
}

type ResServerTime struct {
	ServerTime           uint32   `protobuf:"varint,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResServerTime) Reset()         { *m = ResServerTime{} }
func (m *ResServerTime) String() string { return proto.CompactTextString(m) }
func (*ResServerTime) ProtoMessage()    {}
func (*ResServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{240}
}
func (m *ResServerTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResServerTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResServerTime.Merge(m, src)
}
func (m *ResServerTime) XXX_Size() int {
	return m.Size()
}
func (m *ResServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ResServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_ResServerTime proto.InternalMessageInfo

func (m *ResServerTime) GetServerTime() uint32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

type ReqPlatformBillingProducts struct {
	ShelvesId            uint32   `protobuf:"varint,1,opt,name=shelves_id,json=shelvesId,proto3" json:"shelves_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqPlatformBillingProducts) Reset()         { *m = ReqPlatformBillingProducts{} }
func (m *ReqPlatformBillingProducts) String() string { return proto.CompactTextString(m) }
func (*ReqPlatformBillingProducts) ProtoMessage()    {}
func (*ReqPlatformBillingProducts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{241}
}
func (m *ReqPlatformBillingProducts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqPlatformBillingProducts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqPlatformBillingProducts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqPlatformBillingProducts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqPlatformBillingProducts.Merge(m, src)
}
func (m *ReqPlatformBillingProducts) XXX_Size() int {
	return m.Size()
}
func (m *ReqPlatformBillingProducts) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqPlatformBillingProducts.DiscardUnknown(m)
}

var xxx_messageInfo_ReqPlatformBillingProducts proto.InternalMessageInfo

func (m *ReqPlatformBillingProducts) GetShelvesId() uint32 {
	if m != nil {
		return m.ShelvesId
	}
	return 0
}

type ResPlatformBillingProducts struct {
	Error                *Error            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Products             []*BillingProduct `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResPlatformBillingProducts) Reset()         { *m = ResPlatformBillingProducts{} }
func (m *ResPlatformBillingProducts) String() string { return proto.CompactTextString(m) }
func (*ResPlatformBillingProducts) ProtoMessage()    {}
func (*ResPlatformBillingProducts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{242}
}
func (m *ResPlatformBillingProducts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResPlatformBillingProducts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResPlatformBillingProducts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResPlatformBillingProducts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResPlatformBillingProducts.Merge(m, src)
}
func (m *ResPlatformBillingProducts) XXX_Size() int {
	return m.Size()
}
func (m *ResPlatformBillingProducts) XXX_DiscardUnknown() {
	xxx_messageInfo_ResPlatformBillingProducts.DiscardUnknown(m)
}

var xxx_messageInfo_ResPlatformBillingProducts proto.InternalMessageInfo

func (m *ResPlatformBillingProducts) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResPlatformBillingProducts) GetProducts() []*BillingProduct {
	if m != nil {
		return m.Products
	}
	return nil
}

type ReqCreateBillingOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	PaymentPlatform      uint32   `protobuf:"varint,2,opt,name=payment_platform,json=paymentPlatform,proto3" json:"payment_platform,omitempty"`
	ClientType           uint32   `protobuf:"varint,3,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateBillingOrder) Reset()         { *m = ReqCreateBillingOrder{} }
func (m *ReqCreateBillingOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateBillingOrder) ProtoMessage()    {}
func (*ReqCreateBillingOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{243}
}
func (m *ReqCreateBillingOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateBillingOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateBillingOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateBillingOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateBillingOrder.Merge(m, src)
}
func (m *ReqCreateBillingOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateBillingOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateBillingOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateBillingOrder proto.InternalMessageInfo

func (m *ReqCreateBillingOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateBillingOrder) GetPaymentPlatform() uint32 {
	if m != nil {
		return m.PaymentPlatform
	}
	return 0
}

func (m *ReqCreateBillingOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateBillingOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ResCreateBillingOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateBillingOrder) Reset()         { *m = ResCreateBillingOrder{} }
func (m *ResCreateBillingOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateBillingOrder) ProtoMessage()    {}
func (*ResCreateBillingOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{244}
}
func (m *ResCreateBillingOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateBillingOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateBillingOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateBillingOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateBillingOrder.Merge(m, src)
}
func (m *ResCreateBillingOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateBillingOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateBillingOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateBillingOrder proto.InternalMessageInfo

func (m *ResCreateBillingOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateBillingOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqSolveGooglePlayOrder struct {
	InappPurchaseData    string   `protobuf:"bytes,2,opt,name=inapp_purchase_data,json=inappPurchaseData,proto3" json:"inapp_purchase_data,omitempty"`
	InappDataSignature   string   `protobuf:"bytes,3,opt,name=inapp_data_signature,json=inappDataSignature,proto3" json:"inapp_data_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSolveGooglePlayOrder) Reset()         { *m = ReqSolveGooglePlayOrder{} }
func (m *ReqSolveGooglePlayOrder) String() string { return proto.CompactTextString(m) }
func (*ReqSolveGooglePlayOrder) ProtoMessage()    {}
func (*ReqSolveGooglePlayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{245}
}
func (m *ReqSolveGooglePlayOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSolveGooglePlayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSolveGooglePlayOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSolveGooglePlayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSolveGooglePlayOrder.Merge(m, src)
}
func (m *ReqSolveGooglePlayOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqSolveGooglePlayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSolveGooglePlayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSolveGooglePlayOrder proto.InternalMessageInfo

func (m *ReqSolveGooglePlayOrder) GetInappPurchaseData() string {
	if m != nil {
		return m.InappPurchaseData
	}
	return ""
}

func (m *ReqSolveGooglePlayOrder) GetInappDataSignature() string {
	if m != nil {
		return m.InappDataSignature
	}
	return ""
}

type ReqCancelGooglePlayOrder struct {
	OrderId              string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCancelGooglePlayOrder) Reset()         { *m = ReqCancelGooglePlayOrder{} }
func (m *ReqCancelGooglePlayOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCancelGooglePlayOrder) ProtoMessage()    {}
func (*ReqCancelGooglePlayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{246}
}
func (m *ReqCancelGooglePlayOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCancelGooglePlayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCancelGooglePlayOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCancelGooglePlayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCancelGooglePlayOrder.Merge(m, src)
}
func (m *ReqCancelGooglePlayOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCancelGooglePlayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCancelGooglePlayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCancelGooglePlayOrder proto.InternalMessageInfo

func (m *ReqCancelGooglePlayOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateWechatNativeOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountIp            string   `protobuf:"bytes,4,opt,name=account_ip,json=accountIp,proto3" json:"account_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateWechatNativeOrder) Reset()         { *m = ReqCreateWechatNativeOrder{} }
func (m *ReqCreateWechatNativeOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateWechatNativeOrder) ProtoMessage()    {}
func (*ReqCreateWechatNativeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{247}
}
func (m *ReqCreateWechatNativeOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateWechatNativeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateWechatNativeOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateWechatNativeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateWechatNativeOrder.Merge(m, src)
}
func (m *ReqCreateWechatNativeOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateWechatNativeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateWechatNativeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateWechatNativeOrder proto.InternalMessageInfo

func (m *ReqCreateWechatNativeOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateWechatNativeOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateWechatNativeOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateWechatNativeOrder) GetAccountIp() string {
	if m != nil {
		return m.AccountIp
	}
	return ""
}

type ResCreateWechatNativeOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	QrcodeBuffer         string   `protobuf:"bytes,2,opt,name=qrcode_buffer,json=qrcodeBuffer,proto3" json:"qrcode_buffer,omitempty"`
	OrderId              string   `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateWechatNativeOrder) Reset()         { *m = ResCreateWechatNativeOrder{} }
func (m *ResCreateWechatNativeOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateWechatNativeOrder) ProtoMessage()    {}
func (*ResCreateWechatNativeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{248}
}
func (m *ResCreateWechatNativeOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateWechatNativeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateWechatNativeOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateWechatNativeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateWechatNativeOrder.Merge(m, src)
}
func (m *ResCreateWechatNativeOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateWechatNativeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateWechatNativeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateWechatNativeOrder proto.InternalMessageInfo

func (m *ResCreateWechatNativeOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateWechatNativeOrder) GetQrcodeBuffer() string {
	if m != nil {
		return m.QrcodeBuffer
	}
	return ""
}

func (m *ResCreateWechatNativeOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateWechatAppOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountIp            string   `protobuf:"bytes,4,opt,name=account_ip,json=accountIp,proto3" json:"account_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateWechatAppOrder) Reset()         { *m = ReqCreateWechatAppOrder{} }
func (m *ReqCreateWechatAppOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateWechatAppOrder) ProtoMessage()    {}
func (*ReqCreateWechatAppOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{249}
}
func (m *ReqCreateWechatAppOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateWechatAppOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateWechatAppOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateWechatAppOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateWechatAppOrder.Merge(m, src)
}
func (m *ReqCreateWechatAppOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateWechatAppOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateWechatAppOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateWechatAppOrder proto.InternalMessageInfo

func (m *ReqCreateWechatAppOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateWechatAppOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateWechatAppOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateWechatAppOrder) GetAccountIp() string {
	if m != nil {
		return m.AccountIp
	}
	return ""
}

type ResCreateWechatAppOrder struct {
	Error                *Error                                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	CallWechatAppParam   *ResCreateWechatAppOrder_CallWechatAppParam `protobuf:"bytes,2,opt,name=call_wechat_app_param,json=callWechatAppParam,proto3" json:"call_wechat_app_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ResCreateWechatAppOrder) Reset()         { *m = ResCreateWechatAppOrder{} }
func (m *ResCreateWechatAppOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateWechatAppOrder) ProtoMessage()    {}
func (*ResCreateWechatAppOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{250}
}
func (m *ResCreateWechatAppOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateWechatAppOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateWechatAppOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateWechatAppOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateWechatAppOrder.Merge(m, src)
}
func (m *ResCreateWechatAppOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateWechatAppOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateWechatAppOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateWechatAppOrder proto.InternalMessageInfo

func (m *ResCreateWechatAppOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateWechatAppOrder) GetCallWechatAppParam() *ResCreateWechatAppOrder_CallWechatAppParam {
	if m != nil {
		return m.CallWechatAppParam
	}
	return nil
}

type ResCreateWechatAppOrder_CallWechatAppParam struct {
	Appid                string   `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	Partnerid            string   `protobuf:"bytes,2,opt,name=partnerid,proto3" json:"partnerid,omitempty"`
	Prepayid             string   `protobuf:"bytes,3,opt,name=prepayid,proto3" json:"prepayid,omitempty"`
	Package              string   `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
	Noncestr             string   `protobuf:"bytes,5,opt,name=noncestr,proto3" json:"noncestr,omitempty"`
	Timestamp            string   `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sign                 string   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) Reset() {
	*m = ResCreateWechatAppOrder_CallWechatAppParam{}
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) String() string {
	return proto.CompactTextString(m)
}
func (*ResCreateWechatAppOrder_CallWechatAppParam) ProtoMessage() {}
func (*ResCreateWechatAppOrder_CallWechatAppParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{250, 0}
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateWechatAppOrder_CallWechatAppParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateWechatAppOrder_CallWechatAppParam.Merge(m, src)
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateWechatAppOrder_CallWechatAppParam.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateWechatAppOrder_CallWechatAppParam proto.InternalMessageInfo

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetPartnerid() string {
	if m != nil {
		return m.Partnerid
	}
	return ""
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetPrepayid() string {
	if m != nil {
		return m.Prepayid
	}
	return ""
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetNoncestr() string {
	if m != nil {
		return m.Noncestr
	}
	return ""
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type ReqCreateAlipayOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AlipayTradeType      string   `protobuf:"bytes,4,opt,name=alipay_trade_type,json=alipayTradeType,proto3" json:"alipay_trade_type,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,5,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateAlipayOrder) Reset()         { *m = ReqCreateAlipayOrder{} }
func (m *ReqCreateAlipayOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateAlipayOrder) ProtoMessage()    {}
func (*ReqCreateAlipayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{251}
}
func (m *ReqCreateAlipayOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateAlipayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateAlipayOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateAlipayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateAlipayOrder.Merge(m, src)
}
func (m *ReqCreateAlipayOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateAlipayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateAlipayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateAlipayOrder proto.InternalMessageInfo

func (m *ReqCreateAlipayOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateAlipayOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateAlipayOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateAlipayOrder) GetAlipayTradeType() string {
	if m != nil {
		return m.AlipayTradeType
	}
	return ""
}

func (m *ReqCreateAlipayOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

type ResCreateAlipayOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	AlipayUrl            string   `protobuf:"bytes,2,opt,name=alipay_url,json=alipayUrl,proto3" json:"alipay_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateAlipayOrder) Reset()         { *m = ResCreateAlipayOrder{} }
func (m *ResCreateAlipayOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateAlipayOrder) ProtoMessage()    {}
func (*ResCreateAlipayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{252}
}
func (m *ResCreateAlipayOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateAlipayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateAlipayOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateAlipayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateAlipayOrder.Merge(m, src)
}
func (m *ResCreateAlipayOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateAlipayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateAlipayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateAlipayOrder proto.InternalMessageInfo

func (m *ResCreateAlipayOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateAlipayOrder) GetAlipayUrl() string {
	if m != nil {
		return m.AlipayUrl
	}
	return ""
}

type ReqCreateAlipayScanOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateAlipayScanOrder) Reset()         { *m = ReqCreateAlipayScanOrder{} }
func (m *ReqCreateAlipayScanOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateAlipayScanOrder) ProtoMessage()    {}
func (*ReqCreateAlipayScanOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{253}
}
func (m *ReqCreateAlipayScanOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateAlipayScanOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateAlipayScanOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateAlipayScanOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateAlipayScanOrder.Merge(m, src)
}
func (m *ReqCreateAlipayScanOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateAlipayScanOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateAlipayScanOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateAlipayScanOrder proto.InternalMessageInfo

func (m *ReqCreateAlipayScanOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateAlipayScanOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateAlipayScanOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ResCreateAlipayScanOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	QrcodeBuffer         string   `protobuf:"bytes,2,opt,name=qrcode_buffer,json=qrcodeBuffer,proto3" json:"qrcode_buffer,omitempty"`
	OrderId              string   `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	QrCode               string   `protobuf:"bytes,4,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateAlipayScanOrder) Reset()         { *m = ResCreateAlipayScanOrder{} }
func (m *ResCreateAlipayScanOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateAlipayScanOrder) ProtoMessage()    {}
func (*ResCreateAlipayScanOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{254}
}
func (m *ResCreateAlipayScanOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateAlipayScanOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateAlipayScanOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateAlipayScanOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateAlipayScanOrder.Merge(m, src)
}
func (m *ResCreateAlipayScanOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateAlipayScanOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateAlipayScanOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateAlipayScanOrder proto.InternalMessageInfo

func (m *ResCreateAlipayScanOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateAlipayScanOrder) GetQrcodeBuffer() string {
	if m != nil {
		return m.QrcodeBuffer
	}
	return ""
}

func (m *ResCreateAlipayScanOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ResCreateAlipayScanOrder) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

type ReqCreateAlipayAppOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateAlipayAppOrder) Reset()         { *m = ReqCreateAlipayAppOrder{} }
func (m *ReqCreateAlipayAppOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateAlipayAppOrder) ProtoMessage()    {}
func (*ReqCreateAlipayAppOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{255}
}
func (m *ReqCreateAlipayAppOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateAlipayAppOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateAlipayAppOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateAlipayAppOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateAlipayAppOrder.Merge(m, src)
}
func (m *ReqCreateAlipayAppOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateAlipayAppOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateAlipayAppOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateAlipayAppOrder proto.InternalMessageInfo

func (m *ReqCreateAlipayAppOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateAlipayAppOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateAlipayAppOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ResCreateAlipayAppOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	AlipayUrl            string   `protobuf:"bytes,2,opt,name=alipay_url,json=alipayUrl,proto3" json:"alipay_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateAlipayAppOrder) Reset()         { *m = ResCreateAlipayAppOrder{} }
func (m *ResCreateAlipayAppOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateAlipayAppOrder) ProtoMessage()    {}
func (*ResCreateAlipayAppOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{256}
}
func (m *ResCreateAlipayAppOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateAlipayAppOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateAlipayAppOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateAlipayAppOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateAlipayAppOrder.Merge(m, src)
}
func (m *ResCreateAlipayAppOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateAlipayAppOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateAlipayAppOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateAlipayAppOrder proto.InternalMessageInfo

func (m *ResCreateAlipayAppOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateAlipayAppOrder) GetAlipayUrl() string {
	if m != nil {
		return m.AlipayUrl
	}
	return ""
}

type ReqCreateJPCreditCardOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateJPCreditCardOrder) Reset()         { *m = ReqCreateJPCreditCardOrder{} }
func (m *ReqCreateJPCreditCardOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateJPCreditCardOrder) ProtoMessage()    {}
func (*ReqCreateJPCreditCardOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{257}
}
func (m *ReqCreateJPCreditCardOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateJPCreditCardOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateJPCreditCardOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateJPCreditCardOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateJPCreditCardOrder.Merge(m, src)
}
func (m *ReqCreateJPCreditCardOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateJPCreditCardOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateJPCreditCardOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateJPCreditCardOrder proto.InternalMessageInfo

func (m *ReqCreateJPCreditCardOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateJPCreditCardOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateJPCreditCardOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateJPCreditCardOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateJPCreditCardOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateJPCreditCardOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateJPCreditCardOrder) Reset()         { *m = ResCreateJPCreditCardOrder{} }
func (m *ResCreateJPCreditCardOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateJPCreditCardOrder) ProtoMessage()    {}
func (*ResCreateJPCreditCardOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{258}
}
func (m *ResCreateJPCreditCardOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateJPCreditCardOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateJPCreditCardOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateJPCreditCardOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateJPCreditCardOrder.Merge(m, src)
}
func (m *ResCreateJPCreditCardOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateJPCreditCardOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateJPCreditCardOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateJPCreditCardOrder proto.InternalMessageInfo

func (m *ResCreateJPCreditCardOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateJPCreditCardOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateJPPaypalOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateJPPaypalOrder) Reset()         { *m = ReqCreateJPPaypalOrder{} }
func (m *ReqCreateJPPaypalOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateJPPaypalOrder) ProtoMessage()    {}
func (*ReqCreateJPPaypalOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{259}
}
func (m *ReqCreateJPPaypalOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateJPPaypalOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateJPPaypalOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateJPPaypalOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateJPPaypalOrder.Merge(m, src)
}
func (m *ReqCreateJPPaypalOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateJPPaypalOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateJPPaypalOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateJPPaypalOrder proto.InternalMessageInfo

func (m *ReqCreateJPPaypalOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateJPPaypalOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateJPPaypalOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateJPPaypalOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateJPPaypalOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateJPPaypalOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateJPPaypalOrder) Reset()         { *m = ResCreateJPPaypalOrder{} }
func (m *ResCreateJPPaypalOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateJPPaypalOrder) ProtoMessage()    {}
func (*ResCreateJPPaypalOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{260}
}
func (m *ResCreateJPPaypalOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateJPPaypalOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateJPPaypalOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateJPPaypalOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateJPPaypalOrder.Merge(m, src)
}
func (m *ResCreateJPPaypalOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateJPPaypalOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateJPPaypalOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateJPPaypalOrder proto.InternalMessageInfo

func (m *ResCreateJPPaypalOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateJPPaypalOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateJPAuOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateJPAuOrder) Reset()         { *m = ReqCreateJPAuOrder{} }
func (m *ReqCreateJPAuOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateJPAuOrder) ProtoMessage()    {}
func (*ReqCreateJPAuOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{261}
}
func (m *ReqCreateJPAuOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateJPAuOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateJPAuOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateJPAuOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateJPAuOrder.Merge(m, src)
}
func (m *ReqCreateJPAuOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateJPAuOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateJPAuOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateJPAuOrder proto.InternalMessageInfo

func (m *ReqCreateJPAuOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateJPAuOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateJPAuOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateJPAuOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateJPAuOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateJPAuOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateJPAuOrder) Reset()         { *m = ResCreateJPAuOrder{} }
func (m *ResCreateJPAuOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateJPAuOrder) ProtoMessage()    {}
func (*ResCreateJPAuOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{262}
}
func (m *ResCreateJPAuOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateJPAuOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateJPAuOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateJPAuOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateJPAuOrder.Merge(m, src)
}
func (m *ResCreateJPAuOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateJPAuOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateJPAuOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateJPAuOrder proto.InternalMessageInfo

func (m *ResCreateJPAuOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateJPAuOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateJPDocomoOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateJPDocomoOrder) Reset()         { *m = ReqCreateJPDocomoOrder{} }
func (m *ReqCreateJPDocomoOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateJPDocomoOrder) ProtoMessage()    {}
func (*ReqCreateJPDocomoOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{263}
}
func (m *ReqCreateJPDocomoOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateJPDocomoOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateJPDocomoOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateJPDocomoOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateJPDocomoOrder.Merge(m, src)
}
func (m *ReqCreateJPDocomoOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateJPDocomoOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateJPDocomoOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateJPDocomoOrder proto.InternalMessageInfo

func (m *ReqCreateJPDocomoOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateJPDocomoOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateJPDocomoOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateJPDocomoOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateJPDocomoOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateJPDocomoOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateJPDocomoOrder) Reset()         { *m = ResCreateJPDocomoOrder{} }
func (m *ResCreateJPDocomoOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateJPDocomoOrder) ProtoMessage()    {}
func (*ResCreateJPDocomoOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{264}
}
func (m *ResCreateJPDocomoOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateJPDocomoOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateJPDocomoOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateJPDocomoOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateJPDocomoOrder.Merge(m, src)
}
func (m *ResCreateJPDocomoOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateJPDocomoOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateJPDocomoOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateJPDocomoOrder proto.InternalMessageInfo

func (m *ResCreateJPDocomoOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateJPDocomoOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateJPWebMoneyOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateJPWebMoneyOrder) Reset()         { *m = ReqCreateJPWebMoneyOrder{} }
func (m *ReqCreateJPWebMoneyOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateJPWebMoneyOrder) ProtoMessage()    {}
func (*ReqCreateJPWebMoneyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{265}
}
func (m *ReqCreateJPWebMoneyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateJPWebMoneyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateJPWebMoneyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateJPWebMoneyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateJPWebMoneyOrder.Merge(m, src)
}
func (m *ReqCreateJPWebMoneyOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateJPWebMoneyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateJPWebMoneyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateJPWebMoneyOrder proto.InternalMessageInfo

func (m *ReqCreateJPWebMoneyOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateJPWebMoneyOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateJPWebMoneyOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateJPWebMoneyOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateJPWebMoneyOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateJPWebMoneyOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateJPWebMoneyOrder) Reset()         { *m = ResCreateJPWebMoneyOrder{} }
func (m *ResCreateJPWebMoneyOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateJPWebMoneyOrder) ProtoMessage()    {}
func (*ResCreateJPWebMoneyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{266}
}
func (m *ResCreateJPWebMoneyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateJPWebMoneyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateJPWebMoneyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateJPWebMoneyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateJPWebMoneyOrder.Merge(m, src)
}
func (m *ResCreateJPWebMoneyOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateJPWebMoneyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateJPWebMoneyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateJPWebMoneyOrder proto.InternalMessageInfo

func (m *ResCreateJPWebMoneyOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateJPWebMoneyOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateJPSoftbankOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateJPSoftbankOrder) Reset()         { *m = ReqCreateJPSoftbankOrder{} }
func (m *ReqCreateJPSoftbankOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateJPSoftbankOrder) ProtoMessage()    {}
func (*ReqCreateJPSoftbankOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{267}
}
func (m *ReqCreateJPSoftbankOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateJPSoftbankOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateJPSoftbankOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateJPSoftbankOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateJPSoftbankOrder.Merge(m, src)
}
func (m *ReqCreateJPSoftbankOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateJPSoftbankOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateJPSoftbankOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateJPSoftbankOrder proto.InternalMessageInfo

func (m *ReqCreateJPSoftbankOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateJPSoftbankOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateJPSoftbankOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateJPSoftbankOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateJPSoftbankOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateJPSoftbankOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateJPSoftbankOrder) Reset()         { *m = ResCreateJPSoftbankOrder{} }
func (m *ResCreateJPSoftbankOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateJPSoftbankOrder) ProtoMessage()    {}
func (*ResCreateJPSoftbankOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{268}
}
func (m *ResCreateJPSoftbankOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateJPSoftbankOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateJPSoftbankOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateJPSoftbankOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateJPSoftbankOrder.Merge(m, src)
}
func (m *ResCreateJPSoftbankOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateJPSoftbankOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateJPSoftbankOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateJPSoftbankOrder proto.InternalMessageInfo

func (m *ResCreateJPSoftbankOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateJPSoftbankOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateENPaypalOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateENPaypalOrder) Reset()         { *m = ReqCreateENPaypalOrder{} }
func (m *ReqCreateENPaypalOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateENPaypalOrder) ProtoMessage()    {}
func (*ReqCreateENPaypalOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{269}
}
func (m *ReqCreateENPaypalOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateENPaypalOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateENPaypalOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateENPaypalOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateENPaypalOrder.Merge(m, src)
}
func (m *ReqCreateENPaypalOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateENPaypalOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateENPaypalOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateENPaypalOrder proto.InternalMessageInfo

func (m *ReqCreateENPaypalOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateENPaypalOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateENPaypalOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateENPaypalOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateENPaypalOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateENPaypalOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateENPaypalOrder) Reset()         { *m = ResCreateENPaypalOrder{} }
func (m *ResCreateENPaypalOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateENPaypalOrder) ProtoMessage()    {}
func (*ResCreateENPaypalOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{270}
}
func (m *ResCreateENPaypalOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateENPaypalOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateENPaypalOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateENPaypalOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateENPaypalOrder.Merge(m, src)
}
func (m *ResCreateENPaypalOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateENPaypalOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateENPaypalOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateENPaypalOrder proto.InternalMessageInfo

func (m *ResCreateENPaypalOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateENPaypalOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateENJCBOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateENJCBOrder) Reset()         { *m = ReqCreateENJCBOrder{} }
func (m *ReqCreateENJCBOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateENJCBOrder) ProtoMessage()    {}
func (*ReqCreateENJCBOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{271}
}
func (m *ReqCreateENJCBOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateENJCBOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateENJCBOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateENJCBOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateENJCBOrder.Merge(m, src)
}
func (m *ReqCreateENJCBOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateENJCBOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateENJCBOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateENJCBOrder proto.InternalMessageInfo

func (m *ReqCreateENJCBOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateENJCBOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateENJCBOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateENJCBOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateENJCBOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateENJCBOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateENJCBOrder) Reset()         { *m = ResCreateENJCBOrder{} }
func (m *ResCreateENJCBOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateENJCBOrder) ProtoMessage()    {}
func (*ResCreateENJCBOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{272}
}
func (m *ResCreateENJCBOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateENJCBOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateENJCBOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateENJCBOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateENJCBOrder.Merge(m, src)
}
func (m *ResCreateENJCBOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateENJCBOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateENJCBOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateENJCBOrder proto.InternalMessageInfo

func (m *ResCreateENJCBOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateENJCBOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateENMasterCardOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateENMasterCardOrder) Reset()         { *m = ReqCreateENMasterCardOrder{} }
func (m *ReqCreateENMasterCardOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateENMasterCardOrder) ProtoMessage()    {}
func (*ReqCreateENMasterCardOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{273}
}
func (m *ReqCreateENMasterCardOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateENMasterCardOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateENMasterCardOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateENMasterCardOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateENMasterCardOrder.Merge(m, src)
}
func (m *ReqCreateENMasterCardOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateENMasterCardOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateENMasterCardOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateENMasterCardOrder proto.InternalMessageInfo

func (m *ReqCreateENMasterCardOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateENMasterCardOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateENMasterCardOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateENMasterCardOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateENMasterCardOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateENMasterCardOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateENMasterCardOrder) Reset()         { *m = ResCreateENMasterCardOrder{} }
func (m *ResCreateENMasterCardOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateENMasterCardOrder) ProtoMessage()    {}
func (*ResCreateENMasterCardOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{274}
}
func (m *ResCreateENMasterCardOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateENMasterCardOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateENMasterCardOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateENMasterCardOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateENMasterCardOrder.Merge(m, src)
}
func (m *ResCreateENMasterCardOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateENMasterCardOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateENMasterCardOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateENMasterCardOrder proto.InternalMessageInfo

func (m *ResCreateENMasterCardOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateENMasterCardOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateENVisaOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateENVisaOrder) Reset()         { *m = ReqCreateENVisaOrder{} }
func (m *ReqCreateENVisaOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateENVisaOrder) ProtoMessage()    {}
func (*ReqCreateENVisaOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{275}
}
func (m *ReqCreateENVisaOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateENVisaOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateENVisaOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateENVisaOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateENVisaOrder.Merge(m, src)
}
func (m *ReqCreateENVisaOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateENVisaOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateENVisaOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateENVisaOrder proto.InternalMessageInfo

func (m *ReqCreateENVisaOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateENVisaOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateENVisaOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateENVisaOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateENVisaOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateENVisaOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateENVisaOrder) Reset()         { *m = ResCreateENVisaOrder{} }
func (m *ResCreateENVisaOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateENVisaOrder) ProtoMessage()    {}
func (*ResCreateENVisaOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{276}
}
func (m *ResCreateENVisaOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateENVisaOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateENVisaOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateENVisaOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateENVisaOrder.Merge(m, src)
}
func (m *ResCreateENVisaOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateENVisaOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateENVisaOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateENVisaOrder proto.InternalMessageInfo

func (m *ResCreateENVisaOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateENVisaOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqCreateENAlipayOrder struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	ClientType           uint32   `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	AccountId            uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ReturnUrl            string   `protobuf:"bytes,4,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	AccessToken          string   `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCreateENAlipayOrder) Reset()         { *m = ReqCreateENAlipayOrder{} }
func (m *ReqCreateENAlipayOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCreateENAlipayOrder) ProtoMessage()    {}
func (*ReqCreateENAlipayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{277}
}
func (m *ReqCreateENAlipayOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCreateENAlipayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCreateENAlipayOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCreateENAlipayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCreateENAlipayOrder.Merge(m, src)
}
func (m *ReqCreateENAlipayOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReqCreateENAlipayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCreateENAlipayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCreateENAlipayOrder proto.InternalMessageInfo

func (m *ReqCreateENAlipayOrder) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqCreateENAlipayOrder) GetClientType() uint32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ReqCreateENAlipayOrder) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqCreateENAlipayOrder) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *ReqCreateENAlipayOrder) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ResCreateENAlipayOrder struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCreateENAlipayOrder) Reset()         { *m = ResCreateENAlipayOrder{} }
func (m *ResCreateENAlipayOrder) String() string { return proto.CompactTextString(m) }
func (*ResCreateENAlipayOrder) ProtoMessage()    {}
func (*ResCreateENAlipayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{278}
}
func (m *ResCreateENAlipayOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCreateENAlipayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCreateENAlipayOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCreateENAlipayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateENAlipayOrder.Merge(m, src)
}
func (m *ResCreateENAlipayOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResCreateENAlipayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateENAlipayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateENAlipayOrder proto.InternalMessageInfo

func (m *ResCreateENAlipayOrder) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCreateENAlipayOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReqOpenChest struct {
	ChestId              uint32   `protobuf:"varint,1,opt,name=chest_id,json=chestId,proto3" json:"chest_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	UseTicket            bool     `protobuf:"varint,3,opt,name=use_ticket,json=useTicket,proto3" json:"use_ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqOpenChest) Reset()         { *m = ReqOpenChest{} }
func (m *ReqOpenChest) String() string { return proto.CompactTextString(m) }
func (*ReqOpenChest) ProtoMessage()    {}
func (*ReqOpenChest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{279}
}
func (m *ReqOpenChest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqOpenChest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqOpenChest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqOpenChest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqOpenChest.Merge(m, src)
}
func (m *ReqOpenChest) XXX_Size() int {
	return m.Size()
}
func (m *ReqOpenChest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqOpenChest.DiscardUnknown(m)
}

var xxx_messageInfo_ReqOpenChest proto.InternalMessageInfo

func (m *ReqOpenChest) GetChestId() uint32 {
	if m != nil {
		return m.ChestId
	}
	return 0
}

func (m *ReqOpenChest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqOpenChest) GetUseTicket() bool {
	if m != nil {
		return m.UseTicket
	}
	return false
}

type ResOpenChest struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Results              []*OpenResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	TotalOpenCount       uint32        `protobuf:"varint,3,opt,name=total_open_count,json=totalOpenCount,proto3" json:"total_open_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResOpenChest) Reset()         { *m = ResOpenChest{} }
func (m *ResOpenChest) String() string { return proto.CompactTextString(m) }
func (*ResOpenChest) ProtoMessage()    {}
func (*ResOpenChest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{280}
}
func (m *ResOpenChest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResOpenChest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResOpenChest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResOpenChest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResOpenChest.Merge(m, src)
}
func (m *ResOpenChest) XXX_Size() int {
	return m.Size()
}
func (m *ResOpenChest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResOpenChest.DiscardUnknown(m)
}

var xxx_messageInfo_ResOpenChest proto.InternalMessageInfo

func (m *ResOpenChest) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResOpenChest) GetResults() []*OpenResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ResOpenChest) GetTotalOpenCount() uint32 {
	if m != nil {
		return m.TotalOpenCount
	}
	return 0
}

type ReqBuyFromChestShop struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBuyFromChestShop) Reset()         { *m = ReqBuyFromChestShop{} }
func (m *ReqBuyFromChestShop) String() string { return proto.CompactTextString(m) }
func (*ReqBuyFromChestShop) ProtoMessage()    {}
func (*ReqBuyFromChestShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{281}
}
func (m *ReqBuyFromChestShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBuyFromChestShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBuyFromChestShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBuyFromChestShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBuyFromChestShop.Merge(m, src)
}
func (m *ReqBuyFromChestShop) XXX_Size() int {
	return m.Size()
}
func (m *ReqBuyFromChestShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBuyFromChestShop.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBuyFromChestShop proto.InternalMessageInfo

func (m *ReqBuyFromChestShop) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqBuyFromChestShop) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResBuyFromChestShop struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ChestId              uint32   `protobuf:"varint,2,opt,name=chest_id,json=chestId,proto3" json:"chest_id,omitempty"`
	ConsumeCount         uint32   `protobuf:"varint,3,opt,name=consume_count,json=consumeCount,proto3" json:"consume_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResBuyFromChestShop) Reset()         { *m = ResBuyFromChestShop{} }
func (m *ResBuyFromChestShop) String() string { return proto.CompactTextString(m) }
func (*ResBuyFromChestShop) ProtoMessage()    {}
func (*ResBuyFromChestShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{282}
}
func (m *ResBuyFromChestShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResBuyFromChestShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResBuyFromChestShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResBuyFromChestShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResBuyFromChestShop.Merge(m, src)
}
func (m *ResBuyFromChestShop) XXX_Size() int {
	return m.Size()
}
func (m *ResBuyFromChestShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ResBuyFromChestShop.DiscardUnknown(m)
}

var xxx_messageInfo_ResBuyFromChestShop proto.InternalMessageInfo

func (m *ResBuyFromChestShop) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResBuyFromChestShop) GetChestId() uint32 {
	if m != nil {
		return m.ChestId
	}
	return 0
}

func (m *ResBuyFromChestShop) GetConsumeCount() uint32 {
	if m != nil {
		return m.ConsumeCount
	}
	return 0
}

type ResDailySignInInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	SignInDays           uint32   `protobuf:"varint,2,opt,name=sign_in_days,json=signInDays,proto3" json:"sign_in_days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResDailySignInInfo) Reset()         { *m = ResDailySignInInfo{} }
func (m *ResDailySignInInfo) String() string { return proto.CompactTextString(m) }
func (*ResDailySignInInfo) ProtoMessage()    {}
func (*ResDailySignInInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{283}
}
func (m *ResDailySignInInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResDailySignInInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResDailySignInInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResDailySignInInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResDailySignInInfo.Merge(m, src)
}
func (m *ResDailySignInInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResDailySignInInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResDailySignInInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResDailySignInInfo proto.InternalMessageInfo

func (m *ResDailySignInInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResDailySignInInfo) GetSignInDays() uint32 {
	if m != nil {
		return m.SignInDays
	}
	return 0
}

type ReqDoActivitySignIn struct {
	ActivityId           uint32   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqDoActivitySignIn) Reset()         { *m = ReqDoActivitySignIn{} }
func (m *ReqDoActivitySignIn) String() string { return proto.CompactTextString(m) }
func (*ReqDoActivitySignIn) ProtoMessage()    {}
func (*ReqDoActivitySignIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{284}
}
func (m *ReqDoActivitySignIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqDoActivitySignIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqDoActivitySignIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqDoActivitySignIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqDoActivitySignIn.Merge(m, src)
}
func (m *ReqDoActivitySignIn) XXX_Size() int {
	return m.Size()
}
func (m *ReqDoActivitySignIn) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqDoActivitySignIn.DiscardUnknown(m)
}

var xxx_messageInfo_ReqDoActivitySignIn proto.InternalMessageInfo

func (m *ReqDoActivitySignIn) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type ResDoActivitySignIn struct {
	Error                *Error                            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Rewards              []*ResDoActivitySignIn_RewardData `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
	SignInCount          uint32                            `protobuf:"varint,3,opt,name=sign_in_count,json=signInCount,proto3" json:"sign_in_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ResDoActivitySignIn) Reset()         { *m = ResDoActivitySignIn{} }
func (m *ResDoActivitySignIn) String() string { return proto.CompactTextString(m) }
func (*ResDoActivitySignIn) ProtoMessage()    {}
func (*ResDoActivitySignIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{285}
}
func (m *ResDoActivitySignIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResDoActivitySignIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResDoActivitySignIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResDoActivitySignIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResDoActivitySignIn.Merge(m, src)
}
func (m *ResDoActivitySignIn) XXX_Size() int {
	return m.Size()
}
func (m *ResDoActivitySignIn) XXX_DiscardUnknown() {
	xxx_messageInfo_ResDoActivitySignIn.DiscardUnknown(m)
}

var xxx_messageInfo_ResDoActivitySignIn proto.InternalMessageInfo

func (m *ResDoActivitySignIn) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResDoActivitySignIn) GetRewards() []*ResDoActivitySignIn_RewardData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *ResDoActivitySignIn) GetSignInCount() uint32 {
	if m != nil {
		return m.SignInCount
	}
	return 0
}

type ResDoActivitySignIn_RewardData struct {
	ResourceId           uint32   `protobuf:"varint,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResDoActivitySignIn_RewardData) Reset()         { *m = ResDoActivitySignIn_RewardData{} }
func (m *ResDoActivitySignIn_RewardData) String() string { return proto.CompactTextString(m) }
func (*ResDoActivitySignIn_RewardData) ProtoMessage()    {}
func (*ResDoActivitySignIn_RewardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{285, 0}
}
func (m *ResDoActivitySignIn_RewardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResDoActivitySignIn_RewardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResDoActivitySignIn_RewardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResDoActivitySignIn_RewardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResDoActivitySignIn_RewardData.Merge(m, src)
}
func (m *ResDoActivitySignIn_RewardData) XXX_Size() int {
	return m.Size()
}
func (m *ResDoActivitySignIn_RewardData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResDoActivitySignIn_RewardData.DiscardUnknown(m)
}

var xxx_messageInfo_ResDoActivitySignIn_RewardData proto.InternalMessageInfo

func (m *ResDoActivitySignIn_RewardData) GetResourceId() uint32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *ResDoActivitySignIn_RewardData) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResCharacterInfo struct {
	Error                *Error       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Characters           []*Character `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
	Skins                []uint32     `protobuf:"varint,3,rep,packed,name=skins,proto3" json:"skins,omitempty"`
	MainCharacterId      uint32       `protobuf:"varint,4,opt,name=main_character_id,json=mainCharacterId,proto3" json:"main_character_id,omitempty"`
	SendGiftCount        uint32       `protobuf:"varint,5,opt,name=send_gift_count,json=sendGiftCount,proto3" json:"send_gift_count,omitempty"`
	SendGiftLimit        uint32       `protobuf:"varint,6,opt,name=send_gift_limit,json=sendGiftLimit,proto3" json:"send_gift_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResCharacterInfo) Reset()         { *m = ResCharacterInfo{} }
func (m *ResCharacterInfo) String() string { return proto.CompactTextString(m) }
func (*ResCharacterInfo) ProtoMessage()    {}
func (*ResCharacterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{286}
}
func (m *ResCharacterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacterInfo.Merge(m, src)
}
func (m *ResCharacterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacterInfo proto.InternalMessageInfo

func (m *ResCharacterInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCharacterInfo) GetCharacters() []*Character {
	if m != nil {
		return m.Characters
	}
	return nil
}

func (m *ResCharacterInfo) GetSkins() []uint32 {
	if m != nil {
		return m.Skins
	}
	return nil
}

func (m *ResCharacterInfo) GetMainCharacterId() uint32 {
	if m != nil {
		return m.MainCharacterId
	}
	return 0
}

func (m *ResCharacterInfo) GetSendGiftCount() uint32 {
	if m != nil {
		return m.SendGiftCount
	}
	return 0
}

func (m *ResCharacterInfo) GetSendGiftLimit() uint32 {
	if m != nil {
		return m.SendGiftLimit
	}
	return 0
}

type ReqChangeMainCharacter struct {
	CharacterId          uint32   `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeMainCharacter) Reset()         { *m = ReqChangeMainCharacter{} }
func (m *ReqChangeMainCharacter) String() string { return proto.CompactTextString(m) }
func (*ReqChangeMainCharacter) ProtoMessage()    {}
func (*ReqChangeMainCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{287}
}
func (m *ReqChangeMainCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeMainCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeMainCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeMainCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeMainCharacter.Merge(m, src)
}
func (m *ReqChangeMainCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeMainCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeMainCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeMainCharacter proto.InternalMessageInfo

func (m *ReqChangeMainCharacter) GetCharacterId() uint32 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

type ReqChangeCharacterSkin struct {
	CharacterId          uint32   `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Skin                 uint32   `protobuf:"varint,2,opt,name=skin,proto3" json:"skin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeCharacterSkin) Reset()         { *m = ReqChangeCharacterSkin{} }
func (m *ReqChangeCharacterSkin) String() string { return proto.CompactTextString(m) }
func (*ReqChangeCharacterSkin) ProtoMessage()    {}
func (*ReqChangeCharacterSkin) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{288}
}
func (m *ReqChangeCharacterSkin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeCharacterSkin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeCharacterSkin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeCharacterSkin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeCharacterSkin.Merge(m, src)
}
func (m *ReqChangeCharacterSkin) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeCharacterSkin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeCharacterSkin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeCharacterSkin proto.InternalMessageInfo

func (m *ReqChangeCharacterSkin) GetCharacterId() uint32 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

func (m *ReqChangeCharacterSkin) GetSkin() uint32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

type ReqChangeCharacterView struct {
	CharacterId          uint32   `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Slot                 uint32   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	ItemId               uint32   `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeCharacterView) Reset()         { *m = ReqChangeCharacterView{} }
func (m *ReqChangeCharacterView) String() string { return proto.CompactTextString(m) }
func (*ReqChangeCharacterView) ProtoMessage()    {}
func (*ReqChangeCharacterView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{289}
}
func (m *ReqChangeCharacterView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeCharacterView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeCharacterView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeCharacterView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeCharacterView.Merge(m, src)
}
func (m *ReqChangeCharacterView) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeCharacterView) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeCharacterView.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeCharacterView proto.InternalMessageInfo

func (m *ReqChangeCharacterView) GetCharacterId() uint32 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

func (m *ReqChangeCharacterView) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ReqChangeCharacterView) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type ReqSendGiftToCharacter struct {
	CharacterId          uint32                         `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Gifts                []*ReqSendGiftToCharacter_Gift `protobuf:"bytes,2,rep,name=gifts,proto3" json:"gifts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ReqSendGiftToCharacter) Reset()         { *m = ReqSendGiftToCharacter{} }
func (m *ReqSendGiftToCharacter) String() string { return proto.CompactTextString(m) }
func (*ReqSendGiftToCharacter) ProtoMessage()    {}
func (*ReqSendGiftToCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{290}
}
func (m *ReqSendGiftToCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSendGiftToCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSendGiftToCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSendGiftToCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSendGiftToCharacter.Merge(m, src)
}
func (m *ReqSendGiftToCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ReqSendGiftToCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSendGiftToCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSendGiftToCharacter proto.InternalMessageInfo

func (m *ReqSendGiftToCharacter) GetCharacterId() uint32 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

func (m *ReqSendGiftToCharacter) GetGifts() []*ReqSendGiftToCharacter_Gift {
	if m != nil {
		return m.Gifts
	}
	return nil
}

type ReqSendGiftToCharacter_Gift struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSendGiftToCharacter_Gift) Reset()         { *m = ReqSendGiftToCharacter_Gift{} }
func (m *ReqSendGiftToCharacter_Gift) String() string { return proto.CompactTextString(m) }
func (*ReqSendGiftToCharacter_Gift) ProtoMessage()    {}
func (*ReqSendGiftToCharacter_Gift) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{290, 0}
}
func (m *ReqSendGiftToCharacter_Gift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSendGiftToCharacter_Gift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSendGiftToCharacter_Gift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSendGiftToCharacter_Gift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSendGiftToCharacter_Gift.Merge(m, src)
}
func (m *ReqSendGiftToCharacter_Gift) XXX_Size() int {
	return m.Size()
}
func (m *ReqSendGiftToCharacter_Gift) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSendGiftToCharacter_Gift.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSendGiftToCharacter_Gift proto.InternalMessageInfo

func (m *ReqSendGiftToCharacter_Gift) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ReqSendGiftToCharacter_Gift) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResSendGiftToCharacter struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp                  uint32   `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResSendGiftToCharacter) Reset()         { *m = ResSendGiftToCharacter{} }
func (m *ResSendGiftToCharacter) String() string { return proto.CompactTextString(m) }
func (*ResSendGiftToCharacter) ProtoMessage()    {}
func (*ResSendGiftToCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{291}
}
func (m *ResSendGiftToCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResSendGiftToCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResSendGiftToCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResSendGiftToCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSendGiftToCharacter.Merge(m, src)
}
func (m *ResSendGiftToCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ResSendGiftToCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSendGiftToCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ResSendGiftToCharacter proto.InternalMessageInfo

func (m *ResSendGiftToCharacter) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResSendGiftToCharacter) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ResSendGiftToCharacter) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type ReqSellItem struct {
	Sells                []*ReqSellItem_Item `protobuf:"bytes,1,rep,name=sells,proto3" json:"sells,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReqSellItem) Reset()         { *m = ReqSellItem{} }
func (m *ReqSellItem) String() string { return proto.CompactTextString(m) }
func (*ReqSellItem) ProtoMessage()    {}
func (*ReqSellItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{292}
}
func (m *ReqSellItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSellItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSellItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSellItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSellItem.Merge(m, src)
}
func (m *ReqSellItem) XXX_Size() int {
	return m.Size()
}
func (m *ReqSellItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSellItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSellItem proto.InternalMessageInfo

func (m *ReqSellItem) GetSells() []*ReqSellItem_Item {
	if m != nil {
		return m.Sells
	}
	return nil
}

type ReqSellItem_Item struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSellItem_Item) Reset()         { *m = ReqSellItem_Item{} }
func (m *ReqSellItem_Item) String() string { return proto.CompactTextString(m) }
func (*ReqSellItem_Item) ProtoMessage()    {}
func (*ReqSellItem_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{292, 0}
}
func (m *ReqSellItem_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSellItem_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSellItem_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSellItem_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSellItem_Item.Merge(m, src)
}
func (m *ReqSellItem_Item) XXX_Size() int {
	return m.Size()
}
func (m *ReqSellItem_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSellItem_Item.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSellItem_Item proto.InternalMessageInfo

func (m *ReqSellItem_Item) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ReqSellItem_Item) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResCommonView struct {
	Error                *Error                `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Slots                []*ResCommonView_Slot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ResCommonView) Reset()         { *m = ResCommonView{} }
func (m *ResCommonView) String() string { return proto.CompactTextString(m) }
func (*ResCommonView) ProtoMessage()    {}
func (*ResCommonView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{293}
}
func (m *ResCommonView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCommonView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCommonView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCommonView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCommonView.Merge(m, src)
}
func (m *ResCommonView) XXX_Size() int {
	return m.Size()
}
func (m *ResCommonView) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCommonView.DiscardUnknown(m)
}

var xxx_messageInfo_ResCommonView proto.InternalMessageInfo

func (m *ResCommonView) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResCommonView) GetSlots() []*ResCommonView_Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type ResCommonView_Slot struct {
	Slot                 uint32   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCommonView_Slot) Reset()         { *m = ResCommonView_Slot{} }
func (m *ResCommonView_Slot) String() string { return proto.CompactTextString(m) }
func (*ResCommonView_Slot) ProtoMessage()    {}
func (*ResCommonView_Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{293, 0}
}
func (m *ResCommonView_Slot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCommonView_Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCommonView_Slot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCommonView_Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCommonView_Slot.Merge(m, src)
}
func (m *ResCommonView_Slot) XXX_Size() int {
	return m.Size()
}
func (m *ResCommonView_Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCommonView_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_ResCommonView_Slot proto.InternalMessageInfo

func (m *ResCommonView_Slot) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ResCommonView_Slot) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ReqChangeCommonView struct {
	Slot                 uint32   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChangeCommonView) Reset()         { *m = ReqChangeCommonView{} }
func (m *ReqChangeCommonView) String() string { return proto.CompactTextString(m) }
func (*ReqChangeCommonView) ProtoMessage()    {}
func (*ReqChangeCommonView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{294}
}
func (m *ReqChangeCommonView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChangeCommonView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChangeCommonView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChangeCommonView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChangeCommonView.Merge(m, src)
}
func (m *ReqChangeCommonView) XXX_Size() int {
	return m.Size()
}
func (m *ReqChangeCommonView) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChangeCommonView.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChangeCommonView proto.InternalMessageInfo

func (m *ReqChangeCommonView) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ReqChangeCommonView) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ReqUpgradeCharacter struct {
	CharacterId          uint32   `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpgradeCharacter) Reset()         { *m = ReqUpgradeCharacter{} }
func (m *ReqUpgradeCharacter) String() string { return proto.CompactTextString(m) }
func (*ReqUpgradeCharacter) ProtoMessage()    {}
func (*ReqUpgradeCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{295}
}
func (m *ReqUpgradeCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpgradeCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpgradeCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpgradeCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpgradeCharacter.Merge(m, src)
}
func (m *ReqUpgradeCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpgradeCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpgradeCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpgradeCharacter proto.InternalMessageInfo

func (m *ReqUpgradeCharacter) GetCharacterId() uint32 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

type ResUpgradeCharacter struct {
	Error                *Error     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Character            *Character `protobuf:"bytes,2,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ResUpgradeCharacter) Reset()         { *m = ResUpgradeCharacter{} }
func (m *ResUpgradeCharacter) String() string { return proto.CompactTextString(m) }
func (*ResUpgradeCharacter) ProtoMessage()    {}
func (*ResUpgradeCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{296}
}
func (m *ResUpgradeCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResUpgradeCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResUpgradeCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResUpgradeCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUpgradeCharacter.Merge(m, src)
}
func (m *ResUpgradeCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ResUpgradeCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUpgradeCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ResUpgradeCharacter proto.InternalMessageInfo

func (m *ResUpgradeCharacter) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResUpgradeCharacter) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

type ReqGMCommand struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGMCommand) Reset()         { *m = ReqGMCommand{} }
func (m *ReqGMCommand) String() string { return proto.CompactTextString(m) }
func (*ReqGMCommand) ProtoMessage()    {}
func (*ReqGMCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{297}
}
func (m *ReqGMCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGMCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGMCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGMCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGMCommand.Merge(m, src)
}
func (m *ReqGMCommand) XXX_Size() int {
	return m.Size()
}
func (m *ReqGMCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGMCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGMCommand proto.InternalMessageInfo

func (m *ReqGMCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type ResShopInfo struct {
	Error                *Error    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ShopInfo             *ShopInfo `protobuf:"bytes,2,opt,name=shop_info,json=shopInfo,proto3" json:"shop_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResShopInfo) Reset()         { *m = ResShopInfo{} }
func (m *ResShopInfo) String() string { return proto.CompactTextString(m) }
func (*ResShopInfo) ProtoMessage()    {}
func (*ResShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{298}
}
func (m *ResShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResShopInfo.Merge(m, src)
}
func (m *ResShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResShopInfo proto.InternalMessageInfo

func (m *ResShopInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResShopInfo) GetShopInfo() *ShopInfo {
	if m != nil {
		return m.ShopInfo
	}
	return nil
}

type ReqBuyFromShop struct {
	GoodsId              uint32          `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count                uint32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	BillShortCut         []*BillShortcut `protobuf:"bytes,3,rep,name=bill_short_cut,json=billShortCut,proto3" json:"bill_short_cut,omitempty"`
	DealPrice            uint32          `protobuf:"varint,4,opt,name=deal_price,json=dealPrice,proto3" json:"deal_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReqBuyFromShop) Reset()         { *m = ReqBuyFromShop{} }
func (m *ReqBuyFromShop) String() string { return proto.CompactTextString(m) }
func (*ReqBuyFromShop) ProtoMessage()    {}
func (*ReqBuyFromShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{299}
}
func (m *ReqBuyFromShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBuyFromShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBuyFromShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBuyFromShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBuyFromShop.Merge(m, src)
}
func (m *ReqBuyFromShop) XXX_Size() int {
	return m.Size()
}
func (m *ReqBuyFromShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBuyFromShop.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBuyFromShop proto.InternalMessageInfo

func (m *ReqBuyFromShop) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqBuyFromShop) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqBuyFromShop) GetBillShortCut() []*BillShortcut {
	if m != nil {
		return m.BillShortCut
	}
	return nil
}

func (m *ReqBuyFromShop) GetDealPrice() uint32 {
	if m != nil {
		return m.DealPrice
	}
	return 0
}

type ResBuyFromShop struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Rewards              []*RewardSlot `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResBuyFromShop) Reset()         { *m = ResBuyFromShop{} }
func (m *ResBuyFromShop) String() string { return proto.CompactTextString(m) }
func (*ResBuyFromShop) ProtoMessage()    {}
func (*ResBuyFromShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{300}
}
func (m *ResBuyFromShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResBuyFromShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResBuyFromShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResBuyFromShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResBuyFromShop.Merge(m, src)
}
func (m *ResBuyFromShop) XXX_Size() int {
	return m.Size()
}
func (m *ResBuyFromShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ResBuyFromShop.DiscardUnknown(m)
}

var xxx_messageInfo_ResBuyFromShop proto.InternalMessageInfo

func (m *ResBuyFromShop) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResBuyFromShop) GetRewards() []*RewardSlot {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type ReqBuyFromZHP struct {
	GoodsId              uint32   `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBuyFromZHP) Reset()         { *m = ReqBuyFromZHP{} }
func (m *ReqBuyFromZHP) String() string { return proto.CompactTextString(m) }
func (*ReqBuyFromZHP) ProtoMessage()    {}
func (*ReqBuyFromZHP) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{301}
}
func (m *ReqBuyFromZHP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBuyFromZHP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBuyFromZHP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBuyFromZHP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBuyFromZHP.Merge(m, src)
}
func (m *ReqBuyFromZHP) XXX_Size() int {
	return m.Size()
}
func (m *ReqBuyFromZHP) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBuyFromZHP.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBuyFromZHP proto.InternalMessageInfo

func (m *ReqBuyFromZHP) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ReqBuyFromZHP) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqPayMonthTicket struct {
	TicketId             uint32   `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqPayMonthTicket) Reset()         { *m = ReqPayMonthTicket{} }
func (m *ReqPayMonthTicket) String() string { return proto.CompactTextString(m) }
func (*ReqPayMonthTicket) ProtoMessage()    {}
func (*ReqPayMonthTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{302}
}
func (m *ReqPayMonthTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqPayMonthTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqPayMonthTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqPayMonthTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqPayMonthTicket.Merge(m, src)
}
func (m *ReqPayMonthTicket) XXX_Size() int {
	return m.Size()
}
func (m *ReqPayMonthTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqPayMonthTicket.DiscardUnknown(m)
}

var xxx_messageInfo_ReqPayMonthTicket proto.InternalMessageInfo

func (m *ReqPayMonthTicket) GetTicketId() uint32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

type ResPayMonthTicket struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ResourceId           uint32   `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceCount        uint32   `protobuf:"varint,3,opt,name=resource_count,json=resourceCount,proto3" json:"resource_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResPayMonthTicket) Reset()         { *m = ResPayMonthTicket{} }
func (m *ResPayMonthTicket) String() string { return proto.CompactTextString(m) }
func (*ResPayMonthTicket) ProtoMessage()    {}
func (*ResPayMonthTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{303}
}
func (m *ResPayMonthTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResPayMonthTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResPayMonthTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResPayMonthTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResPayMonthTicket.Merge(m, src)
}
func (m *ResPayMonthTicket) XXX_Size() int {
	return m.Size()
}
func (m *ResPayMonthTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_ResPayMonthTicket.DiscardUnknown(m)
}

var xxx_messageInfo_ResPayMonthTicket proto.InternalMessageInfo

func (m *ResPayMonthTicket) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResPayMonthTicket) GetResourceId() uint32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *ResPayMonthTicket) GetResourceCount() uint32 {
	if m != nil {
		return m.ResourceCount
	}
	return 0
}

type ResRefreshZHPShop struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Zhp                  *ZHPShop `protobuf:"bytes,2,opt,name=zhp,proto3" json:"zhp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResRefreshZHPShop) Reset()         { *m = ResRefreshZHPShop{} }
func (m *ResRefreshZHPShop) String() string { return proto.CompactTextString(m) }
func (*ResRefreshZHPShop) ProtoMessage()    {}
func (*ResRefreshZHPShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{304}
}
func (m *ResRefreshZHPShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResRefreshZHPShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResRefreshZHPShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResRefreshZHPShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResRefreshZHPShop.Merge(m, src)
}
func (m *ResRefreshZHPShop) XXX_Size() int {
	return m.Size()
}
func (m *ResRefreshZHPShop) XXX_DiscardUnknown() {
	xxx_messageInfo_ResRefreshZHPShop.DiscardUnknown(m)
}

var xxx_messageInfo_ResRefreshZHPShop proto.InternalMessageInfo

func (m *ResRefreshZHPShop) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResRefreshZHPShop) GetZhp() *ZHPShop {
	if m != nil {
		return m.Zhp
	}
	return nil
}

type ResMonthTicketInfo struct {
	MonthTicketInfo      []*MonthTicketInfo `protobuf:"bytes,1,rep,name=month_ticket_info,json=monthTicketInfo,proto3" json:"month_ticket_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ResMonthTicketInfo) Reset()         { *m = ResMonthTicketInfo{} }
func (m *ResMonthTicketInfo) String() string { return proto.CompactTextString(m) }
func (*ResMonthTicketInfo) ProtoMessage()    {}
func (*ResMonthTicketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{305}
}
func (m *ResMonthTicketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMonthTicketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMonthTicketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMonthTicketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMonthTicketInfo.Merge(m, src)
}
func (m *ResMonthTicketInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResMonthTicketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMonthTicketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResMonthTicketInfo proto.InternalMessageInfo

func (m *ResMonthTicketInfo) GetMonthTicketInfo() []*MonthTicketInfo {
	if m != nil {
		return m.MonthTicketInfo
	}
	return nil
}

type ReqExchangeCurrency struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqExchangeCurrency) Reset()         { *m = ReqExchangeCurrency{} }
func (m *ReqExchangeCurrency) String() string { return proto.CompactTextString(m) }
func (*ReqExchangeCurrency) ProtoMessage()    {}
func (*ReqExchangeCurrency) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{306}
}
func (m *ReqExchangeCurrency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqExchangeCurrency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqExchangeCurrency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqExchangeCurrency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqExchangeCurrency.Merge(m, src)
}
func (m *ReqExchangeCurrency) XXX_Size() int {
	return m.Size()
}
func (m *ReqExchangeCurrency) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqExchangeCurrency.DiscardUnknown(m)
}

var xxx_messageInfo_ReqExchangeCurrency proto.InternalMessageInfo

func (m *ReqExchangeCurrency) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqExchangeCurrency) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResServerSettings struct {
	Settings             *ServerSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResServerSettings) Reset()         { *m = ResServerSettings{} }
func (m *ResServerSettings) String() string { return proto.CompactTextString(m) }
func (*ResServerSettings) ProtoMessage()    {}
func (*ResServerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{307}
}
func (m *ResServerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResServerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResServerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResServerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResServerSettings.Merge(m, src)
}
func (m *ResServerSettings) XXX_Size() int {
	return m.Size()
}
func (m *ResServerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ResServerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ResServerSettings proto.InternalMessageInfo

func (m *ResServerSettings) GetSettings() *ServerSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type ResAccountSettings struct {
	Error                *Error            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Settings             []*AccountSetting `protobuf:"bytes,2,rep,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResAccountSettings) Reset()         { *m = ResAccountSettings{} }
func (m *ResAccountSettings) String() string { return proto.CompactTextString(m) }
func (*ResAccountSettings) ProtoMessage()    {}
func (*ResAccountSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{308}
}
func (m *ResAccountSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountSettings.Merge(m, src)
}
func (m *ResAccountSettings) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountSettings proto.InternalMessageInfo

func (m *ResAccountSettings) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAccountSettings) GetSettings() []*AccountSetting {
	if m != nil {
		return m.Settings
	}
	return nil
}

type ReqUpdateAccountSettings struct {
	Setting              *AccountSetting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReqUpdateAccountSettings) Reset()         { *m = ReqUpdateAccountSettings{} }
func (m *ReqUpdateAccountSettings) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateAccountSettings) ProtoMessage()    {}
func (*ReqUpdateAccountSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{309}
}
func (m *ReqUpdateAccountSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdateAccountSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdateAccountSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdateAccountSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateAccountSettings.Merge(m, src)
}
func (m *ReqUpdateAccountSettings) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdateAccountSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateAccountSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateAccountSettings proto.InternalMessageInfo

func (m *ReqUpdateAccountSettings) GetSetting() *AccountSetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

type ResModNicknameTime struct {
	LastModTime          uint32   `protobuf:"varint,1,opt,name=last_mod_time,json=lastModTime,proto3" json:"last_mod_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResModNicknameTime) Reset()         { *m = ResModNicknameTime{} }
func (m *ResModNicknameTime) String() string { return proto.CompactTextString(m) }
func (*ResModNicknameTime) ProtoMessage()    {}
func (*ResModNicknameTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{310}
}
func (m *ResModNicknameTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResModNicknameTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResModNicknameTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResModNicknameTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResModNicknameTime.Merge(m, src)
}
func (m *ResModNicknameTime) XXX_Size() int {
	return m.Size()
}
func (m *ResModNicknameTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ResModNicknameTime.DiscardUnknown(m)
}

var xxx_messageInfo_ResModNicknameTime proto.InternalMessageInfo

func (m *ResModNicknameTime) GetLastModTime() uint32 {
	if m != nil {
		return m.LastModTime
	}
	return 0
}

type ResMisc struct {
	Error                *Error       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RechargedList        []uint32     `protobuf:"varint,2,rep,packed,name=recharged_list,json=rechargedList,proto3" json:"recharged_list,omitempty"`
	Faiths               []*FaithData `protobuf:"bytes,3,rep,name=faiths,proto3" json:"faiths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResMisc) Reset()         { *m = ResMisc{} }
func (m *ResMisc) String() string { return proto.CompactTextString(m) }
func (*ResMisc) ProtoMessage()    {}
func (*ResMisc) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{311}
}
func (m *ResMisc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMisc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMisc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMisc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMisc.Merge(m, src)
}
func (m *ResMisc) XXX_Size() int {
	return m.Size()
}
func (m *ResMisc) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMisc.DiscardUnknown(m)
}

var xxx_messageInfo_ResMisc proto.InternalMessageInfo

func (m *ResMisc) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResMisc) GetRechargedList() []uint32 {
	if m != nil {
		return m.RechargedList
	}
	return nil
}

func (m *ResMisc) GetFaiths() []*FaithData {
	if m != nil {
		return m.Faiths
	}
	return nil
}

type ReqModifySignature struct {
	Signature            string   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqModifySignature) Reset()         { *m = ReqModifySignature{} }
func (m *ReqModifySignature) String() string { return proto.CompactTextString(m) }
func (*ReqModifySignature) ProtoMessage()    {}
func (*ReqModifySignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{312}
}
func (m *ReqModifySignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqModifySignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqModifySignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqModifySignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqModifySignature.Merge(m, src)
}
func (m *ReqModifySignature) XXX_Size() int {
	return m.Size()
}
func (m *ReqModifySignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqModifySignature.DiscardUnknown(m)
}

var xxx_messageInfo_ReqModifySignature proto.InternalMessageInfo

func (m *ReqModifySignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type ResIDCardInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	IsAuthed             bool     `protobuf:"varint,2,opt,name=is_authed,json=isAuthed,proto3" json:"is_authed,omitempty"`
	Country              string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResIDCardInfo) Reset()         { *m = ResIDCardInfo{} }
func (m *ResIDCardInfo) String() string { return proto.CompactTextString(m) }
func (*ResIDCardInfo) ProtoMessage()    {}
func (*ResIDCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{313}
}
func (m *ResIDCardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResIDCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResIDCardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResIDCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResIDCardInfo.Merge(m, src)
}
func (m *ResIDCardInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResIDCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResIDCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResIDCardInfo proto.InternalMessageInfo

func (m *ResIDCardInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResIDCardInfo) GetIsAuthed() bool {
	if m != nil {
		return m.IsAuthed
	}
	return false
}

func (m *ResIDCardInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type ReqUpdateIDCardInfo struct {
	Fullname             string   `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	CardNo               string   `protobuf:"bytes,2,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpdateIDCardInfo) Reset()         { *m = ReqUpdateIDCardInfo{} }
func (m *ReqUpdateIDCardInfo) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateIDCardInfo) ProtoMessage()    {}
func (*ReqUpdateIDCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{314}
}
func (m *ReqUpdateIDCardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUpdateIDCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUpdateIDCardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUpdateIDCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateIDCardInfo.Merge(m, src)
}
func (m *ReqUpdateIDCardInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqUpdateIDCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateIDCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateIDCardInfo proto.InternalMessageInfo

func (m *ReqUpdateIDCardInfo) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *ReqUpdateIDCardInfo) GetCardNo() string {
	if m != nil {
		return m.CardNo
	}
	return ""
}

type ResVipReward struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	GainedVipLevels      []uint32 `protobuf:"varint,2,rep,packed,name=gained_vip_levels,json=gainedVipLevels,proto3" json:"gained_vip_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResVipReward) Reset()         { *m = ResVipReward{} }
func (m *ResVipReward) String() string { return proto.CompactTextString(m) }
func (*ResVipReward) ProtoMessage()    {}
func (*ResVipReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{315}
}
func (m *ResVipReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResVipReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResVipReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResVipReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResVipReward.Merge(m, src)
}
func (m *ResVipReward) XXX_Size() int {
	return m.Size()
}
func (m *ResVipReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ResVipReward.DiscardUnknown(m)
}

var xxx_messageInfo_ResVipReward proto.InternalMessageInfo

func (m *ResVipReward) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResVipReward) GetGainedVipLevels() []uint32 {
	if m != nil {
		return m.GainedVipLevels
	}
	return nil
}

type ReqGainVipReward struct {
	VipLevel             uint32   `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGainVipReward) Reset()         { *m = ReqGainVipReward{} }
func (m *ReqGainVipReward) String() string { return proto.CompactTextString(m) }
func (*ReqGainVipReward) ProtoMessage()    {}
func (*ReqGainVipReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{316}
}
func (m *ReqGainVipReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGainVipReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGainVipReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGainVipReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGainVipReward.Merge(m, src)
}
func (m *ReqGainVipReward) XXX_Size() int {
	return m.Size()
}
func (m *ReqGainVipReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGainVipReward.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGainVipReward proto.InternalMessageInfo

func (m *ReqGainVipReward) GetVipLevel() uint32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

type ReqFetchCustomizedContestList struct {
	Start                uint32   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCustomizedContestList) Reset()         { *m = ReqFetchCustomizedContestList{} }
func (m *ReqFetchCustomizedContestList) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCustomizedContestList) ProtoMessage()    {}
func (*ReqFetchCustomizedContestList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{317}
}
func (m *ReqFetchCustomizedContestList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCustomizedContestList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCustomizedContestList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCustomizedContestList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCustomizedContestList.Merge(m, src)
}
func (m *ReqFetchCustomizedContestList) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCustomizedContestList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCustomizedContestList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCustomizedContestList proto.InternalMessageInfo

func (m *ReqFetchCustomizedContestList) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqFetchCustomizedContestList) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResFetchCustomizedContestList struct {
	Error                *Error                   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Contests             []*CustomizedContestBase `protobuf:"bytes,2,rep,name=contests,proto3" json:"contests,omitempty"`
	FollowContests       []*CustomizedContestBase `protobuf:"bytes,3,rep,name=follow_contests,json=followContests,proto3" json:"follow_contests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ResFetchCustomizedContestList) Reset()         { *m = ResFetchCustomizedContestList{} }
func (m *ResFetchCustomizedContestList) String() string { return proto.CompactTextString(m) }
func (*ResFetchCustomizedContestList) ProtoMessage()    {}
func (*ResFetchCustomizedContestList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{318}
}
func (m *ResFetchCustomizedContestList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCustomizedContestList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCustomizedContestList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCustomizedContestList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCustomizedContestList.Merge(m, src)
}
func (m *ResFetchCustomizedContestList) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCustomizedContestList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCustomizedContestList.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCustomizedContestList proto.InternalMessageInfo

func (m *ResFetchCustomizedContestList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCustomizedContestList) GetContests() []*CustomizedContestBase {
	if m != nil {
		return m.Contests
	}
	return nil
}

func (m *ResFetchCustomizedContestList) GetFollowContests() []*CustomizedContestBase {
	if m != nil {
		return m.FollowContests
	}
	return nil
}

type ReqFetchCustomizedContestExtendInfo struct {
	UidList              []uint32 `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCustomizedContestExtendInfo) Reset()         { *m = ReqFetchCustomizedContestExtendInfo{} }
func (m *ReqFetchCustomizedContestExtendInfo) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCustomizedContestExtendInfo) ProtoMessage()    {}
func (*ReqFetchCustomizedContestExtendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{319}
}
func (m *ReqFetchCustomizedContestExtendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCustomizedContestExtendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCustomizedContestExtendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCustomizedContestExtendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCustomizedContestExtendInfo.Merge(m, src)
}
func (m *ReqFetchCustomizedContestExtendInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCustomizedContestExtendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCustomizedContestExtendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCustomizedContestExtendInfo proto.InternalMessageInfo

func (m *ReqFetchCustomizedContestExtendInfo) GetUidList() []uint32 {
	if m != nil {
		return m.UidList
	}
	return nil
}

type ResFetchCustomizedContestExtendInfo struct {
	Error                *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ExtendList           []*CustomizedContestExtend `protobuf:"bytes,2,rep,name=extend_list,json=extendList,proto3" json:"extend_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ResFetchCustomizedContestExtendInfo) Reset()         { *m = ResFetchCustomizedContestExtendInfo{} }
func (m *ResFetchCustomizedContestExtendInfo) String() string { return proto.CompactTextString(m) }
func (*ResFetchCustomizedContestExtendInfo) ProtoMessage()    {}
func (*ResFetchCustomizedContestExtendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{320}
}
func (m *ResFetchCustomizedContestExtendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCustomizedContestExtendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCustomizedContestExtendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCustomizedContestExtendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCustomizedContestExtendInfo.Merge(m, src)
}
func (m *ResFetchCustomizedContestExtendInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCustomizedContestExtendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCustomizedContestExtendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCustomizedContestExtendInfo proto.InternalMessageInfo

func (m *ResFetchCustomizedContestExtendInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCustomizedContestExtendInfo) GetExtendList() []*CustomizedContestExtend {
	if m != nil {
		return m.ExtendList
	}
	return nil
}

type ReqEnterCustomizedContest struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqEnterCustomizedContest) Reset()         { *m = ReqEnterCustomizedContest{} }
func (m *ReqEnterCustomizedContest) String() string { return proto.CompactTextString(m) }
func (*ReqEnterCustomizedContest) ProtoMessage()    {}
func (*ReqEnterCustomizedContest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{321}
}
func (m *ReqEnterCustomizedContest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqEnterCustomizedContest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqEnterCustomizedContest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqEnterCustomizedContest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqEnterCustomizedContest.Merge(m, src)
}
func (m *ReqEnterCustomizedContest) XXX_Size() int {
	return m.Size()
}
func (m *ReqEnterCustomizedContest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqEnterCustomizedContest.DiscardUnknown(m)
}

var xxx_messageInfo_ReqEnterCustomizedContest proto.InternalMessageInfo

func (m *ReqEnterCustomizedContest) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type ResEnterCustomizedContest struct {
	Error                *Error                         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	DetailInfo           *CustomizedContestDetail       `protobuf:"bytes,2,opt,name=detail_info,json=detailInfo,proto3" json:"detail_info,omitempty"`
	PlayerReport         *CustomizedContestPlayerReport `protobuf:"bytes,3,opt,name=player_report,json=playerReport,proto3" json:"player_report,omitempty"`
	IsFollowed           bool                           `protobuf:"varint,4,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ResEnterCustomizedContest) Reset()         { *m = ResEnterCustomizedContest{} }
func (m *ResEnterCustomizedContest) String() string { return proto.CompactTextString(m) }
func (*ResEnterCustomizedContest) ProtoMessage()    {}
func (*ResEnterCustomizedContest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{322}
}
func (m *ResEnterCustomizedContest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResEnterCustomizedContest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResEnterCustomizedContest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResEnterCustomizedContest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResEnterCustomizedContest.Merge(m, src)
}
func (m *ResEnterCustomizedContest) XXX_Size() int {
	return m.Size()
}
func (m *ResEnterCustomizedContest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResEnterCustomizedContest.DiscardUnknown(m)
}

var xxx_messageInfo_ResEnterCustomizedContest proto.InternalMessageInfo

func (m *ResEnterCustomizedContest) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResEnterCustomizedContest) GetDetailInfo() *CustomizedContestDetail {
	if m != nil {
		return m.DetailInfo
	}
	return nil
}

func (m *ResEnterCustomizedContest) GetPlayerReport() *CustomizedContestPlayerReport {
	if m != nil {
		return m.PlayerReport
	}
	return nil
}

func (m *ResEnterCustomizedContest) GetIsFollowed() bool {
	if m != nil {
		return m.IsFollowed
	}
	return false
}

type ReqFetchCustomizedContestOnlineInfo struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCustomizedContestOnlineInfo) Reset()         { *m = ReqFetchCustomizedContestOnlineInfo{} }
func (m *ReqFetchCustomizedContestOnlineInfo) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCustomizedContestOnlineInfo) ProtoMessage()    {}
func (*ReqFetchCustomizedContestOnlineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{323}
}
func (m *ReqFetchCustomizedContestOnlineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCustomizedContestOnlineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCustomizedContestOnlineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCustomizedContestOnlineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCustomizedContestOnlineInfo.Merge(m, src)
}
func (m *ReqFetchCustomizedContestOnlineInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCustomizedContestOnlineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCustomizedContestOnlineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCustomizedContestOnlineInfo proto.InternalMessageInfo

func (m *ReqFetchCustomizedContestOnlineInfo) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type ResFetchCustomizedContestOnlineInfo struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OnlinePlayer         uint32   `protobuf:"varint,2,opt,name=online_player,json=onlinePlayer,proto3" json:"online_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResFetchCustomizedContestOnlineInfo) Reset()         { *m = ResFetchCustomizedContestOnlineInfo{} }
func (m *ResFetchCustomizedContestOnlineInfo) String() string { return proto.CompactTextString(m) }
func (*ResFetchCustomizedContestOnlineInfo) ProtoMessage()    {}
func (*ResFetchCustomizedContestOnlineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{324}
}
func (m *ResFetchCustomizedContestOnlineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCustomizedContestOnlineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCustomizedContestOnlineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCustomizedContestOnlineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCustomizedContestOnlineInfo.Merge(m, src)
}
func (m *ResFetchCustomizedContestOnlineInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCustomizedContestOnlineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCustomizedContestOnlineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCustomizedContestOnlineInfo proto.InternalMessageInfo

func (m *ResFetchCustomizedContestOnlineInfo) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCustomizedContestOnlineInfo) GetOnlinePlayer() uint32 {
	if m != nil {
		return m.OnlinePlayer
	}
	return 0
}

type ReqFetchCustomizedContestByContestId struct {
	ContestId            uint32   `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCustomizedContestByContestId) Reset()         { *m = ReqFetchCustomizedContestByContestId{} }
func (m *ReqFetchCustomizedContestByContestId) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCustomizedContestByContestId) ProtoMessage()    {}
func (*ReqFetchCustomizedContestByContestId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{325}
}
func (m *ReqFetchCustomizedContestByContestId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCustomizedContestByContestId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCustomizedContestByContestId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCustomizedContestByContestId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCustomizedContestByContestId.Merge(m, src)
}
func (m *ReqFetchCustomizedContestByContestId) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCustomizedContestByContestId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCustomizedContestByContestId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCustomizedContestByContestId proto.InternalMessageInfo

func (m *ReqFetchCustomizedContestByContestId) GetContestId() uint32 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

type ResFetchCustomizedContestByContestId struct {
	Error                *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ContestInfo          *CustomizedContestAbstract `protobuf:"bytes,2,opt,name=contest_info,json=contestInfo,proto3" json:"contest_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ResFetchCustomizedContestByContestId) Reset()         { *m = ResFetchCustomizedContestByContestId{} }
func (m *ResFetchCustomizedContestByContestId) String() string { return proto.CompactTextString(m) }
func (*ResFetchCustomizedContestByContestId) ProtoMessage()    {}
func (*ResFetchCustomizedContestByContestId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{326}
}
func (m *ResFetchCustomizedContestByContestId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCustomizedContestByContestId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCustomizedContestByContestId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCustomizedContestByContestId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCustomizedContestByContestId.Merge(m, src)
}
func (m *ResFetchCustomizedContestByContestId) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCustomizedContestByContestId) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCustomizedContestByContestId.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCustomizedContestByContestId proto.InternalMessageInfo

func (m *ResFetchCustomizedContestByContestId) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCustomizedContestByContestId) GetContestInfo() *CustomizedContestAbstract {
	if m != nil {
		return m.ContestInfo
	}
	return nil
}

type ReqStartCustomizedContest struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqStartCustomizedContest) Reset()         { *m = ReqStartCustomizedContest{} }
func (m *ReqStartCustomizedContest) String() string { return proto.CompactTextString(m) }
func (*ReqStartCustomizedContest) ProtoMessage()    {}
func (*ReqStartCustomizedContest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{327}
}
func (m *ReqStartCustomizedContest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqStartCustomizedContest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqStartCustomizedContest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqStartCustomizedContest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqStartCustomizedContest.Merge(m, src)
}
func (m *ReqStartCustomizedContest) XXX_Size() int {
	return m.Size()
}
func (m *ReqStartCustomizedContest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqStartCustomizedContest.DiscardUnknown(m)
}

var xxx_messageInfo_ReqStartCustomizedContest proto.InternalMessageInfo

func (m *ReqStartCustomizedContest) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type ReqJoinCustomizedContestChatRoom struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqJoinCustomizedContestChatRoom) Reset()         { *m = ReqJoinCustomizedContestChatRoom{} }
func (m *ReqJoinCustomizedContestChatRoom) String() string { return proto.CompactTextString(m) }
func (*ReqJoinCustomizedContestChatRoom) ProtoMessage()    {}
func (*ReqJoinCustomizedContestChatRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{328}
}
func (m *ReqJoinCustomizedContestChatRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqJoinCustomizedContestChatRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqJoinCustomizedContestChatRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqJoinCustomizedContestChatRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqJoinCustomizedContestChatRoom.Merge(m, src)
}
func (m *ReqJoinCustomizedContestChatRoom) XXX_Size() int {
	return m.Size()
}
func (m *ReqJoinCustomizedContestChatRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqJoinCustomizedContestChatRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ReqJoinCustomizedContestChatRoom proto.InternalMessageInfo

func (m *ReqJoinCustomizedContestChatRoom) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type ResJoinCustomizedContestChatRoom struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ChatHistory          [][]byte `protobuf:"bytes,2,rep,name=chat_history,json=chatHistory,proto3" json:"chat_history,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResJoinCustomizedContestChatRoom) Reset()         { *m = ResJoinCustomizedContestChatRoom{} }
func (m *ResJoinCustomizedContestChatRoom) String() string { return proto.CompactTextString(m) }
func (*ResJoinCustomizedContestChatRoom) ProtoMessage()    {}
func (*ResJoinCustomizedContestChatRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{329}
}
func (m *ResJoinCustomizedContestChatRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResJoinCustomizedContestChatRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResJoinCustomizedContestChatRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResJoinCustomizedContestChatRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResJoinCustomizedContestChatRoom.Merge(m, src)
}
func (m *ResJoinCustomizedContestChatRoom) XXX_Size() int {
	return m.Size()
}
func (m *ResJoinCustomizedContestChatRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_ResJoinCustomizedContestChatRoom.DiscardUnknown(m)
}

var xxx_messageInfo_ResJoinCustomizedContestChatRoom proto.InternalMessageInfo

func (m *ResJoinCustomizedContestChatRoom) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResJoinCustomizedContestChatRoom) GetChatHistory() [][]byte {
	if m != nil {
		return m.ChatHistory
	}
	return nil
}

type ReqSayChatMessage struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSayChatMessage) Reset()         { *m = ReqSayChatMessage{} }
func (m *ReqSayChatMessage) String() string { return proto.CompactTextString(m) }
func (*ReqSayChatMessage) ProtoMessage()    {}
func (*ReqSayChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{330}
}
func (m *ReqSayChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSayChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSayChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSayChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSayChatMessage.Merge(m, src)
}
func (m *ReqSayChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqSayChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSayChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSayChatMessage proto.InternalMessageInfo

func (m *ReqSayChatMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ReqFetchCustomizedContestGameLiveList struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCustomizedContestGameLiveList) Reset()         { *m = ReqFetchCustomizedContestGameLiveList{} }
func (m *ReqFetchCustomizedContestGameLiveList) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCustomizedContestGameLiveList) ProtoMessage()    {}
func (*ReqFetchCustomizedContestGameLiveList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{331}
}
func (m *ReqFetchCustomizedContestGameLiveList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCustomizedContestGameLiveList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCustomizedContestGameLiveList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCustomizedContestGameLiveList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCustomizedContestGameLiveList.Merge(m, src)
}
func (m *ReqFetchCustomizedContestGameLiveList) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCustomizedContestGameLiveList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCustomizedContestGameLiveList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCustomizedContestGameLiveList proto.InternalMessageInfo

func (m *ReqFetchCustomizedContestGameLiveList) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type ResFetchCustomizedContestGameLiveList struct {
	Error                *Error          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	LiveList             []*GameLiveHead `protobuf:"bytes,2,rep,name=live_list,json=liveList,proto3" json:"live_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResFetchCustomizedContestGameLiveList) Reset()         { *m = ResFetchCustomizedContestGameLiveList{} }
func (m *ResFetchCustomizedContestGameLiveList) String() string { return proto.CompactTextString(m) }
func (*ResFetchCustomizedContestGameLiveList) ProtoMessage()    {}
func (*ResFetchCustomizedContestGameLiveList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{332}
}
func (m *ResFetchCustomizedContestGameLiveList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCustomizedContestGameLiveList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCustomizedContestGameLiveList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCustomizedContestGameLiveList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCustomizedContestGameLiveList.Merge(m, src)
}
func (m *ResFetchCustomizedContestGameLiveList) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCustomizedContestGameLiveList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCustomizedContestGameLiveList.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCustomizedContestGameLiveList proto.InternalMessageInfo

func (m *ResFetchCustomizedContestGameLiveList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCustomizedContestGameLiveList) GetLiveList() []*GameLiveHead {
	if m != nil {
		return m.LiveList
	}
	return nil
}

type ReqFetchCustomizedContestGameRecords struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	LastIndex            uint32   `protobuf:"varint,2,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchCustomizedContestGameRecords) Reset()         { *m = ReqFetchCustomizedContestGameRecords{} }
func (m *ReqFetchCustomizedContestGameRecords) String() string { return proto.CompactTextString(m) }
func (*ReqFetchCustomizedContestGameRecords) ProtoMessage()    {}
func (*ReqFetchCustomizedContestGameRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{333}
}
func (m *ReqFetchCustomizedContestGameRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchCustomizedContestGameRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchCustomizedContestGameRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchCustomizedContestGameRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchCustomizedContestGameRecords.Merge(m, src)
}
func (m *ReqFetchCustomizedContestGameRecords) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchCustomizedContestGameRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchCustomizedContestGameRecords.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchCustomizedContestGameRecords proto.InternalMessageInfo

func (m *ReqFetchCustomizedContestGameRecords) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *ReqFetchCustomizedContestGameRecords) GetLastIndex() uint32 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

type ResFetchCustomizedContestGameRecords struct {
	Error                *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	NextIndex            uint32        `protobuf:"varint,2,opt,name=next_index,json=nextIndex,proto3" json:"next_index,omitempty"`
	RecordList           []*RecordGame `protobuf:"bytes,3,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResFetchCustomizedContestGameRecords) Reset()         { *m = ResFetchCustomizedContestGameRecords{} }
func (m *ResFetchCustomizedContestGameRecords) String() string { return proto.CompactTextString(m) }
func (*ResFetchCustomizedContestGameRecords) ProtoMessage()    {}
func (*ResFetchCustomizedContestGameRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{334}
}
func (m *ResFetchCustomizedContestGameRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchCustomizedContestGameRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchCustomizedContestGameRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchCustomizedContestGameRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchCustomizedContestGameRecords.Merge(m, src)
}
func (m *ResFetchCustomizedContestGameRecords) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchCustomizedContestGameRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchCustomizedContestGameRecords.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchCustomizedContestGameRecords proto.InternalMessageInfo

func (m *ResFetchCustomizedContestGameRecords) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchCustomizedContestGameRecords) GetNextIndex() uint32 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

func (m *ResFetchCustomizedContestGameRecords) GetRecordList() []*RecordGame {
	if m != nil {
		return m.RecordList
	}
	return nil
}

type ReqTargetCustomizedContest struct {
	UniqueId             uint32   `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqTargetCustomizedContest) Reset()         { *m = ReqTargetCustomizedContest{} }
func (m *ReqTargetCustomizedContest) String() string { return proto.CompactTextString(m) }
func (*ReqTargetCustomizedContest) ProtoMessage()    {}
func (*ReqTargetCustomizedContest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{335}
}
func (m *ReqTargetCustomizedContest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqTargetCustomizedContest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqTargetCustomizedContest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqTargetCustomizedContest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqTargetCustomizedContest.Merge(m, src)
}
func (m *ReqTargetCustomizedContest) XXX_Size() int {
	return m.Size()
}
func (m *ReqTargetCustomizedContest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqTargetCustomizedContest.DiscardUnknown(m)
}

var xxx_messageInfo_ReqTargetCustomizedContest proto.InternalMessageInfo

func (m *ReqTargetCustomizedContest) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type ResActivityList struct {
	Error                *Error      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Activities           []*Activity `protobuf:"bytes,2,rep,name=activities,proto3" json:"activities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResActivityList) Reset()         { *m = ResActivityList{} }
func (m *ResActivityList) String() string { return proto.CompactTextString(m) }
func (*ResActivityList) ProtoMessage()    {}
func (*ResActivityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{336}
}
func (m *ResActivityList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResActivityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResActivityList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResActivityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResActivityList.Merge(m, src)
}
func (m *ResActivityList) XXX_Size() int {
	return m.Size()
}
func (m *ResActivityList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResActivityList.DiscardUnknown(m)
}

var xxx_messageInfo_ResActivityList proto.InternalMessageInfo

func (m *ResActivityList) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResActivityList) GetActivities() []*Activity {
	if m != nil {
		return m.Activities
	}
	return nil
}

type ResAccountActivityData struct {
	Error                *Error                                       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ExchangeRecords      []*ExchangeRecord                            `protobuf:"bytes,2,rep,name=exchange_records,json=exchangeRecords,proto3" json:"exchange_records,omitempty"`
	TaskProgressList     []*TaskProgress                              `protobuf:"bytes,3,rep,name=task_progress_list,json=taskProgressList,proto3" json:"task_progress_list,omitempty"`
	AccumulatedPointList []*ActivityAccumulatedPointData              `protobuf:"bytes,4,rep,name=accumulated_point_list,json=accumulatedPointList,proto3" json:"accumulated_point_list,omitempty"`
	RankDataList         []*ActivityRankPointData                     `protobuf:"bytes,5,rep,name=rank_data_list,json=rankDataList,proto3" json:"rank_data_list,omitempty"`
	FlipTaskProgressList []*TaskProgress                              `protobuf:"bytes,6,rep,name=flip_task_progress_list,json=flipTaskProgressList,proto3" json:"flip_task_progress_list,omitempty"`
	SignInData           []*ResAccountActivityData_ActivitySignInData `protobuf:"bytes,7,rep,name=sign_in_data,json=signInData,proto3" json:"sign_in_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ResAccountActivityData) Reset()         { *m = ResAccountActivityData{} }
func (m *ResAccountActivityData) String() string { return proto.CompactTextString(m) }
func (*ResAccountActivityData) ProtoMessage()    {}
func (*ResAccountActivityData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{337}
}
func (m *ResAccountActivityData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountActivityData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountActivityData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountActivityData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountActivityData.Merge(m, src)
}
func (m *ResAccountActivityData) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountActivityData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountActivityData.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountActivityData proto.InternalMessageInfo

func (m *ResAccountActivityData) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAccountActivityData) GetExchangeRecords() []*ExchangeRecord {
	if m != nil {
		return m.ExchangeRecords
	}
	return nil
}

func (m *ResAccountActivityData) GetTaskProgressList() []*TaskProgress {
	if m != nil {
		return m.TaskProgressList
	}
	return nil
}

func (m *ResAccountActivityData) GetAccumulatedPointList() []*ActivityAccumulatedPointData {
	if m != nil {
		return m.AccumulatedPointList
	}
	return nil
}

func (m *ResAccountActivityData) GetRankDataList() []*ActivityRankPointData {
	if m != nil {
		return m.RankDataList
	}
	return nil
}

func (m *ResAccountActivityData) GetFlipTaskProgressList() []*TaskProgress {
	if m != nil {
		return m.FlipTaskProgressList
	}
	return nil
}

func (m *ResAccountActivityData) GetSignInData() []*ResAccountActivityData_ActivitySignInData {
	if m != nil {
		return m.SignInData
	}
	return nil
}

type ResAccountActivityData_ActivitySignInData struct {
	ActivityId           uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	SignInCount          uint32   `protobuf:"varint,2,opt,name=sign_in_count,json=signInCount,proto3" json:"sign_in_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResAccountActivityData_ActivitySignInData) Reset() {
	*m = ResAccountActivityData_ActivitySignInData{}
}
func (m *ResAccountActivityData_ActivitySignInData) String() string { return proto.CompactTextString(m) }
func (*ResAccountActivityData_ActivitySignInData) ProtoMessage()    {}
func (*ResAccountActivityData_ActivitySignInData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{337, 0}
}
func (m *ResAccountActivityData_ActivitySignInData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAccountActivityData_ActivitySignInData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAccountActivityData_ActivitySignInData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAccountActivityData_ActivitySignInData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAccountActivityData_ActivitySignInData.Merge(m, src)
}
func (m *ResAccountActivityData_ActivitySignInData) XXX_Size() int {
	return m.Size()
}
func (m *ResAccountActivityData_ActivitySignInData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAccountActivityData_ActivitySignInData.DiscardUnknown(m)
}

var xxx_messageInfo_ResAccountActivityData_ActivitySignInData proto.InternalMessageInfo

func (m *ResAccountActivityData_ActivitySignInData) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ResAccountActivityData_ActivitySignInData) GetSignInCount() uint32 {
	if m != nil {
		return m.SignInCount
	}
	return 0
}

type ReqExchangeActivityItem struct {
	ExchangeId           uint32   `protobuf:"varint,1,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqExchangeActivityItem) Reset()         { *m = ReqExchangeActivityItem{} }
func (m *ReqExchangeActivityItem) String() string { return proto.CompactTextString(m) }
func (*ReqExchangeActivityItem) ProtoMessage()    {}
func (*ReqExchangeActivityItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{338}
}
func (m *ReqExchangeActivityItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqExchangeActivityItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqExchangeActivityItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqExchangeActivityItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqExchangeActivityItem.Merge(m, src)
}
func (m *ReqExchangeActivityItem) XXX_Size() int {
	return m.Size()
}
func (m *ReqExchangeActivityItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqExchangeActivityItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReqExchangeActivityItem proto.InternalMessageInfo

func (m *ReqExchangeActivityItem) GetExchangeId() uint32 {
	if m != nil {
		return m.ExchangeId
	}
	return 0
}

type ResExchangeActivityItem struct {
	Error                *Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ExecuteReward        []*ExecuteReward `protobuf:"bytes,2,rep,name=execute_reward,json=executeReward,proto3" json:"execute_reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ResExchangeActivityItem) Reset()         { *m = ResExchangeActivityItem{} }
func (m *ResExchangeActivityItem) String() string { return proto.CompactTextString(m) }
func (*ResExchangeActivityItem) ProtoMessage()    {}
func (*ResExchangeActivityItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{339}
}
func (m *ResExchangeActivityItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResExchangeActivityItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResExchangeActivityItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResExchangeActivityItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResExchangeActivityItem.Merge(m, src)
}
func (m *ResExchangeActivityItem) XXX_Size() int {
	return m.Size()
}
func (m *ResExchangeActivityItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ResExchangeActivityItem.DiscardUnknown(m)
}

var xxx_messageInfo_ResExchangeActivityItem proto.InternalMessageInfo

func (m *ResExchangeActivityItem) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResExchangeActivityItem) GetExecuteReward() []*ExecuteReward {
	if m != nil {
		return m.ExecuteReward
	}
	return nil
}

type ReqCompleteActivityTask struct {
	TaskId               uint32   `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCompleteActivityTask) Reset()         { *m = ReqCompleteActivityTask{} }
func (m *ReqCompleteActivityTask) String() string { return proto.CompactTextString(m) }
func (*ReqCompleteActivityTask) ProtoMessage()    {}
func (*ReqCompleteActivityTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{340}
}
func (m *ReqCompleteActivityTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCompleteActivityTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCompleteActivityTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCompleteActivityTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCompleteActivityTask.Merge(m, src)
}
func (m *ReqCompleteActivityTask) XXX_Size() int {
	return m.Size()
}
func (m *ReqCompleteActivityTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCompleteActivityTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCompleteActivityTask proto.InternalMessageInfo

func (m *ReqCompleteActivityTask) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type ReqRecieveActivityFlipTask struct {
	TaskId               uint32   `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRecieveActivityFlipTask) Reset()         { *m = ReqRecieveActivityFlipTask{} }
func (m *ReqRecieveActivityFlipTask) String() string { return proto.CompactTextString(m) }
func (*ReqRecieveActivityFlipTask) ProtoMessage()    {}
func (*ReqRecieveActivityFlipTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{341}
}
func (m *ReqRecieveActivityFlipTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRecieveActivityFlipTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRecieveActivityFlipTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRecieveActivityFlipTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRecieveActivityFlipTask.Merge(m, src)
}
func (m *ReqRecieveActivityFlipTask) XXX_Size() int {
	return m.Size()
}
func (m *ReqRecieveActivityFlipTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRecieveActivityFlipTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRecieveActivityFlipTask proto.InternalMessageInfo

func (m *ReqRecieveActivityFlipTask) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type ResRecieveActivityFlipTask struct {
	Count                uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResRecieveActivityFlipTask) Reset()         { *m = ResRecieveActivityFlipTask{} }
func (m *ResRecieveActivityFlipTask) String() string { return proto.CompactTextString(m) }
func (*ResRecieveActivityFlipTask) ProtoMessage()    {}
func (*ResRecieveActivityFlipTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{342}
}
func (m *ResRecieveActivityFlipTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResRecieveActivityFlipTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResRecieveActivityFlipTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResRecieveActivityFlipTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResRecieveActivityFlipTask.Merge(m, src)
}
func (m *ResRecieveActivityFlipTask) XXX_Size() int {
	return m.Size()
}
func (m *ResRecieveActivityFlipTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ResRecieveActivityFlipTask.DiscardUnknown(m)
}

var xxx_messageInfo_ResRecieveActivityFlipTask proto.InternalMessageInfo

func (m *ResRecieveActivityFlipTask) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqFetchActivityFlipInfo struct {
	ActivityId           uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchActivityFlipInfo) Reset()         { *m = ReqFetchActivityFlipInfo{} }
func (m *ReqFetchActivityFlipInfo) String() string { return proto.CompactTextString(m) }
func (*ReqFetchActivityFlipInfo) ProtoMessage()    {}
func (*ReqFetchActivityFlipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{343}
}
func (m *ReqFetchActivityFlipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchActivityFlipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchActivityFlipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchActivityFlipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchActivityFlipInfo.Merge(m, src)
}
func (m *ReqFetchActivityFlipInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchActivityFlipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchActivityFlipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchActivityFlipInfo proto.InternalMessageInfo

func (m *ReqFetchActivityFlipInfo) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type ResFetchActivityFlipInfo struct {
	Rewards              []uint32 `protobuf:"varint,1,rep,packed,name=rewards,proto3" json:"rewards,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResFetchActivityFlipInfo) Reset()         { *m = ResFetchActivityFlipInfo{} }
func (m *ResFetchActivityFlipInfo) String() string { return proto.CompactTextString(m) }
func (*ResFetchActivityFlipInfo) ProtoMessage()    {}
func (*ResFetchActivityFlipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{344}
}
func (m *ResFetchActivityFlipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchActivityFlipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchActivityFlipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchActivityFlipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchActivityFlipInfo.Merge(m, src)
}
func (m *ResFetchActivityFlipInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchActivityFlipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchActivityFlipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchActivityFlipInfo proto.InternalMessageInfo

func (m *ResFetchActivityFlipInfo) GetRewards() []uint32 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *ResFetchActivityFlipInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqGainAccumulatedPointActivityReward struct {
	ActivityId           uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RewardId             uint32   `protobuf:"varint,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGainAccumulatedPointActivityReward) Reset()         { *m = ReqGainAccumulatedPointActivityReward{} }
func (m *ReqGainAccumulatedPointActivityReward) String() string { return proto.CompactTextString(m) }
func (*ReqGainAccumulatedPointActivityReward) ProtoMessage()    {}
func (*ReqGainAccumulatedPointActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{345}
}
func (m *ReqGainAccumulatedPointActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGainAccumulatedPointActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGainAccumulatedPointActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGainAccumulatedPointActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGainAccumulatedPointActivityReward.Merge(m, src)
}
func (m *ReqGainAccumulatedPointActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *ReqGainAccumulatedPointActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGainAccumulatedPointActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGainAccumulatedPointActivityReward proto.InternalMessageInfo

func (m *ReqGainAccumulatedPointActivityReward) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ReqGainAccumulatedPointActivityReward) GetRewardId() uint32 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

type ReqFetchRankPointLeaderboard struct {
	LeaderboardId        uint32   `protobuf:"varint,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqFetchRankPointLeaderboard) Reset()         { *m = ReqFetchRankPointLeaderboard{} }
func (m *ReqFetchRankPointLeaderboard) String() string { return proto.CompactTextString(m) }
func (*ReqFetchRankPointLeaderboard) ProtoMessage()    {}
func (*ReqFetchRankPointLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{346}
}
func (m *ReqFetchRankPointLeaderboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFetchRankPointLeaderboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFetchRankPointLeaderboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFetchRankPointLeaderboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFetchRankPointLeaderboard.Merge(m, src)
}
func (m *ReqFetchRankPointLeaderboard) XXX_Size() int {
	return m.Size()
}
func (m *ReqFetchRankPointLeaderboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFetchRankPointLeaderboard.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFetchRankPointLeaderboard proto.InternalMessageInfo

func (m *ReqFetchRankPointLeaderboard) GetLeaderboardId() uint32 {
	if m != nil {
		return m.LeaderboardId
	}
	return 0
}

type ResFetchRankPointLeaderboard struct {
	Error                *Error                               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Items                []*ResFetchRankPointLeaderboard_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	LastRefreshTime      uint32                               `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ResFetchRankPointLeaderboard) Reset()         { *m = ResFetchRankPointLeaderboard{} }
func (m *ResFetchRankPointLeaderboard) String() string { return proto.CompactTextString(m) }
func (*ResFetchRankPointLeaderboard) ProtoMessage()    {}
func (*ResFetchRankPointLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{347}
}
func (m *ResFetchRankPointLeaderboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchRankPointLeaderboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchRankPointLeaderboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchRankPointLeaderboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchRankPointLeaderboard.Merge(m, src)
}
func (m *ResFetchRankPointLeaderboard) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchRankPointLeaderboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchRankPointLeaderboard.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchRankPointLeaderboard proto.InternalMessageInfo

func (m *ResFetchRankPointLeaderboard) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResFetchRankPointLeaderboard) GetItems() []*ResFetchRankPointLeaderboard_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ResFetchRankPointLeaderboard) GetLastRefreshTime() uint32 {
	if m != nil {
		return m.LastRefreshTime
	}
	return 0
}

type ResFetchRankPointLeaderboard_Item struct {
	AccountId            uint32          `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Rank                 uint32          `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	View                 *PlayerBaseView `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
	Point                uint32          `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResFetchRankPointLeaderboard_Item) Reset()         { *m = ResFetchRankPointLeaderboard_Item{} }
func (m *ResFetchRankPointLeaderboard_Item) String() string { return proto.CompactTextString(m) }
func (*ResFetchRankPointLeaderboard_Item) ProtoMessage()    {}
func (*ResFetchRankPointLeaderboard_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{347, 0}
}
func (m *ResFetchRankPointLeaderboard_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResFetchRankPointLeaderboard_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResFetchRankPointLeaderboard_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResFetchRankPointLeaderboard_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFetchRankPointLeaderboard_Item.Merge(m, src)
}
func (m *ResFetchRankPointLeaderboard_Item) XXX_Size() int {
	return m.Size()
}
func (m *ResFetchRankPointLeaderboard_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFetchRankPointLeaderboard_Item.DiscardUnknown(m)
}

var xxx_messageInfo_ResFetchRankPointLeaderboard_Item proto.InternalMessageInfo

func (m *ResFetchRankPointLeaderboard_Item) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ResFetchRankPointLeaderboard_Item) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *ResFetchRankPointLeaderboard_Item) GetView() *PlayerBaseView {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *ResFetchRankPointLeaderboard_Item) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

type ReqGainRankPointReward struct {
	LeaderboardId        uint32   `protobuf:"varint,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	ActivityId           uint32   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGainRankPointReward) Reset()         { *m = ReqGainRankPointReward{} }
func (m *ReqGainRankPointReward) String() string { return proto.CompactTextString(m) }
func (*ReqGainRankPointReward) ProtoMessage()    {}
func (*ReqGainRankPointReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{348}
}
func (m *ReqGainRankPointReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGainRankPointReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGainRankPointReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGainRankPointReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGainRankPointReward.Merge(m, src)
}
func (m *ReqGainRankPointReward) XXX_Size() int {
	return m.Size()
}
func (m *ReqGainRankPointReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGainRankPointReward.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGainRankPointReward proto.InternalMessageInfo

func (m *ReqGainRankPointReward) GetLeaderboardId() uint32 {
	if m != nil {
		return m.LeaderboardId
	}
	return 0
}

func (m *ReqGainRankPointReward) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type ActionMJStart struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionMJStart) Reset()         { *m = ActionMJStart{} }
func (m *ActionMJStart) String() string { return proto.CompactTextString(m) }
func (*ActionMJStart) ProtoMessage()    {}
func (*ActionMJStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{349}
}
func (m *ActionMJStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionMJStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionMJStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionMJStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionMJStart.Merge(m, src)
}
func (m *ActionMJStart) XXX_Size() int {
	return m.Size()
}
func (m *ActionMJStart) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionMJStart.DiscardUnknown(m)
}

var xxx_messageInfo_ActionMJStart proto.InternalMessageInfo

type ActionNewRound struct {
	Chang                uint32                 `protobuf:"varint,1,opt,name=chang,proto3" json:"chang,omitempty"`
	Ju                   uint32                 `protobuf:"varint,2,opt,name=ju,proto3" json:"ju,omitempty"`
	Ben                  uint32                 `protobuf:"varint,3,opt,name=ben,proto3" json:"ben,omitempty"`
	Tiles                []string               `protobuf:"bytes,4,rep,name=tiles,proto3" json:"tiles,omitempty"`
	Dora                 string                 `protobuf:"bytes,5,opt,name=dora,proto3" json:"dora,omitempty"`
	Scores               []int32                `protobuf:"varint,6,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,7,opt,name=operation,proto3" json:"operation,omitempty"`
	Liqibang             uint32                 `protobuf:"varint,8,opt,name=liqibang,proto3" json:"liqibang,omitempty"`
	Tingpais0            []*TingPaiDiscardInfo  `protobuf:"bytes,9,rep,name=tingpais0,proto3" json:"tingpais0,omitempty"`
	Tingpais1            []*TingPaiInfo         `protobuf:"bytes,10,rep,name=tingpais1,proto3" json:"tingpais1,omitempty"`
	Al                   bool                   `protobuf:"varint,11,opt,name=al,proto3" json:"al,omitempty"`
	Md5                  string                 `protobuf:"bytes,12,opt,name=md5,proto3" json:"md5,omitempty"`
	LeftTileCount        uint32                 `protobuf:"varint,13,opt,name=left_tile_count,json=leftTileCount,proto3" json:"left_tile_count,omitempty"`
	Doras                []string               `protobuf:"bytes,14,rep,name=doras,proto3" json:"doras,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ActionNewRound) Reset()         { *m = ActionNewRound{} }
func (m *ActionNewRound) String() string { return proto.CompactTextString(m) }
func (*ActionNewRound) ProtoMessage()    {}
func (*ActionNewRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{350}
}
func (m *ActionNewRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionNewRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionNewRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionNewRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionNewRound.Merge(m, src)
}
func (m *ActionNewRound) XXX_Size() int {
	return m.Size()
}
func (m *ActionNewRound) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionNewRound.DiscardUnknown(m)
}

var xxx_messageInfo_ActionNewRound proto.InternalMessageInfo

func (m *ActionNewRound) GetChang() uint32 {
	if m != nil {
		return m.Chang
	}
	return 0
}

func (m *ActionNewRound) GetJu() uint32 {
	if m != nil {
		return m.Ju
	}
	return 0
}

func (m *ActionNewRound) GetBen() uint32 {
	if m != nil {
		return m.Ben
	}
	return 0
}

func (m *ActionNewRound) GetTiles() []string {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *ActionNewRound) GetDora() string {
	if m != nil {
		return m.Dora
	}
	return ""
}

func (m *ActionNewRound) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ActionNewRound) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *ActionNewRound) GetLiqibang() uint32 {
	if m != nil {
		return m.Liqibang
	}
	return 0
}

func (m *ActionNewRound) GetTingpais0() []*TingPaiDiscardInfo {
	if m != nil {
		return m.Tingpais0
	}
	return nil
}

func (m *ActionNewRound) GetTingpais1() []*TingPaiInfo {
	if m != nil {
		return m.Tingpais1
	}
	return nil
}

func (m *ActionNewRound) GetAl() bool {
	if m != nil {
		return m.Al
	}
	return false
}

func (m *ActionNewRound) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *ActionNewRound) GetLeftTileCount() uint32 {
	if m != nil {
		return m.LeftTileCount
	}
	return 0
}

func (m *ActionNewRound) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

type RecordNewRound struct {
	Chang                uint32                    `protobuf:"varint,1,opt,name=chang,proto3" json:"chang,omitempty"`
	Ju                   uint32                    `protobuf:"varint,2,opt,name=ju,proto3" json:"ju,omitempty"`
	Ben                  uint32                    `protobuf:"varint,3,opt,name=ben,proto3" json:"ben,omitempty"`
	Dora                 string                    `protobuf:"bytes,4,opt,name=dora,proto3" json:"dora,omitempty"`
	Scores               []int32                   `protobuf:"varint,5,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Liqibang             uint32                    `protobuf:"varint,6,opt,name=liqibang,proto3" json:"liqibang,omitempty"`
	Tiles0               []string                  `protobuf:"bytes,7,rep,name=tiles0,proto3" json:"tiles0,omitempty"`
	Tiles1               []string                  `protobuf:"bytes,8,rep,name=tiles1,proto3" json:"tiles1,omitempty"`
	Tiles2               []string                  `protobuf:"bytes,9,rep,name=tiles2,proto3" json:"tiles2,omitempty"`
	Tiles3               []string                  `protobuf:"bytes,10,rep,name=tiles3,proto3" json:"tiles3,omitempty"`
	Tingpai              []*RecordNewRound_TingPai `protobuf:"bytes,11,rep,name=tingpai,proto3" json:"tingpai,omitempty"`
	Operation            *OptionalOperationList    `protobuf:"bytes,12,opt,name=operation,proto3" json:"operation,omitempty"`
	Md5                  string                    `protobuf:"bytes,13,opt,name=md5,proto3" json:"md5,omitempty"`
	Paishan              string                    `protobuf:"bytes,14,opt,name=paishan,proto3" json:"paishan,omitempty"`
	LeftTileCount        uint32                    `protobuf:"varint,15,opt,name=left_tile_count,json=leftTileCount,proto3" json:"left_tile_count,omitempty"`
	Doras                []string                  `protobuf:"bytes,16,rep,name=doras,proto3" json:"doras,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RecordNewRound) Reset()         { *m = RecordNewRound{} }
func (m *RecordNewRound) String() string { return proto.CompactTextString(m) }
func (*RecordNewRound) ProtoMessage()    {}
func (*RecordNewRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{351}
}
func (m *RecordNewRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordNewRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordNewRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordNewRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordNewRound.Merge(m, src)
}
func (m *RecordNewRound) XXX_Size() int {
	return m.Size()
}
func (m *RecordNewRound) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordNewRound.DiscardUnknown(m)
}

var xxx_messageInfo_RecordNewRound proto.InternalMessageInfo

func (m *RecordNewRound) GetChang() uint32 {
	if m != nil {
		return m.Chang
	}
	return 0
}

func (m *RecordNewRound) GetJu() uint32 {
	if m != nil {
		return m.Ju
	}
	return 0
}

func (m *RecordNewRound) GetBen() uint32 {
	if m != nil {
		return m.Ben
	}
	return 0
}

func (m *RecordNewRound) GetDora() string {
	if m != nil {
		return m.Dora
	}
	return ""
}

func (m *RecordNewRound) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *RecordNewRound) GetLiqibang() uint32 {
	if m != nil {
		return m.Liqibang
	}
	return 0
}

func (m *RecordNewRound) GetTiles0() []string {
	if m != nil {
		return m.Tiles0
	}
	return nil
}

func (m *RecordNewRound) GetTiles1() []string {
	if m != nil {
		return m.Tiles1
	}
	return nil
}

func (m *RecordNewRound) GetTiles2() []string {
	if m != nil {
		return m.Tiles2
	}
	return nil
}

func (m *RecordNewRound) GetTiles3() []string {
	if m != nil {
		return m.Tiles3
	}
	return nil
}

func (m *RecordNewRound) GetTingpai() []*RecordNewRound_TingPai {
	if m != nil {
		return m.Tingpai
	}
	return nil
}

func (m *RecordNewRound) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *RecordNewRound) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *RecordNewRound) GetPaishan() string {
	if m != nil {
		return m.Paishan
	}
	return ""
}

func (m *RecordNewRound) GetLeftTileCount() uint32 {
	if m != nil {
		return m.LeftTileCount
	}
	return 0
}

func (m *RecordNewRound) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

type RecordNewRound_TingPai struct {
	Seat                 uint32         `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Tingpais1            []*TingPaiInfo `protobuf:"bytes,2,rep,name=tingpais1,proto3" json:"tingpais1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RecordNewRound_TingPai) Reset()         { *m = RecordNewRound_TingPai{} }
func (m *RecordNewRound_TingPai) String() string { return proto.CompactTextString(m) }
func (*RecordNewRound_TingPai) ProtoMessage()    {}
func (*RecordNewRound_TingPai) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{351, 0}
}
func (m *RecordNewRound_TingPai) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordNewRound_TingPai) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordNewRound_TingPai.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordNewRound_TingPai) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordNewRound_TingPai.Merge(m, src)
}
func (m *RecordNewRound_TingPai) XXX_Size() int {
	return m.Size()
}
func (m *RecordNewRound_TingPai) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordNewRound_TingPai.DiscardUnknown(m)
}

var xxx_messageInfo_RecordNewRound_TingPai proto.InternalMessageInfo

func (m *RecordNewRound_TingPai) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordNewRound_TingPai) GetTingpais1() []*TingPaiInfo {
	if m != nil {
		return m.Tingpais1
	}
	return nil
}

type GameSnapshot struct {
	Chang                uint32                         `protobuf:"varint,1,opt,name=chang,proto3" json:"chang,omitempty"`
	Ju                   uint32                         `protobuf:"varint,2,opt,name=ju,proto3" json:"ju,omitempty"`
	Ben                  uint32                         `protobuf:"varint,3,opt,name=ben,proto3" json:"ben,omitempty"`
	IndexPlayer          uint32                         `protobuf:"varint,4,opt,name=index_player,json=indexPlayer,proto3" json:"index_player,omitempty"`
	LeftTileCount        uint32                         `protobuf:"varint,5,opt,name=left_tile_count,json=leftTileCount,proto3" json:"left_tile_count,omitempty"`
	Hands                []string                       `protobuf:"bytes,6,rep,name=hands,proto3" json:"hands,omitempty"`
	Doras                []string                       `protobuf:"bytes,7,rep,name=doras,proto3" json:"doras,omitempty"`
	Liqibang             uint32                         `protobuf:"varint,8,opt,name=liqibang,proto3" json:"liqibang,omitempty"`
	Players              []*GameSnapshot_PlayerSnapshot `protobuf:"bytes,9,rep,name=players,proto3" json:"players,omitempty"`
	Zhenting             bool                           `protobuf:"varint,10,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GameSnapshot) Reset()         { *m = GameSnapshot{} }
func (m *GameSnapshot) String() string { return proto.CompactTextString(m) }
func (*GameSnapshot) ProtoMessage()    {}
func (*GameSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{352}
}
func (m *GameSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSnapshot.Merge(m, src)
}
func (m *GameSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GameSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GameSnapshot proto.InternalMessageInfo

func (m *GameSnapshot) GetChang() uint32 {
	if m != nil {
		return m.Chang
	}
	return 0
}

func (m *GameSnapshot) GetJu() uint32 {
	if m != nil {
		return m.Ju
	}
	return 0
}

func (m *GameSnapshot) GetBen() uint32 {
	if m != nil {
		return m.Ben
	}
	return 0
}

func (m *GameSnapshot) GetIndexPlayer() uint32 {
	if m != nil {
		return m.IndexPlayer
	}
	return 0
}

func (m *GameSnapshot) GetLeftTileCount() uint32 {
	if m != nil {
		return m.LeftTileCount
	}
	return 0
}

func (m *GameSnapshot) GetHands() []string {
	if m != nil {
		return m.Hands
	}
	return nil
}

func (m *GameSnapshot) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *GameSnapshot) GetLiqibang() uint32 {
	if m != nil {
		return m.Liqibang
	}
	return 0
}

func (m *GameSnapshot) GetPlayers() []*GameSnapshot_PlayerSnapshot {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameSnapshot) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

type GameSnapshot_PlayerSnapshot struct {
	Score                int32                               `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Liqiposition         int32                               `protobuf:"varint,2,opt,name=liqiposition,proto3" json:"liqiposition,omitempty"`
	Tilenum              uint32                              `protobuf:"varint,3,opt,name=tilenum,proto3" json:"tilenum,omitempty"`
	Qipais               []string                            `protobuf:"bytes,4,rep,name=qipais,proto3" json:"qipais,omitempty"`
	Mings                []*GameSnapshot_PlayerSnapshot_Fulu `protobuf:"bytes,5,rep,name=mings,proto3" json:"mings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GameSnapshot_PlayerSnapshot) Reset()         { *m = GameSnapshot_PlayerSnapshot{} }
func (m *GameSnapshot_PlayerSnapshot) String() string { return proto.CompactTextString(m) }
func (*GameSnapshot_PlayerSnapshot) ProtoMessage()    {}
func (*GameSnapshot_PlayerSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{352, 0}
}
func (m *GameSnapshot_PlayerSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameSnapshot_PlayerSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameSnapshot_PlayerSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameSnapshot_PlayerSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSnapshot_PlayerSnapshot.Merge(m, src)
}
func (m *GameSnapshot_PlayerSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GameSnapshot_PlayerSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSnapshot_PlayerSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GameSnapshot_PlayerSnapshot proto.InternalMessageInfo

func (m *GameSnapshot_PlayerSnapshot) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameSnapshot_PlayerSnapshot) GetLiqiposition() int32 {
	if m != nil {
		return m.Liqiposition
	}
	return 0
}

func (m *GameSnapshot_PlayerSnapshot) GetTilenum() uint32 {
	if m != nil {
		return m.Tilenum
	}
	return 0
}

func (m *GameSnapshot_PlayerSnapshot) GetQipais() []string {
	if m != nil {
		return m.Qipais
	}
	return nil
}

func (m *GameSnapshot_PlayerSnapshot) GetMings() []*GameSnapshot_PlayerSnapshot_Fulu {
	if m != nil {
		return m.Mings
	}
	return nil
}

type GameSnapshot_PlayerSnapshot_Fulu struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Tile                 []string `protobuf:"bytes,2,rep,name=tile,proto3" json:"tile,omitempty"`
	From                 []uint32 `protobuf:"varint,3,rep,packed,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) Reset()         { *m = GameSnapshot_PlayerSnapshot_Fulu{} }
func (m *GameSnapshot_PlayerSnapshot_Fulu) String() string { return proto.CompactTextString(m) }
func (*GameSnapshot_PlayerSnapshot_Fulu) ProtoMessage()    {}
func (*GameSnapshot_PlayerSnapshot_Fulu) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{352, 0, 0}
}
func (m *GameSnapshot_PlayerSnapshot_Fulu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameSnapshot_PlayerSnapshot_Fulu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameSnapshot_PlayerSnapshot_Fulu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameSnapshot_PlayerSnapshot_Fulu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSnapshot_PlayerSnapshot_Fulu.Merge(m, src)
}
func (m *GameSnapshot_PlayerSnapshot_Fulu) XXX_Size() int {
	return m.Size()
}
func (m *GameSnapshot_PlayerSnapshot_Fulu) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSnapshot_PlayerSnapshot_Fulu.DiscardUnknown(m)
}

var xxx_messageInfo_GameSnapshot_PlayerSnapshot_Fulu proto.InternalMessageInfo

func (m *GameSnapshot_PlayerSnapshot_Fulu) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) GetTile() []string {
	if m != nil {
		return m.Tile
	}
	return nil
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) GetFrom() []uint32 {
	if m != nil {
		return m.From
	}
	return nil
}

type ActionPrototype struct {
	Step                 uint32   `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionPrototype) Reset()         { *m = ActionPrototype{} }
func (m *ActionPrototype) String() string { return proto.CompactTextString(m) }
func (*ActionPrototype) ProtoMessage()    {}
func (*ActionPrototype) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{353}
}
func (m *ActionPrototype) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionPrototype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionPrototype.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionPrototype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionPrototype.Merge(m, src)
}
func (m *ActionPrototype) XXX_Size() int {
	return m.Size()
}
func (m *ActionPrototype) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionPrototype.DiscardUnknown(m)
}

var xxx_messageInfo_ActionPrototype proto.InternalMessageInfo

func (m *ActionPrototype) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *ActionPrototype) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionPrototype) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GameDetailRecords struct {
	Records              [][]byte `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameDetailRecords) Reset()         { *m = GameDetailRecords{} }
func (m *GameDetailRecords) String() string { return proto.CompactTextString(m) }
func (*GameDetailRecords) ProtoMessage()    {}
func (*GameDetailRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{354}
}
func (m *GameDetailRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameDetailRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameDetailRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameDetailRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameDetailRecords.Merge(m, src)
}
func (m *GameDetailRecords) XXX_Size() int {
	return m.Size()
}
func (m *GameDetailRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_GameDetailRecords.DiscardUnknown(m)
}

var xxx_messageInfo_GameDetailRecords proto.InternalMessageInfo

func (m *GameDetailRecords) GetRecords() [][]byte {
	if m != nil {
		return m.Records
	}
	return nil
}

type OptionalOperation struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Combination          []string `protobuf:"bytes,2,rep,name=combination,proto3" json:"combination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionalOperation) Reset()         { *m = OptionalOperation{} }
func (m *OptionalOperation) String() string { return proto.CompactTextString(m) }
func (*OptionalOperation) ProtoMessage()    {}
func (*OptionalOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{355}
}
func (m *OptionalOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionalOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionalOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionalOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionalOperation.Merge(m, src)
}
func (m *OptionalOperation) XXX_Size() int {
	return m.Size()
}
func (m *OptionalOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionalOperation.DiscardUnknown(m)
}

var xxx_messageInfo_OptionalOperation proto.InternalMessageInfo

func (m *OptionalOperation) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OptionalOperation) GetCombination() []string {
	if m != nil {
		return m.Combination
	}
	return nil
}

type OptionalOperationList struct {
	Seat                 uint32               `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	OperationList        []*OptionalOperation `protobuf:"bytes,2,rep,name=operation_list,json=operationList,proto3" json:"operation_list,omitempty"`
	TimeAdd              uint32               `protobuf:"varint,4,opt,name=time_add,json=timeAdd,proto3" json:"time_add,omitempty"`
	TimeFixed            uint32               `protobuf:"varint,5,opt,name=time_fixed,json=timeFixed,proto3" json:"time_fixed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OptionalOperationList) Reset()         { *m = OptionalOperationList{} }
func (m *OptionalOperationList) String() string { return proto.CompactTextString(m) }
func (*OptionalOperationList) ProtoMessage()    {}
func (*OptionalOperationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{356}
}
func (m *OptionalOperationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionalOperationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionalOperationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionalOperationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionalOperationList.Merge(m, src)
}
func (m *OptionalOperationList) XXX_Size() int {
	return m.Size()
}
func (m *OptionalOperationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionalOperationList.DiscardUnknown(m)
}

var xxx_messageInfo_OptionalOperationList proto.InternalMessageInfo

func (m *OptionalOperationList) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *OptionalOperationList) GetOperationList() []*OptionalOperation {
	if m != nil {
		return m.OperationList
	}
	return nil
}

func (m *OptionalOperationList) GetTimeAdd() uint32 {
	if m != nil {
		return m.TimeAdd
	}
	return 0
}

func (m *OptionalOperationList) GetTimeFixed() uint32 {
	if m != nil {
		return m.TimeFixed
	}
	return 0
}

type LiQiSuccess struct {
	Seat                 uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Liqibang             uint32   `protobuf:"varint,3,opt,name=liqibang,proto3" json:"liqibang,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiQiSuccess) Reset()         { *m = LiQiSuccess{} }
func (m *LiQiSuccess) String() string { return proto.CompactTextString(m) }
func (*LiQiSuccess) ProtoMessage()    {}
func (*LiQiSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{357}
}
func (m *LiQiSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiQiSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiQiSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiQiSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiQiSuccess.Merge(m, src)
}
func (m *LiQiSuccess) XXX_Size() int {
	return m.Size()
}
func (m *LiQiSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_LiQiSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_LiQiSuccess proto.InternalMessageInfo

func (m *LiQiSuccess) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *LiQiSuccess) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *LiQiSuccess) GetLiqibang() uint32 {
	if m != nil {
		return m.Liqibang
	}
	return 0
}

type FanInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Val                  uint32   `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
	Id                   uint32   `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FanInfo) Reset()         { *m = FanInfo{} }
func (m *FanInfo) String() string { return proto.CompactTextString(m) }
func (*FanInfo) ProtoMessage()    {}
func (*FanInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{358}
}
func (m *FanInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FanInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FanInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FanInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FanInfo.Merge(m, src)
}
func (m *FanInfo) XXX_Size() int {
	return m.Size()
}
func (m *FanInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FanInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FanInfo proto.InternalMessageInfo

func (m *FanInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FanInfo) GetVal() uint32 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (m *FanInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HuleInfo struct {
	Hand                 []string   `protobuf:"bytes,1,rep,name=hand,proto3" json:"hand,omitempty"`
	Ming                 []string   `protobuf:"bytes,2,rep,name=ming,proto3" json:"ming,omitempty"`
	HuTile               string     `protobuf:"bytes,3,opt,name=hu_tile,json=huTile,proto3" json:"hu_tile,omitempty"`
	Seat                 uint32     `protobuf:"varint,4,opt,name=seat,proto3" json:"seat,omitempty"`
	Zimo                 bool       `protobuf:"varint,5,opt,name=zimo,proto3" json:"zimo,omitempty"`
	Qinjia               bool       `protobuf:"varint,6,opt,name=qinjia,proto3" json:"qinjia,omitempty"`
	Liqi                 bool       `protobuf:"varint,7,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Doras                []string   `protobuf:"bytes,8,rep,name=doras,proto3" json:"doras,omitempty"`
	LiDoras              []string   `protobuf:"bytes,9,rep,name=li_doras,json=liDoras,proto3" json:"li_doras,omitempty"`
	Yiman                bool       `protobuf:"varint,10,opt,name=yiman,proto3" json:"yiman,omitempty"`
	Count                uint32     `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	Fans                 []*FanInfo `protobuf:"bytes,12,rep,name=fans,proto3" json:"fans,omitempty"`
	Fu                   uint32     `protobuf:"varint,13,opt,name=fu,proto3" json:"fu,omitempty"`
	Title                string     `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	PointRong            uint32     `protobuf:"varint,15,opt,name=point_rong,json=pointRong,proto3" json:"point_rong,omitempty"`
	PointZimoQin         uint32     `protobuf:"varint,16,opt,name=point_zimo_qin,json=pointZimoQin,proto3" json:"point_zimo_qin,omitempty"`
	PointZimoXian        uint32     `protobuf:"varint,17,opt,name=point_zimo_xian,json=pointZimoXian,proto3" json:"point_zimo_xian,omitempty"`
	TitleId              uint32     `protobuf:"varint,18,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	PointSum             uint32     `protobuf:"varint,19,opt,name=point_sum,json=pointSum,proto3" json:"point_sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HuleInfo) Reset()         { *m = HuleInfo{} }
func (m *HuleInfo) String() string { return proto.CompactTextString(m) }
func (*HuleInfo) ProtoMessage()    {}
func (*HuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{359}
}
func (m *HuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuleInfo.Merge(m, src)
}
func (m *HuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *HuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HuleInfo proto.InternalMessageInfo

func (m *HuleInfo) GetHand() []string {
	if m != nil {
		return m.Hand
	}
	return nil
}

func (m *HuleInfo) GetMing() []string {
	if m != nil {
		return m.Ming
	}
	return nil
}

func (m *HuleInfo) GetHuTile() string {
	if m != nil {
		return m.HuTile
	}
	return ""
}

func (m *HuleInfo) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *HuleInfo) GetZimo() bool {
	if m != nil {
		return m.Zimo
	}
	return false
}

func (m *HuleInfo) GetQinjia() bool {
	if m != nil {
		return m.Qinjia
	}
	return false
}

func (m *HuleInfo) GetLiqi() bool {
	if m != nil {
		return m.Liqi
	}
	return false
}

func (m *HuleInfo) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *HuleInfo) GetLiDoras() []string {
	if m != nil {
		return m.LiDoras
	}
	return nil
}

func (m *HuleInfo) GetYiman() bool {
	if m != nil {
		return m.Yiman
	}
	return false
}

func (m *HuleInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HuleInfo) GetFans() []*FanInfo {
	if m != nil {
		return m.Fans
	}
	return nil
}

func (m *HuleInfo) GetFu() uint32 {
	if m != nil {
		return m.Fu
	}
	return 0
}

func (m *HuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HuleInfo) GetPointRong() uint32 {
	if m != nil {
		return m.PointRong
	}
	return 0
}

func (m *HuleInfo) GetPointZimoQin() uint32 {
	if m != nil {
		return m.PointZimoQin
	}
	return 0
}

func (m *HuleInfo) GetPointZimoXian() uint32 {
	if m != nil {
		return m.PointZimoXian
	}
	return 0
}

func (m *HuleInfo) GetTitleId() uint32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

func (m *HuleInfo) GetPointSum() uint32 {
	if m != nil {
		return m.PointSum
	}
	return 0
}

type TingPaiInfo struct {
	Tile                 string   `protobuf:"bytes,1,opt,name=tile,proto3" json:"tile,omitempty"`
	Haveyi               bool     `protobuf:"varint,2,opt,name=haveyi,proto3" json:"haveyi,omitempty"`
	Yiman                bool     `protobuf:"varint,3,opt,name=yiman,proto3" json:"yiman,omitempty"`
	Count                uint32   `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Fu                   uint32   `protobuf:"varint,5,opt,name=fu,proto3" json:"fu,omitempty"`
	BiaoDoraCount        uint32   `protobuf:"varint,6,opt,name=biao_dora_count,json=biaoDoraCount,proto3" json:"biao_dora_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TingPaiInfo) Reset()         { *m = TingPaiInfo{} }
func (m *TingPaiInfo) String() string { return proto.CompactTextString(m) }
func (*TingPaiInfo) ProtoMessage()    {}
func (*TingPaiInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{360}
}
func (m *TingPaiInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TingPaiInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TingPaiInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TingPaiInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TingPaiInfo.Merge(m, src)
}
func (m *TingPaiInfo) XXX_Size() int {
	return m.Size()
}
func (m *TingPaiInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TingPaiInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TingPaiInfo proto.InternalMessageInfo

func (m *TingPaiInfo) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *TingPaiInfo) GetHaveyi() bool {
	if m != nil {
		return m.Haveyi
	}
	return false
}

func (m *TingPaiInfo) GetYiman() bool {
	if m != nil {
		return m.Yiman
	}
	return false
}

func (m *TingPaiInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TingPaiInfo) GetFu() uint32 {
	if m != nil {
		return m.Fu
	}
	return 0
}

func (m *TingPaiInfo) GetBiaoDoraCount() uint32 {
	if m != nil {
		return m.BiaoDoraCount
	}
	return 0
}

type TingPaiDiscardInfo struct {
	Tile                 string         `protobuf:"bytes,1,opt,name=tile,proto3" json:"tile,omitempty"`
	Zhenting             bool           `protobuf:"varint,2,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	Infos                []*TingPaiInfo `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TingPaiDiscardInfo) Reset()         { *m = TingPaiDiscardInfo{} }
func (m *TingPaiDiscardInfo) String() string { return proto.CompactTextString(m) }
func (*TingPaiDiscardInfo) ProtoMessage()    {}
func (*TingPaiDiscardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{361}
}
func (m *TingPaiDiscardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TingPaiDiscardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TingPaiDiscardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TingPaiDiscardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TingPaiDiscardInfo.Merge(m, src)
}
func (m *TingPaiDiscardInfo) XXX_Size() int {
	return m.Size()
}
func (m *TingPaiDiscardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TingPaiDiscardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TingPaiDiscardInfo proto.InternalMessageInfo

func (m *TingPaiDiscardInfo) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *TingPaiDiscardInfo) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

func (m *TingPaiDiscardInfo) GetInfos() []*TingPaiInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GameEnd struct {
	Scores               []int32  `protobuf:"varint,1,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEnd) Reset()         { *m = GameEnd{} }
func (m *GameEnd) String() string { return proto.CompactTextString(m) }
func (*GameEnd) ProtoMessage()    {}
func (*GameEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{362}
}
func (m *GameEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEnd.Merge(m, src)
}
func (m *GameEnd) XXX_Size() int {
	return m.Size()
}
func (m *GameEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEnd.DiscardUnknown(m)
}

var xxx_messageInfo_GameEnd proto.InternalMessageInfo

func (m *GameEnd) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

type ActionDiscardTile struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Tile                 string                 `protobuf:"bytes,2,opt,name=tile,proto3" json:"tile,omitempty"`
	IsLiqi               bool                   `protobuf:"varint,3,opt,name=is_liqi,json=isLiqi,proto3" json:"is_liqi,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	Moqie                bool                   `protobuf:"varint,5,opt,name=moqie,proto3" json:"moqie,omitempty"`
	Zhenting             bool                   `protobuf:"varint,6,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	Tingpais             []*TingPaiInfo         `protobuf:"bytes,7,rep,name=tingpais,proto3" json:"tingpais,omitempty"`
	Doras                []string               `protobuf:"bytes,8,rep,name=doras,proto3" json:"doras,omitempty"`
	IsWliqi              bool                   `protobuf:"varint,9,opt,name=is_wliqi,json=isWliqi,proto3" json:"is_wliqi,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ActionDiscardTile) Reset()         { *m = ActionDiscardTile{} }
func (m *ActionDiscardTile) String() string { return proto.CompactTextString(m) }
func (*ActionDiscardTile) ProtoMessage()    {}
func (*ActionDiscardTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{363}
}
func (m *ActionDiscardTile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDiscardTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDiscardTile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDiscardTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDiscardTile.Merge(m, src)
}
func (m *ActionDiscardTile) XXX_Size() int {
	return m.Size()
}
func (m *ActionDiscardTile) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDiscardTile.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDiscardTile proto.InternalMessageInfo

func (m *ActionDiscardTile) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ActionDiscardTile) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *ActionDiscardTile) GetIsLiqi() bool {
	if m != nil {
		return m.IsLiqi
	}
	return false
}

func (m *ActionDiscardTile) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *ActionDiscardTile) GetMoqie() bool {
	if m != nil {
		return m.Moqie
	}
	return false
}

func (m *ActionDiscardTile) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

func (m *ActionDiscardTile) GetTingpais() []*TingPaiInfo {
	if m != nil {
		return m.Tingpais
	}
	return nil
}

func (m *ActionDiscardTile) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *ActionDiscardTile) GetIsWliqi() bool {
	if m != nil {
		return m.IsWliqi
	}
	return false
}

type RecordDiscardTile struct {
	Seat                 uint32                   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Tile                 string                   `protobuf:"bytes,2,opt,name=tile,proto3" json:"tile,omitempty"`
	IsLiqi               bool                     `protobuf:"varint,3,opt,name=is_liqi,json=isLiqi,proto3" json:"is_liqi,omitempty"`
	Moqie                bool                     `protobuf:"varint,5,opt,name=moqie,proto3" json:"moqie,omitempty"`
	Zhenting             []bool                   `protobuf:"varint,6,rep,packed,name=zhenting,proto3" json:"zhenting,omitempty"`
	Tingpais             []*TingPaiInfo           `protobuf:"bytes,7,rep,name=tingpais,proto3" json:"tingpais,omitempty"`
	Doras                []string                 `protobuf:"bytes,8,rep,name=doras,proto3" json:"doras,omitempty"`
	IsWliqi              bool                     `protobuf:"varint,9,opt,name=is_wliqi,json=isWliqi,proto3" json:"is_wliqi,omitempty"`
	Operations           []*OptionalOperationList `protobuf:"bytes,10,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RecordDiscardTile) Reset()         { *m = RecordDiscardTile{} }
func (m *RecordDiscardTile) String() string { return proto.CompactTextString(m) }
func (*RecordDiscardTile) ProtoMessage()    {}
func (*RecordDiscardTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{364}
}
func (m *RecordDiscardTile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordDiscardTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordDiscardTile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordDiscardTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordDiscardTile.Merge(m, src)
}
func (m *RecordDiscardTile) XXX_Size() int {
	return m.Size()
}
func (m *RecordDiscardTile) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordDiscardTile.DiscardUnknown(m)
}

var xxx_messageInfo_RecordDiscardTile proto.InternalMessageInfo

func (m *RecordDiscardTile) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordDiscardTile) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *RecordDiscardTile) GetIsLiqi() bool {
	if m != nil {
		return m.IsLiqi
	}
	return false
}

func (m *RecordDiscardTile) GetMoqie() bool {
	if m != nil {
		return m.Moqie
	}
	return false
}

func (m *RecordDiscardTile) GetZhenting() []bool {
	if m != nil {
		return m.Zhenting
	}
	return nil
}

func (m *RecordDiscardTile) GetTingpais() []*TingPaiInfo {
	if m != nil {
		return m.Tingpais
	}
	return nil
}

func (m *RecordDiscardTile) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *RecordDiscardTile) GetIsWliqi() bool {
	if m != nil {
		return m.IsWliqi
	}
	return false
}

func (m *RecordDiscardTile) GetOperations() []*OptionalOperationList {
	if m != nil {
		return m.Operations
	}
	return nil
}

type ActionDealTile struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Tile                 string                 `protobuf:"bytes,2,opt,name=tile,proto3" json:"tile,omitempty"`
	LeftTileCount        uint32                 `protobuf:"varint,3,opt,name=left_tile_count,json=leftTileCount,proto3" json:"left_tile_count,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	Liqi                 *LiQiSuccess           `protobuf:"bytes,5,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Doras                []string               `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Zhenting             bool                   `protobuf:"varint,7,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	Tingpais             []*TingPaiDiscardInfo  `protobuf:"bytes,8,rep,name=tingpais,proto3" json:"tingpais,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ActionDealTile) Reset()         { *m = ActionDealTile{} }
func (m *ActionDealTile) String() string { return proto.CompactTextString(m) }
func (*ActionDealTile) ProtoMessage()    {}
func (*ActionDealTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{365}
}
func (m *ActionDealTile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDealTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDealTile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDealTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDealTile.Merge(m, src)
}
func (m *ActionDealTile) XXX_Size() int {
	return m.Size()
}
func (m *ActionDealTile) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDealTile.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDealTile proto.InternalMessageInfo

func (m *ActionDealTile) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ActionDealTile) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *ActionDealTile) GetLeftTileCount() uint32 {
	if m != nil {
		return m.LeftTileCount
	}
	return 0
}

func (m *ActionDealTile) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *ActionDealTile) GetLiqi() *LiQiSuccess {
	if m != nil {
		return m.Liqi
	}
	return nil
}

func (m *ActionDealTile) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *ActionDealTile) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

func (m *ActionDealTile) GetTingpais() []*TingPaiDiscardInfo {
	if m != nil {
		return m.Tingpais
	}
	return nil
}

type RecordDealTile struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Tile                 string                 `protobuf:"bytes,2,opt,name=tile,proto3" json:"tile,omitempty"`
	LeftTileCount        uint32                 `protobuf:"varint,3,opt,name=left_tile_count,json=leftTileCount,proto3" json:"left_tile_count,omitempty"`
	Liqi                 *LiQiSuccess           `protobuf:"bytes,5,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Doras                []string               `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Zhenting             []bool                 `protobuf:"varint,7,rep,packed,name=zhenting,proto3" json:"zhenting,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,8,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RecordDealTile) Reset()         { *m = RecordDealTile{} }
func (m *RecordDealTile) String() string { return proto.CompactTextString(m) }
func (*RecordDealTile) ProtoMessage()    {}
func (*RecordDealTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{366}
}
func (m *RecordDealTile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordDealTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordDealTile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordDealTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordDealTile.Merge(m, src)
}
func (m *RecordDealTile) XXX_Size() int {
	return m.Size()
}
func (m *RecordDealTile) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordDealTile.DiscardUnknown(m)
}

var xxx_messageInfo_RecordDealTile proto.InternalMessageInfo

func (m *RecordDealTile) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordDealTile) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *RecordDealTile) GetLeftTileCount() uint32 {
	if m != nil {
		return m.LeftTileCount
	}
	return 0
}

func (m *RecordDealTile) GetLiqi() *LiQiSuccess {
	if m != nil {
		return m.Liqi
	}
	return nil
}

func (m *RecordDealTile) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *RecordDealTile) GetZhenting() []bool {
	if m != nil {
		return m.Zhenting
	}
	return nil
}

func (m *RecordDealTile) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

type ActionChiPengGang struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Type                 uint32                 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Tiles                []string               `protobuf:"bytes,3,rep,name=tiles,proto3" json:"tiles,omitempty"`
	Froms                []uint32               `protobuf:"varint,4,rep,packed,name=froms,proto3" json:"froms,omitempty"`
	Liqi                 *LiQiSuccess           `protobuf:"bytes,5,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
	Zhenting             bool                   `protobuf:"varint,7,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	Tingpais             []*TingPaiDiscardInfo  `protobuf:"bytes,8,rep,name=tingpais,proto3" json:"tingpais,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ActionChiPengGang) Reset()         { *m = ActionChiPengGang{} }
func (m *ActionChiPengGang) String() string { return proto.CompactTextString(m) }
func (*ActionChiPengGang) ProtoMessage()    {}
func (*ActionChiPengGang) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{367}
}
func (m *ActionChiPengGang) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionChiPengGang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionChiPengGang.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionChiPengGang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionChiPengGang.Merge(m, src)
}
func (m *ActionChiPengGang) XXX_Size() int {
	return m.Size()
}
func (m *ActionChiPengGang) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionChiPengGang.DiscardUnknown(m)
}

var xxx_messageInfo_ActionChiPengGang proto.InternalMessageInfo

func (m *ActionChiPengGang) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ActionChiPengGang) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActionChiPengGang) GetTiles() []string {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *ActionChiPengGang) GetFroms() []uint32 {
	if m != nil {
		return m.Froms
	}
	return nil
}

func (m *ActionChiPengGang) GetLiqi() *LiQiSuccess {
	if m != nil {
		return m.Liqi
	}
	return nil
}

func (m *ActionChiPengGang) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *ActionChiPengGang) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

func (m *ActionChiPengGang) GetTingpais() []*TingPaiDiscardInfo {
	if m != nil {
		return m.Tingpais
	}
	return nil
}

type RecordChiPengGang struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Type                 uint32                 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Tiles                []string               `protobuf:"bytes,3,rep,name=tiles,proto3" json:"tiles,omitempty"`
	Froms                []uint32               `protobuf:"varint,4,rep,packed,name=froms,proto3" json:"froms,omitempty"`
	Liqi                 *LiQiSuccess           `protobuf:"bytes,5,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Zhenting             []bool                 `protobuf:"varint,7,rep,packed,name=zhenting,proto3" json:"zhenting,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,8,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RecordChiPengGang) Reset()         { *m = RecordChiPengGang{} }
func (m *RecordChiPengGang) String() string { return proto.CompactTextString(m) }
func (*RecordChiPengGang) ProtoMessage()    {}
func (*RecordChiPengGang) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{368}
}
func (m *RecordChiPengGang) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordChiPengGang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordChiPengGang.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordChiPengGang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordChiPengGang.Merge(m, src)
}
func (m *RecordChiPengGang) XXX_Size() int {
	return m.Size()
}
func (m *RecordChiPengGang) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordChiPengGang.DiscardUnknown(m)
}

var xxx_messageInfo_RecordChiPengGang proto.InternalMessageInfo

func (m *RecordChiPengGang) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordChiPengGang) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RecordChiPengGang) GetTiles() []string {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *RecordChiPengGang) GetFroms() []uint32 {
	if m != nil {
		return m.Froms
	}
	return nil
}

func (m *RecordChiPengGang) GetLiqi() *LiQiSuccess {
	if m != nil {
		return m.Liqi
	}
	return nil
}

func (m *RecordChiPengGang) GetZhenting() []bool {
	if m != nil {
		return m.Zhenting
	}
	return nil
}

func (m *RecordChiPengGang) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

type ActionAnGangAddGang struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Type                 uint32                 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Tiles                string                 `protobuf:"bytes,3,opt,name=tiles,proto3" json:"tiles,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	Doras                []string               `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Zhenting             bool                   `protobuf:"varint,7,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	Tingpais             []*TingPaiInfo         `protobuf:"bytes,8,rep,name=tingpais,proto3" json:"tingpais,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ActionAnGangAddGang) Reset()         { *m = ActionAnGangAddGang{} }
func (m *ActionAnGangAddGang) String() string { return proto.CompactTextString(m) }
func (*ActionAnGangAddGang) ProtoMessage()    {}
func (*ActionAnGangAddGang) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{369}
}
func (m *ActionAnGangAddGang) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionAnGangAddGang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionAnGangAddGang.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionAnGangAddGang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionAnGangAddGang.Merge(m, src)
}
func (m *ActionAnGangAddGang) XXX_Size() int {
	return m.Size()
}
func (m *ActionAnGangAddGang) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionAnGangAddGang.DiscardUnknown(m)
}

var xxx_messageInfo_ActionAnGangAddGang proto.InternalMessageInfo

func (m *ActionAnGangAddGang) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ActionAnGangAddGang) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActionAnGangAddGang) GetTiles() string {
	if m != nil {
		return m.Tiles
	}
	return ""
}

func (m *ActionAnGangAddGang) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *ActionAnGangAddGang) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *ActionAnGangAddGang) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

func (m *ActionAnGangAddGang) GetTingpais() []*TingPaiInfo {
	if m != nil {
		return m.Tingpais
	}
	return nil
}

type RecordAnGangAddGang struct {
	Seat                 uint32                   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Type                 uint32                   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Tiles                string                   `protobuf:"bytes,3,opt,name=tiles,proto3" json:"tiles,omitempty"`
	Doras                []string                 `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Operations           []*OptionalOperationList `protobuf:"bytes,7,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RecordAnGangAddGang) Reset()         { *m = RecordAnGangAddGang{} }
func (m *RecordAnGangAddGang) String() string { return proto.CompactTextString(m) }
func (*RecordAnGangAddGang) ProtoMessage()    {}
func (*RecordAnGangAddGang) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{370}
}
func (m *RecordAnGangAddGang) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordAnGangAddGang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordAnGangAddGang.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordAnGangAddGang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordAnGangAddGang.Merge(m, src)
}
func (m *RecordAnGangAddGang) XXX_Size() int {
	return m.Size()
}
func (m *RecordAnGangAddGang) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordAnGangAddGang.DiscardUnknown(m)
}

var xxx_messageInfo_RecordAnGangAddGang proto.InternalMessageInfo

func (m *RecordAnGangAddGang) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordAnGangAddGang) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RecordAnGangAddGang) GetTiles() string {
	if m != nil {
		return m.Tiles
	}
	return ""
}

func (m *RecordAnGangAddGang) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *RecordAnGangAddGang) GetOperations() []*OptionalOperationList {
	if m != nil {
		return m.Operations
	}
	return nil
}

type ActionBaBei struct {
	Seat                 uint32                 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Operation            *OptionalOperationList `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	Doras                []string               `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Zhenting             bool                   `protobuf:"varint,7,opt,name=zhenting,proto3" json:"zhenting,omitempty"`
	Tingpais             []*TingPaiInfo         `protobuf:"bytes,8,rep,name=tingpais,proto3" json:"tingpais,omitempty"`
	Moqie                bool                   `protobuf:"varint,9,opt,name=moqie,proto3" json:"moqie,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ActionBaBei) Reset()         { *m = ActionBaBei{} }
func (m *ActionBaBei) String() string { return proto.CompactTextString(m) }
func (*ActionBaBei) ProtoMessage()    {}
func (*ActionBaBei) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{371}
}
func (m *ActionBaBei) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionBaBei) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionBaBei.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionBaBei) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionBaBei.Merge(m, src)
}
func (m *ActionBaBei) XXX_Size() int {
	return m.Size()
}
func (m *ActionBaBei) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionBaBei.DiscardUnknown(m)
}

var xxx_messageInfo_ActionBaBei proto.InternalMessageInfo

func (m *ActionBaBei) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ActionBaBei) GetOperation() *OptionalOperationList {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *ActionBaBei) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *ActionBaBei) GetZhenting() bool {
	if m != nil {
		return m.Zhenting
	}
	return false
}

func (m *ActionBaBei) GetTingpais() []*TingPaiInfo {
	if m != nil {
		return m.Tingpais
	}
	return nil
}

func (m *ActionBaBei) GetMoqie() bool {
	if m != nil {
		return m.Moqie
	}
	return false
}

type RecordBaBei struct {
	Seat                 uint32                   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Doras                []string                 `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Operations           []*OptionalOperationList `protobuf:"bytes,7,rep,name=operations,proto3" json:"operations,omitempty"`
	Moqie                bool                     `protobuf:"varint,8,opt,name=moqie,proto3" json:"moqie,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RecordBaBei) Reset()         { *m = RecordBaBei{} }
func (m *RecordBaBei) String() string { return proto.CompactTextString(m) }
func (*RecordBaBei) ProtoMessage()    {}
func (*RecordBaBei) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{372}
}
func (m *RecordBaBei) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordBaBei) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordBaBei.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordBaBei) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordBaBei.Merge(m, src)
}
func (m *RecordBaBei) XXX_Size() int {
	return m.Size()
}
func (m *RecordBaBei) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordBaBei.DiscardUnknown(m)
}

var xxx_messageInfo_RecordBaBei proto.InternalMessageInfo

func (m *RecordBaBei) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordBaBei) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *RecordBaBei) GetOperations() []*OptionalOperationList {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *RecordBaBei) GetMoqie() bool {
	if m != nil {
		return m.Moqie
	}
	return false
}

type ActionHule struct {
	Hules                []*HuleInfo `protobuf:"bytes,1,rep,name=hules,proto3" json:"hules,omitempty"`
	OldScores            []int32     `protobuf:"varint,2,rep,packed,name=old_scores,json=oldScores,proto3" json:"old_scores,omitempty"`
	DeltaScores          []int32     `protobuf:"varint,3,rep,packed,name=delta_scores,json=deltaScores,proto3" json:"delta_scores,omitempty"`
	WaitTimeout          uint32      `protobuf:"varint,4,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
	Scores               []int32     `protobuf:"varint,5,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Gameend              *GameEnd    `protobuf:"bytes,6,opt,name=gameend,proto3" json:"gameend,omitempty"`
	Doras                []string    `protobuf:"bytes,7,rep,name=doras,proto3" json:"doras,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ActionHule) Reset()         { *m = ActionHule{} }
func (m *ActionHule) String() string { return proto.CompactTextString(m) }
func (*ActionHule) ProtoMessage()    {}
func (*ActionHule) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{373}
}
func (m *ActionHule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionHule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionHule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionHule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionHule.Merge(m, src)
}
func (m *ActionHule) XXX_Size() int {
	return m.Size()
}
func (m *ActionHule) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionHule.DiscardUnknown(m)
}

var xxx_messageInfo_ActionHule proto.InternalMessageInfo

func (m *ActionHule) GetHules() []*HuleInfo {
	if m != nil {
		return m.Hules
	}
	return nil
}

func (m *ActionHule) GetOldScores() []int32 {
	if m != nil {
		return m.OldScores
	}
	return nil
}

func (m *ActionHule) GetDeltaScores() []int32 {
	if m != nil {
		return m.DeltaScores
	}
	return nil
}

func (m *ActionHule) GetWaitTimeout() uint32 {
	if m != nil {
		return m.WaitTimeout
	}
	return 0
}

func (m *ActionHule) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ActionHule) GetGameend() *GameEnd {
	if m != nil {
		return m.Gameend
	}
	return nil
}

func (m *ActionHule) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

type RecordHule struct {
	Hules                []*HuleInfo `protobuf:"bytes,1,rep,name=hules,proto3" json:"hules,omitempty"`
	OldScores            []int32     `protobuf:"varint,2,rep,packed,name=old_scores,json=oldScores,proto3" json:"old_scores,omitempty"`
	DeltaScores          []int32     `protobuf:"varint,3,rep,packed,name=delta_scores,json=deltaScores,proto3" json:"delta_scores,omitempty"`
	WaitTimeout          uint32      `protobuf:"varint,4,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
	Scores               []int32     `protobuf:"varint,5,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Gameend              *GameEnd    `protobuf:"bytes,6,opt,name=gameend,proto3" json:"gameend,omitempty"`
	Doras                []string    `protobuf:"bytes,7,rep,name=doras,proto3" json:"doras,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RecordHule) Reset()         { *m = RecordHule{} }
func (m *RecordHule) String() string { return proto.CompactTextString(m) }
func (*RecordHule) ProtoMessage()    {}
func (*RecordHule) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{374}
}
func (m *RecordHule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordHule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordHule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordHule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordHule.Merge(m, src)
}
func (m *RecordHule) XXX_Size() int {
	return m.Size()
}
func (m *RecordHule) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordHule.DiscardUnknown(m)
}

var xxx_messageInfo_RecordHule proto.InternalMessageInfo

func (m *RecordHule) GetHules() []*HuleInfo {
	if m != nil {
		return m.Hules
	}
	return nil
}

func (m *RecordHule) GetOldScores() []int32 {
	if m != nil {
		return m.OldScores
	}
	return nil
}

func (m *RecordHule) GetDeltaScores() []int32 {
	if m != nil {
		return m.DeltaScores
	}
	return nil
}

func (m *RecordHule) GetWaitTimeout() uint32 {
	if m != nil {
		return m.WaitTimeout
	}
	return 0
}

func (m *RecordHule) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *RecordHule) GetGameend() *GameEnd {
	if m != nil {
		return m.Gameend
	}
	return nil
}

func (m *RecordHule) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

type ActionLiuJu struct {
	Type                 uint32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Gameend              *GameEnd     `protobuf:"bytes,2,opt,name=gameend,proto3" json:"gameend,omitempty"`
	Seat                 uint32       `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Tiles                []string     `protobuf:"bytes,4,rep,name=tiles,proto3" json:"tiles,omitempty"`
	Liqi                 *LiQiSuccess `protobuf:"bytes,5,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Allplayertiles       []string     `protobuf:"bytes,6,rep,name=allplayertiles,proto3" json:"allplayertiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ActionLiuJu) Reset()         { *m = ActionLiuJu{} }
func (m *ActionLiuJu) String() string { return proto.CompactTextString(m) }
func (*ActionLiuJu) ProtoMessage()    {}
func (*ActionLiuJu) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{375}
}
func (m *ActionLiuJu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionLiuJu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionLiuJu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionLiuJu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionLiuJu.Merge(m, src)
}
func (m *ActionLiuJu) XXX_Size() int {
	return m.Size()
}
func (m *ActionLiuJu) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionLiuJu.DiscardUnknown(m)
}

var xxx_messageInfo_ActionLiuJu proto.InternalMessageInfo

func (m *ActionLiuJu) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActionLiuJu) GetGameend() *GameEnd {
	if m != nil {
		return m.Gameend
	}
	return nil
}

func (m *ActionLiuJu) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ActionLiuJu) GetTiles() []string {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *ActionLiuJu) GetLiqi() *LiQiSuccess {
	if m != nil {
		return m.Liqi
	}
	return nil
}

func (m *ActionLiuJu) GetAllplayertiles() []string {
	if m != nil {
		return m.Allplayertiles
	}
	return nil
}

type RecordLiuJu struct {
	Type                 uint32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Gameend              *GameEnd     `protobuf:"bytes,2,opt,name=gameend,proto3" json:"gameend,omitempty"`
	Seat                 uint32       `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Tiles                []string     `protobuf:"bytes,4,rep,name=tiles,proto3" json:"tiles,omitempty"`
	Liqi                 *LiQiSuccess `protobuf:"bytes,5,opt,name=liqi,proto3" json:"liqi,omitempty"`
	Allplayertiles       []string     `protobuf:"bytes,6,rep,name=allplayertiles,proto3" json:"allplayertiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RecordLiuJu) Reset()         { *m = RecordLiuJu{} }
func (m *RecordLiuJu) String() string { return proto.CompactTextString(m) }
func (*RecordLiuJu) ProtoMessage()    {}
func (*RecordLiuJu) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{376}
}
func (m *RecordLiuJu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordLiuJu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordLiuJu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordLiuJu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordLiuJu.Merge(m, src)
}
func (m *RecordLiuJu) XXX_Size() int {
	return m.Size()
}
func (m *RecordLiuJu) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordLiuJu.DiscardUnknown(m)
}

var xxx_messageInfo_RecordLiuJu proto.InternalMessageInfo

func (m *RecordLiuJu) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RecordLiuJu) GetGameend() *GameEnd {
	if m != nil {
		return m.Gameend
	}
	return nil
}

func (m *RecordLiuJu) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *RecordLiuJu) GetTiles() []string {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *RecordLiuJu) GetLiqi() *LiQiSuccess {
	if m != nil {
		return m.Liqi
	}
	return nil
}

func (m *RecordLiuJu) GetAllplayertiles() []string {
	if m != nil {
		return m.Allplayertiles
	}
	return nil
}

type NoTilePlayerInfo struct {
	Tingpai              bool           `protobuf:"varint,3,opt,name=tingpai,proto3" json:"tingpai,omitempty"`
	Hand                 []string       `protobuf:"bytes,4,rep,name=hand,proto3" json:"hand,omitempty"`
	Tings                []*TingPaiInfo `protobuf:"bytes,5,rep,name=tings,proto3" json:"tings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NoTilePlayerInfo) Reset()         { *m = NoTilePlayerInfo{} }
func (m *NoTilePlayerInfo) String() string { return proto.CompactTextString(m) }
func (*NoTilePlayerInfo) ProtoMessage()    {}
func (*NoTilePlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{377}
}
func (m *NoTilePlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoTilePlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoTilePlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoTilePlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoTilePlayerInfo.Merge(m, src)
}
func (m *NoTilePlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *NoTilePlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NoTilePlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NoTilePlayerInfo proto.InternalMessageInfo

func (m *NoTilePlayerInfo) GetTingpai() bool {
	if m != nil {
		return m.Tingpai
	}
	return false
}

func (m *NoTilePlayerInfo) GetHand() []string {
	if m != nil {
		return m.Hand
	}
	return nil
}

func (m *NoTilePlayerInfo) GetTings() []*TingPaiInfo {
	if m != nil {
		return m.Tings
	}
	return nil
}

type NoTileScoreInfo struct {
	Seat                 uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	OldScores            []int32  `protobuf:"varint,2,rep,packed,name=old_scores,json=oldScores,proto3" json:"old_scores,omitempty"`
	DeltaScores          []int32  `protobuf:"varint,3,rep,packed,name=delta_scores,json=deltaScores,proto3" json:"delta_scores,omitempty"`
	Hand                 []string `protobuf:"bytes,4,rep,name=hand,proto3" json:"hand,omitempty"`
	Ming                 []string `protobuf:"bytes,5,rep,name=ming,proto3" json:"ming,omitempty"`
	Doras                []string `protobuf:"bytes,6,rep,name=doras,proto3" json:"doras,omitempty"`
	Score                uint32   `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoTileScoreInfo) Reset()         { *m = NoTileScoreInfo{} }
func (m *NoTileScoreInfo) String() string { return proto.CompactTextString(m) }
func (*NoTileScoreInfo) ProtoMessage()    {}
func (*NoTileScoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{378}
}
func (m *NoTileScoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoTileScoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoTileScoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoTileScoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoTileScoreInfo.Merge(m, src)
}
func (m *NoTileScoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *NoTileScoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NoTileScoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NoTileScoreInfo proto.InternalMessageInfo

func (m *NoTileScoreInfo) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NoTileScoreInfo) GetOldScores() []int32 {
	if m != nil {
		return m.OldScores
	}
	return nil
}

func (m *NoTileScoreInfo) GetDeltaScores() []int32 {
	if m != nil {
		return m.DeltaScores
	}
	return nil
}

func (m *NoTileScoreInfo) GetHand() []string {
	if m != nil {
		return m.Hand
	}
	return nil
}

func (m *NoTileScoreInfo) GetMing() []string {
	if m != nil {
		return m.Ming
	}
	return nil
}

func (m *NoTileScoreInfo) GetDoras() []string {
	if m != nil {
		return m.Doras
	}
	return nil
}

func (m *NoTileScoreInfo) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type ActionNoTile struct {
	Liujumanguan         bool                `protobuf:"varint,1,opt,name=liujumanguan,proto3" json:"liujumanguan,omitempty"`
	Players              []*NoTilePlayerInfo `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Scores               []*NoTileScoreInfo  `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
	Gameend              bool                `protobuf:"varint,4,opt,name=gameend,proto3" json:"gameend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ActionNoTile) Reset()         { *m = ActionNoTile{} }
func (m *ActionNoTile) String() string { return proto.CompactTextString(m) }
func (*ActionNoTile) ProtoMessage()    {}
func (*ActionNoTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{379}
}
func (m *ActionNoTile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionNoTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionNoTile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionNoTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionNoTile.Merge(m, src)
}
func (m *ActionNoTile) XXX_Size() int {
	return m.Size()
}
func (m *ActionNoTile) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionNoTile.DiscardUnknown(m)
}

var xxx_messageInfo_ActionNoTile proto.InternalMessageInfo

func (m *ActionNoTile) GetLiujumanguan() bool {
	if m != nil {
		return m.Liujumanguan
	}
	return false
}

func (m *ActionNoTile) GetPlayers() []*NoTilePlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ActionNoTile) GetScores() []*NoTileScoreInfo {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ActionNoTile) GetGameend() bool {
	if m != nil {
		return m.Gameend
	}
	return false
}

type RecordNoTile struct {
	Liujumanguan         bool                `protobuf:"varint,1,opt,name=liujumanguan,proto3" json:"liujumanguan,omitempty"`
	Players              []*NoTilePlayerInfo `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Scores               []*NoTileScoreInfo  `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
	Gameend              bool                `protobuf:"varint,4,opt,name=gameend,proto3" json:"gameend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RecordNoTile) Reset()         { *m = RecordNoTile{} }
func (m *RecordNoTile) String() string { return proto.CompactTextString(m) }
func (*RecordNoTile) ProtoMessage()    {}
func (*RecordNoTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{380}
}
func (m *RecordNoTile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordNoTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordNoTile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordNoTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordNoTile.Merge(m, src)
}
func (m *RecordNoTile) XXX_Size() int {
	return m.Size()
}
func (m *RecordNoTile) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordNoTile.DiscardUnknown(m)
}

var xxx_messageInfo_RecordNoTile proto.InternalMessageInfo

func (m *RecordNoTile) GetLiujumanguan() bool {
	if m != nil {
		return m.Liujumanguan
	}
	return false
}

func (m *RecordNoTile) GetPlayers() []*NoTilePlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RecordNoTile) GetScores() []*NoTileScoreInfo {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *RecordNoTile) GetGameend() bool {
	if m != nil {
		return m.Gameend
	}
	return false
}

type ReqAuthGame struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	GameUuid             string   `protobuf:"bytes,3,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqAuthGame) Reset()         { *m = ReqAuthGame{} }
func (m *ReqAuthGame) String() string { return proto.CompactTextString(m) }
func (*ReqAuthGame) ProtoMessage()    {}
func (*ReqAuthGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{381}
}
func (m *ReqAuthGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqAuthGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqAuthGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqAuthGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqAuthGame.Merge(m, src)
}
func (m *ReqAuthGame) XXX_Size() int {
	return m.Size()
}
func (m *ReqAuthGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqAuthGame.DiscardUnknown(m)
}

var xxx_messageInfo_ReqAuthGame proto.InternalMessageInfo

func (m *ReqAuthGame) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ReqAuthGame) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqAuthGame) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

type ResAuthGame struct {
	Error                *Error            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Players              []*PlayerGameView `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	SeatList             []uint32          `protobuf:"varint,3,rep,packed,name=seat_list,json=seatList,proto3" json:"seat_list,omitempty"`
	IsGameStart          bool              `protobuf:"varint,4,opt,name=is_game_start,json=isGameStart,proto3" json:"is_game_start,omitempty"`
	GameConfig           *GameConfig       `protobuf:"bytes,5,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
	ReadyIdList          []uint32          `protobuf:"varint,6,rep,packed,name=ready_id_list,json=readyIdList,proto3" json:"ready_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResAuthGame) Reset()         { *m = ResAuthGame{} }
func (m *ResAuthGame) String() string { return proto.CompactTextString(m) }
func (*ResAuthGame) ProtoMessage()    {}
func (*ResAuthGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{382}
}
func (m *ResAuthGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResAuthGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResAuthGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResAuthGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAuthGame.Merge(m, src)
}
func (m *ResAuthGame) XXX_Size() int {
	return m.Size()
}
func (m *ResAuthGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAuthGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResAuthGame proto.InternalMessageInfo

func (m *ResAuthGame) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResAuthGame) GetPlayers() []*PlayerGameView {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ResAuthGame) GetSeatList() []uint32 {
	if m != nil {
		return m.SeatList
	}
	return nil
}

func (m *ResAuthGame) GetIsGameStart() bool {
	if m != nil {
		return m.IsGameStart
	}
	return false
}

func (m *ResAuthGame) GetGameConfig() *GameConfig {
	if m != nil {
		return m.GameConfig
	}
	return nil
}

func (m *ResAuthGame) GetReadyIdList() []uint32 {
	if m != nil {
		return m.ReadyIdList
	}
	return nil
}

type GameRestore struct {
	Snapshot             *GameSnapshot      `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Actions              []*ActionPrototype `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	PassedWaitingTime    uint32             `protobuf:"varint,3,opt,name=passed_waiting_time,json=passedWaitingTime,proto3" json:"passed_waiting_time,omitempty"`
	GameState            uint32             `protobuf:"varint,4,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`
	StartTime            uint32             `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	LastPauseTimeMs      uint32             `protobuf:"varint,6,opt,name=last_pause_time_ms,json=lastPauseTimeMs,proto3" json:"last_pause_time_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GameRestore) Reset()         { *m = GameRestore{} }
func (m *GameRestore) String() string { return proto.CompactTextString(m) }
func (*GameRestore) ProtoMessage()    {}
func (*GameRestore) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{383}
}
func (m *GameRestore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRestore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRestore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRestore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRestore.Merge(m, src)
}
func (m *GameRestore) XXX_Size() int {
	return m.Size()
}
func (m *GameRestore) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRestore.DiscardUnknown(m)
}

var xxx_messageInfo_GameRestore proto.InternalMessageInfo

func (m *GameRestore) GetSnapshot() *GameSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *GameRestore) GetActions() []*ActionPrototype {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *GameRestore) GetPassedWaitingTime() uint32 {
	if m != nil {
		return m.PassedWaitingTime
	}
	return 0
}

func (m *GameRestore) GetGameState() uint32 {
	if m != nil {
		return m.GameState
	}
	return 0
}

func (m *GameRestore) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GameRestore) GetLastPauseTimeMs() uint32 {
	if m != nil {
		return m.LastPauseTimeMs
	}
	return 0
}

type ResEnterGame struct {
	Error                *Error       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	IsEnd                bool         `protobuf:"varint,2,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
	Step                 uint32       `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	GameRestore          *GameRestore `protobuf:"bytes,4,opt,name=game_restore,json=gameRestore,proto3" json:"game_restore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResEnterGame) Reset()         { *m = ResEnterGame{} }
func (m *ResEnterGame) String() string { return proto.CompactTextString(m) }
func (*ResEnterGame) ProtoMessage()    {}
func (*ResEnterGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{384}
}
func (m *ResEnterGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResEnterGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResEnterGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResEnterGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResEnterGame.Merge(m, src)
}
func (m *ResEnterGame) XXX_Size() int {
	return m.Size()
}
func (m *ResEnterGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResEnterGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResEnterGame proto.InternalMessageInfo

func (m *ResEnterGame) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResEnterGame) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func (m *ResEnterGame) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *ResEnterGame) GetGameRestore() *GameRestore {
	if m != nil {
		return m.GameRestore
	}
	return nil
}

type ReqSyncGame struct {
	RoundId              string   `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Step                 uint32   `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSyncGame) Reset()         { *m = ReqSyncGame{} }
func (m *ReqSyncGame) String() string { return proto.CompactTextString(m) }
func (*ReqSyncGame) ProtoMessage()    {}
func (*ReqSyncGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{385}
}
func (m *ReqSyncGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSyncGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSyncGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSyncGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSyncGame.Merge(m, src)
}
func (m *ReqSyncGame) XXX_Size() int {
	return m.Size()
}
func (m *ReqSyncGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSyncGame.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSyncGame proto.InternalMessageInfo

func (m *ReqSyncGame) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

func (m *ReqSyncGame) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

type ResSyncGame struct {
	Error                *Error       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	IsEnd                bool         `protobuf:"varint,2,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
	Step                 uint32       `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	GameRestore          *GameRestore `protobuf:"bytes,4,opt,name=game_restore,json=gameRestore,proto3" json:"game_restore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResSyncGame) Reset()         { *m = ResSyncGame{} }
func (m *ResSyncGame) String() string { return proto.CompactTextString(m) }
func (*ResSyncGame) ProtoMessage()    {}
func (*ResSyncGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{386}
}
func (m *ResSyncGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResSyncGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResSyncGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResSyncGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSyncGame.Merge(m, src)
}
func (m *ResSyncGame) XXX_Size() int {
	return m.Size()
}
func (m *ResSyncGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSyncGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResSyncGame proto.InternalMessageInfo

func (m *ResSyncGame) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResSyncGame) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func (m *ResSyncGame) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *ResSyncGame) GetGameRestore() *GameRestore {
	if m != nil {
		return m.GameRestore
	}
	return nil
}

type ReqSelfOperation struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Tile                 string   `protobuf:"bytes,3,opt,name=tile,proto3" json:"tile,omitempty"`
	CancelOperation      bool     `protobuf:"varint,4,opt,name=cancel_operation,json=cancelOperation,proto3" json:"cancel_operation,omitempty"`
	Moqie                bool     `protobuf:"varint,5,opt,name=moqie,proto3" json:"moqie,omitempty"`
	Timeuse              uint32   `protobuf:"varint,6,opt,name=timeuse,proto3" json:"timeuse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSelfOperation) Reset()         { *m = ReqSelfOperation{} }
func (m *ReqSelfOperation) String() string { return proto.CompactTextString(m) }
func (*ReqSelfOperation) ProtoMessage()    {}
func (*ReqSelfOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{387}
}
func (m *ReqSelfOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSelfOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSelfOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSelfOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSelfOperation.Merge(m, src)
}
func (m *ReqSelfOperation) XXX_Size() int {
	return m.Size()
}
func (m *ReqSelfOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSelfOperation.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSelfOperation proto.InternalMessageInfo

func (m *ReqSelfOperation) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqSelfOperation) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReqSelfOperation) GetTile() string {
	if m != nil {
		return m.Tile
	}
	return ""
}

func (m *ReqSelfOperation) GetCancelOperation() bool {
	if m != nil {
		return m.CancelOperation
	}
	return false
}

func (m *ReqSelfOperation) GetMoqie() bool {
	if m != nil {
		return m.Moqie
	}
	return false
}

func (m *ReqSelfOperation) GetTimeuse() uint32 {
	if m != nil {
		return m.Timeuse
	}
	return 0
}

type ReqChiPengGang struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	CancelOperation      bool     `protobuf:"varint,3,opt,name=cancel_operation,json=cancelOperation,proto3" json:"cancel_operation,omitempty"`
	Timeuse              uint32   `protobuf:"varint,6,opt,name=timeuse,proto3" json:"timeuse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqChiPengGang) Reset()         { *m = ReqChiPengGang{} }
func (m *ReqChiPengGang) String() string { return proto.CompactTextString(m) }
func (*ReqChiPengGang) ProtoMessage()    {}
func (*ReqChiPengGang) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{388}
}
func (m *ReqChiPengGang) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqChiPengGang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqChiPengGang.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqChiPengGang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChiPengGang.Merge(m, src)
}
func (m *ReqChiPengGang) XXX_Size() int {
	return m.Size()
}
func (m *ReqChiPengGang) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChiPengGang.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChiPengGang proto.InternalMessageInfo

func (m *ReqChiPengGang) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqChiPengGang) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReqChiPengGang) GetCancelOperation() bool {
	if m != nil {
		return m.CancelOperation
	}
	return false
}

func (m *ReqChiPengGang) GetTimeuse() uint32 {
	if m != nil {
		return m.Timeuse
	}
	return 0
}

type ReqBroadcastInGame struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ExceptSelf           bool     `protobuf:"varint,2,opt,name=except_self,json=exceptSelf,proto3" json:"except_self,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBroadcastInGame) Reset()         { *m = ReqBroadcastInGame{} }
func (m *ReqBroadcastInGame) String() string { return proto.CompactTextString(m) }
func (*ReqBroadcastInGame) ProtoMessage()    {}
func (*ReqBroadcastInGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{389}
}
func (m *ReqBroadcastInGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqBroadcastInGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqBroadcastInGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqBroadcastInGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBroadcastInGame.Merge(m, src)
}
func (m *ReqBroadcastInGame) XXX_Size() int {
	return m.Size()
}
func (m *ReqBroadcastInGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBroadcastInGame.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBroadcastInGame proto.InternalMessageInfo

func (m *ReqBroadcastInGame) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReqBroadcastInGame) GetExceptSelf() bool {
	if m != nil {
		return m.ExceptSelf
	}
	return false
}

type ReqGMCommandInGaming struct {
	JsonData             string   `protobuf:"bytes,1,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGMCommandInGaming) Reset()         { *m = ReqGMCommandInGaming{} }
func (m *ReqGMCommandInGaming) String() string { return proto.CompactTextString(m) }
func (*ReqGMCommandInGaming) ProtoMessage()    {}
func (*ReqGMCommandInGaming) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{390}
}
func (m *ReqGMCommandInGaming) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGMCommandInGaming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGMCommandInGaming.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGMCommandInGaming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGMCommandInGaming.Merge(m, src)
}
func (m *ReqGMCommandInGaming) XXX_Size() int {
	return m.Size()
}
func (m *ReqGMCommandInGaming) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGMCommandInGaming.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGMCommandInGaming proto.InternalMessageInfo

func (m *ReqGMCommandInGaming) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

type ResGamePlayerState struct {
	Error                *Error            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StateList            []GamePlayerState `protobuf:"varint,2,rep,packed,name=state_list,json=stateList,proto3,enum=lq.GamePlayerState" json:"state_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResGamePlayerState) Reset()         { *m = ResGamePlayerState{} }
func (m *ResGamePlayerState) String() string { return proto.CompactTextString(m) }
func (*ResGamePlayerState) ProtoMessage()    {}
func (*ResGamePlayerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{391}
}
func (m *ResGamePlayerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResGamePlayerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResGamePlayerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResGamePlayerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGamePlayerState.Merge(m, src)
}
func (m *ResGamePlayerState) XXX_Size() int {
	return m.Size()
}
func (m *ResGamePlayerState) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGamePlayerState.DiscardUnknown(m)
}

var xxx_messageInfo_ResGamePlayerState proto.InternalMessageInfo

func (m *ResGamePlayerState) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResGamePlayerState) GetStateList() []GamePlayerState {
	if m != nil {
		return m.StateList
	}
	return nil
}

type NotifyNewGame struct {
	GameUuid             string   `protobuf:"bytes,1,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	PlayerList           []string `protobuf:"bytes,2,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyNewGame) Reset()         { *m = NotifyNewGame{} }
func (m *NotifyNewGame) String() string { return proto.CompactTextString(m) }
func (*NotifyNewGame) ProtoMessage()    {}
func (*NotifyNewGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{392}
}
func (m *NotifyNewGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyNewGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyNewGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyNewGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyNewGame.Merge(m, src)
}
func (m *NotifyNewGame) XXX_Size() int {
	return m.Size()
}
func (m *NotifyNewGame) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyNewGame.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyNewGame proto.InternalMessageInfo

func (m *NotifyNewGame) GetGameUuid() string {
	if m != nil {
		return m.GameUuid
	}
	return ""
}

func (m *NotifyNewGame) GetPlayerList() []string {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

type NotifyPlayerLoadGameReady struct {
	ReadyIdList          []uint32 `protobuf:"varint,1,rep,packed,name=ready_id_list,json=readyIdList,proto3" json:"ready_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyPlayerLoadGameReady) Reset()         { *m = NotifyPlayerLoadGameReady{} }
func (m *NotifyPlayerLoadGameReady) String() string { return proto.CompactTextString(m) }
func (*NotifyPlayerLoadGameReady) ProtoMessage()    {}
func (*NotifyPlayerLoadGameReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{393}
}
func (m *NotifyPlayerLoadGameReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyPlayerLoadGameReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyPlayerLoadGameReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyPlayerLoadGameReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyPlayerLoadGameReady.Merge(m, src)
}
func (m *NotifyPlayerLoadGameReady) XXX_Size() int {
	return m.Size()
}
func (m *NotifyPlayerLoadGameReady) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyPlayerLoadGameReady.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyPlayerLoadGameReady proto.InternalMessageInfo

func (m *NotifyPlayerLoadGameReady) GetReadyIdList() []uint32 {
	if m != nil {
		return m.ReadyIdList
	}
	return nil
}

type NotifyGameBroadcast struct {
	Seat                 uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyGameBroadcast) Reset()         { *m = NotifyGameBroadcast{} }
func (m *NotifyGameBroadcast) String() string { return proto.CompactTextString(m) }
func (*NotifyGameBroadcast) ProtoMessage()    {}
func (*NotifyGameBroadcast) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{394}
}
func (m *NotifyGameBroadcast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameBroadcast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameBroadcast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameBroadcast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameBroadcast.Merge(m, src)
}
func (m *NotifyGameBroadcast) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameBroadcast) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameBroadcast.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameBroadcast proto.InternalMessageInfo

func (m *NotifyGameBroadcast) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NotifyGameBroadcast) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NotifyGameEndResult struct {
	Result               *GameEndResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NotifyGameEndResult) Reset()         { *m = NotifyGameEndResult{} }
func (m *NotifyGameEndResult) String() string { return proto.CompactTextString(m) }
func (*NotifyGameEndResult) ProtoMessage()    {}
func (*NotifyGameEndResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{395}
}
func (m *NotifyGameEndResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameEndResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameEndResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameEndResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameEndResult.Merge(m, src)
}
func (m *NotifyGameEndResult) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameEndResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameEndResult.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameEndResult proto.InternalMessageInfo

func (m *NotifyGameEndResult) GetResult() *GameEndResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type NotifyGameTerminate struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyGameTerminate) Reset()         { *m = NotifyGameTerminate{} }
func (m *NotifyGameTerminate) String() string { return proto.CompactTextString(m) }
func (*NotifyGameTerminate) ProtoMessage()    {}
func (*NotifyGameTerminate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{396}
}
func (m *NotifyGameTerminate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameTerminate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameTerminate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameTerminate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameTerminate.Merge(m, src)
}
func (m *NotifyGameTerminate) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameTerminate) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameTerminate.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameTerminate proto.InternalMessageInfo

func (m *NotifyGameTerminate) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type NotifyPlayerConnectionState struct {
	Seat                 uint32          `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	State                GamePlayerState `protobuf:"varint,2,opt,name=state,proto3,enum=lq.GamePlayerState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyPlayerConnectionState) Reset()         { *m = NotifyPlayerConnectionState{} }
func (m *NotifyPlayerConnectionState) String() string { return proto.CompactTextString(m) }
func (*NotifyPlayerConnectionState) ProtoMessage()    {}
func (*NotifyPlayerConnectionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{397}
}
func (m *NotifyPlayerConnectionState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyPlayerConnectionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyPlayerConnectionState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyPlayerConnectionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyPlayerConnectionState.Merge(m, src)
}
func (m *NotifyPlayerConnectionState) XXX_Size() int {
	return m.Size()
}
func (m *NotifyPlayerConnectionState) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyPlayerConnectionState.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyPlayerConnectionState proto.InternalMessageInfo

func (m *NotifyPlayerConnectionState) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NotifyPlayerConnectionState) GetState() GamePlayerState {
	if m != nil {
		return m.State
	}
	return GamePlayerState_NULL
}

type NotifyAccountLevelChange struct {
	Origin               *AccountLevel `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Final                *AccountLevel `protobuf:"bytes,2,opt,name=final,proto3" json:"final,omitempty"`
	Type                 uint32        `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NotifyAccountLevelChange) Reset()         { *m = NotifyAccountLevelChange{} }
func (m *NotifyAccountLevelChange) String() string { return proto.CompactTextString(m) }
func (*NotifyAccountLevelChange) ProtoMessage()    {}
func (*NotifyAccountLevelChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{398}
}
func (m *NotifyAccountLevelChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAccountLevelChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAccountLevelChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAccountLevelChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAccountLevelChange.Merge(m, src)
}
func (m *NotifyAccountLevelChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAccountLevelChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAccountLevelChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAccountLevelChange proto.InternalMessageInfo

func (m *NotifyAccountLevelChange) GetOrigin() *AccountLevel {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *NotifyAccountLevelChange) GetFinal() *AccountLevel {
	if m != nil {
		return m.Final
	}
	return nil
}

func (m *NotifyAccountLevelChange) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type NotifyGameFinishReward struct {
	ModeId               uint32                                `protobuf:"varint,1,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	LevelChange          *NotifyGameFinishReward_LevelChange   `protobuf:"bytes,2,opt,name=level_change,json=levelChange,proto3" json:"level_change,omitempty"`
	MatchChest           *NotifyGameFinishReward_MatchChest    `protobuf:"bytes,3,opt,name=match_chest,json=matchChest,proto3" json:"match_chest,omitempty"`
	MainCharacter        *NotifyGameFinishReward_MainCharacter `protobuf:"bytes,4,opt,name=main_character,json=mainCharacter,proto3" json:"main_character,omitempty"`
	CharacterGift        *NotifyGameFinishReward_CharacterGift `protobuf:"bytes,5,opt,name=character_gift,json=characterGift,proto3" json:"character_gift,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *NotifyGameFinishReward) Reset()         { *m = NotifyGameFinishReward{} }
func (m *NotifyGameFinishReward) String() string { return proto.CompactTextString(m) }
func (*NotifyGameFinishReward) ProtoMessage()    {}
func (*NotifyGameFinishReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{399}
}
func (m *NotifyGameFinishReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameFinishReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameFinishReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameFinishReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameFinishReward.Merge(m, src)
}
func (m *NotifyGameFinishReward) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameFinishReward) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameFinishReward.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameFinishReward proto.InternalMessageInfo

func (m *NotifyGameFinishReward) GetModeId() uint32 {
	if m != nil {
		return m.ModeId
	}
	return 0
}

func (m *NotifyGameFinishReward) GetLevelChange() *NotifyGameFinishReward_LevelChange {
	if m != nil {
		return m.LevelChange
	}
	return nil
}

func (m *NotifyGameFinishReward) GetMatchChest() *NotifyGameFinishReward_MatchChest {
	if m != nil {
		return m.MatchChest
	}
	return nil
}

func (m *NotifyGameFinishReward) GetMainCharacter() *NotifyGameFinishReward_MainCharacter {
	if m != nil {
		return m.MainCharacter
	}
	return nil
}

func (m *NotifyGameFinishReward) GetCharacterGift() *NotifyGameFinishReward_CharacterGift {
	if m != nil {
		return m.CharacterGift
	}
	return nil
}

type NotifyGameFinishReward_LevelChange struct {
	Origin               *AccountLevel `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Final                *AccountLevel `protobuf:"bytes,2,opt,name=final,proto3" json:"final,omitempty"`
	Type                 uint32        `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NotifyGameFinishReward_LevelChange) Reset()         { *m = NotifyGameFinishReward_LevelChange{} }
func (m *NotifyGameFinishReward_LevelChange) String() string { return proto.CompactTextString(m) }
func (*NotifyGameFinishReward_LevelChange) ProtoMessage()    {}
func (*NotifyGameFinishReward_LevelChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{399, 0}
}
func (m *NotifyGameFinishReward_LevelChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameFinishReward_LevelChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameFinishReward_LevelChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameFinishReward_LevelChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameFinishReward_LevelChange.Merge(m, src)
}
func (m *NotifyGameFinishReward_LevelChange) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameFinishReward_LevelChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameFinishReward_LevelChange.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameFinishReward_LevelChange proto.InternalMessageInfo

func (m *NotifyGameFinishReward_LevelChange) GetOrigin() *AccountLevel {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *NotifyGameFinishReward_LevelChange) GetFinal() *AccountLevel {
	if m != nil {
		return m.Final
	}
	return nil
}

func (m *NotifyGameFinishReward_LevelChange) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type NotifyGameFinishReward_MatchChest struct {
	ChestId              uint32        `protobuf:"varint,1,opt,name=chest_id,json=chestId,proto3" json:"chest_id,omitempty"`
	Origin               uint32        `protobuf:"varint,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Final                uint32        `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`
	IsGraded             bool          `protobuf:"varint,4,opt,name=is_graded,json=isGraded,proto3" json:"is_graded,omitempty"`
	Rewards              []*RewardSlot `protobuf:"bytes,5,rep,name=rewards,proto3" json:"rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NotifyGameFinishReward_MatchChest) Reset()         { *m = NotifyGameFinishReward_MatchChest{} }
func (m *NotifyGameFinishReward_MatchChest) String() string { return proto.CompactTextString(m) }
func (*NotifyGameFinishReward_MatchChest) ProtoMessage()    {}
func (*NotifyGameFinishReward_MatchChest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{399, 1}
}
func (m *NotifyGameFinishReward_MatchChest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameFinishReward_MatchChest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameFinishReward_MatchChest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameFinishReward_MatchChest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameFinishReward_MatchChest.Merge(m, src)
}
func (m *NotifyGameFinishReward_MatchChest) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameFinishReward_MatchChest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameFinishReward_MatchChest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameFinishReward_MatchChest proto.InternalMessageInfo

func (m *NotifyGameFinishReward_MatchChest) GetChestId() uint32 {
	if m != nil {
		return m.ChestId
	}
	return 0
}

func (m *NotifyGameFinishReward_MatchChest) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *NotifyGameFinishReward_MatchChest) GetFinal() uint32 {
	if m != nil {
		return m.Final
	}
	return 0
}

func (m *NotifyGameFinishReward_MatchChest) GetIsGraded() bool {
	if m != nil {
		return m.IsGraded
	}
	return false
}

func (m *NotifyGameFinishReward_MatchChest) GetRewards() []*RewardSlot {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type NotifyGameFinishReward_MainCharacter struct {
	Level                uint32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp                  uint32   `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Add                  uint32   `protobuf:"varint,3,opt,name=add,proto3" json:"add,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyGameFinishReward_MainCharacter) Reset()         { *m = NotifyGameFinishReward_MainCharacter{} }
func (m *NotifyGameFinishReward_MainCharacter) String() string { return proto.CompactTextString(m) }
func (*NotifyGameFinishReward_MainCharacter) ProtoMessage()    {}
func (*NotifyGameFinishReward_MainCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{399, 2}
}
func (m *NotifyGameFinishReward_MainCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameFinishReward_MainCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameFinishReward_MainCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameFinishReward_MainCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameFinishReward_MainCharacter.Merge(m, src)
}
func (m *NotifyGameFinishReward_MainCharacter) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameFinishReward_MainCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameFinishReward_MainCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameFinishReward_MainCharacter proto.InternalMessageInfo

func (m *NotifyGameFinishReward_MainCharacter) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NotifyGameFinishReward_MainCharacter) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *NotifyGameFinishReward_MainCharacter) GetAdd() uint32 {
	if m != nil {
		return m.Add
	}
	return 0
}

type NotifyGameFinishReward_CharacterGift struct {
	Origin               uint32   `protobuf:"varint,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Final                uint32   `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Add                  uint32   `protobuf:"varint,3,opt,name=add,proto3" json:"add,omitempty"`
	IsGraded             bool     `protobuf:"varint,4,opt,name=is_graded,json=isGraded,proto3" json:"is_graded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyGameFinishReward_CharacterGift) Reset()         { *m = NotifyGameFinishReward_CharacterGift{} }
func (m *NotifyGameFinishReward_CharacterGift) String() string { return proto.CompactTextString(m) }
func (*NotifyGameFinishReward_CharacterGift) ProtoMessage()    {}
func (*NotifyGameFinishReward_CharacterGift) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{399, 3}
}
func (m *NotifyGameFinishReward_CharacterGift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGameFinishReward_CharacterGift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGameFinishReward_CharacterGift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGameFinishReward_CharacterGift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGameFinishReward_CharacterGift.Merge(m, src)
}
func (m *NotifyGameFinishReward_CharacterGift) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGameFinishReward_CharacterGift) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGameFinishReward_CharacterGift.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGameFinishReward_CharacterGift proto.InternalMessageInfo

func (m *NotifyGameFinishReward_CharacterGift) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *NotifyGameFinishReward_CharacterGift) GetFinal() uint32 {
	if m != nil {
		return m.Final
	}
	return 0
}

func (m *NotifyGameFinishReward_CharacterGift) GetAdd() uint32 {
	if m != nil {
		return m.Add
	}
	return 0
}

func (m *NotifyGameFinishReward_CharacterGift) GetIsGraded() bool {
	if m != nil {
		return m.IsGraded
	}
	return false
}

type NotifyActivityReward struct {
	ActivityReward       []*NotifyActivityReward_ActivityReward `protobuf:"bytes,1,rep,name=activity_reward,json=activityReward,proto3" json:"activity_reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *NotifyActivityReward) Reset()         { *m = NotifyActivityReward{} }
func (m *NotifyActivityReward) String() string { return proto.CompactTextString(m) }
func (*NotifyActivityReward) ProtoMessage()    {}
func (*NotifyActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{400}
}
func (m *NotifyActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyActivityReward.Merge(m, src)
}
func (m *NotifyActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *NotifyActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyActivityReward proto.InternalMessageInfo

func (m *NotifyActivityReward) GetActivityReward() []*NotifyActivityReward_ActivityReward {
	if m != nil {
		return m.ActivityReward
	}
	return nil
}

type NotifyActivityReward_ActivityReward struct {
	ActivityId           uint32        `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Rewards              []*RewardSlot `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NotifyActivityReward_ActivityReward) Reset()         { *m = NotifyActivityReward_ActivityReward{} }
func (m *NotifyActivityReward_ActivityReward) String() string { return proto.CompactTextString(m) }
func (*NotifyActivityReward_ActivityReward) ProtoMessage()    {}
func (*NotifyActivityReward_ActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{400, 0}
}
func (m *NotifyActivityReward_ActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyActivityReward_ActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyActivityReward_ActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyActivityReward_ActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyActivityReward_ActivityReward.Merge(m, src)
}
func (m *NotifyActivityReward_ActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *NotifyActivityReward_ActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyActivityReward_ActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyActivityReward_ActivityReward proto.InternalMessageInfo

func (m *NotifyActivityReward_ActivityReward) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *NotifyActivityReward_ActivityReward) GetRewards() []*RewardSlot {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type NotifyActivityPoint struct {
	ActivityPoints       []*NotifyActivityPoint_ActivityPoint `protobuf:"bytes,1,rep,name=activity_points,json=activityPoints,proto3" json:"activity_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *NotifyActivityPoint) Reset()         { *m = NotifyActivityPoint{} }
func (m *NotifyActivityPoint) String() string { return proto.CompactTextString(m) }
func (*NotifyActivityPoint) ProtoMessage()    {}
func (*NotifyActivityPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{401}
}
func (m *NotifyActivityPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyActivityPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyActivityPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyActivityPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyActivityPoint.Merge(m, src)
}
func (m *NotifyActivityPoint) XXX_Size() int {
	return m.Size()
}
func (m *NotifyActivityPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyActivityPoint.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyActivityPoint proto.InternalMessageInfo

func (m *NotifyActivityPoint) GetActivityPoints() []*NotifyActivityPoint_ActivityPoint {
	if m != nil {
		return m.ActivityPoints
	}
	return nil
}

type NotifyActivityPoint_ActivityPoint struct {
	ActivityId           uint32   `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Point                uint32   `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyActivityPoint_ActivityPoint) Reset()         { *m = NotifyActivityPoint_ActivityPoint{} }
func (m *NotifyActivityPoint_ActivityPoint) String() string { return proto.CompactTextString(m) }
func (*NotifyActivityPoint_ActivityPoint) ProtoMessage()    {}
func (*NotifyActivityPoint_ActivityPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{401, 0}
}
func (m *NotifyActivityPoint_ActivityPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyActivityPoint_ActivityPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyActivityPoint_ActivityPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyActivityPoint_ActivityPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyActivityPoint_ActivityPoint.Merge(m, src)
}
func (m *NotifyActivityPoint_ActivityPoint) XXX_Size() int {
	return m.Size()
}
func (m *NotifyActivityPoint_ActivityPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyActivityPoint_ActivityPoint.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyActivityPoint_ActivityPoint proto.InternalMessageInfo

func (m *NotifyActivityPoint_ActivityPoint) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *NotifyActivityPoint_ActivityPoint) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

type NotifyLeaderboardPoint struct {
	LeaderboardPoints    []*NotifyLeaderboardPoint_LeaderboardPoint `protobuf:"bytes,1,rep,name=leaderboard_points,json=leaderboardPoints,proto3" json:"leaderboard_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *NotifyLeaderboardPoint) Reset()         { *m = NotifyLeaderboardPoint{} }
func (m *NotifyLeaderboardPoint) String() string { return proto.CompactTextString(m) }
func (*NotifyLeaderboardPoint) ProtoMessage()    {}
func (*NotifyLeaderboardPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{402}
}
func (m *NotifyLeaderboardPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyLeaderboardPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyLeaderboardPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyLeaderboardPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyLeaderboardPoint.Merge(m, src)
}
func (m *NotifyLeaderboardPoint) XXX_Size() int {
	return m.Size()
}
func (m *NotifyLeaderboardPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyLeaderboardPoint.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyLeaderboardPoint proto.InternalMessageInfo

func (m *NotifyLeaderboardPoint) GetLeaderboardPoints() []*NotifyLeaderboardPoint_LeaderboardPoint {
	if m != nil {
		return m.LeaderboardPoints
	}
	return nil
}

type NotifyLeaderboardPoint_LeaderboardPoint struct {
	LeaderboardId        uint32   `protobuf:"varint,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	Point                uint32   `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyLeaderboardPoint_LeaderboardPoint) Reset() {
	*m = NotifyLeaderboardPoint_LeaderboardPoint{}
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) String() string { return proto.CompactTextString(m) }
func (*NotifyLeaderboardPoint_LeaderboardPoint) ProtoMessage()    {}
func (*NotifyLeaderboardPoint_LeaderboardPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{402, 0}
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyLeaderboardPoint_LeaderboardPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyLeaderboardPoint_LeaderboardPoint.Merge(m, src)
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) XXX_Size() int {
	return m.Size()
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyLeaderboardPoint_LeaderboardPoint.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyLeaderboardPoint_LeaderboardPoint proto.InternalMessageInfo

func (m *NotifyLeaderboardPoint_LeaderboardPoint) GetLeaderboardId() uint32 {
	if m != nil {
		return m.LeaderboardId
	}
	return 0
}

func (m *NotifyLeaderboardPoint_LeaderboardPoint) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

type NotifyGamePause struct {
	Paused               bool     `protobuf:"varint,1,opt,name=paused,proto3" json:"paused,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyGamePause) Reset()         { *m = NotifyGamePause{} }
func (m *NotifyGamePause) String() string { return proto.CompactTextString(m) }
func (*NotifyGamePause) ProtoMessage()    {}
func (*NotifyGamePause) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888a73c23735b82, []int{403}
}
func (m *NotifyGamePause) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyGamePause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyGamePause.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyGamePause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyGamePause.Merge(m, src)
}
func (m *NotifyGamePause) XXX_Size() int {
	return m.Size()
}
func (m *NotifyGamePause) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyGamePause.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyGamePause proto.InternalMessageInfo

func (m *NotifyGamePause) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func init() {
	proto.RegisterEnum("lq.GamePlayerState", GamePlayerState_name, GamePlayerState_value)
	proto.RegisterType((*NotifyRoomGameStart)(nil), "lq.NotifyRoomGameStart")
	proto.RegisterType((*NotifyMatchGameStart)(nil), "lq.NotifyMatchGameStart")
	proto.RegisterType((*NotifyRoomPlayerReady)(nil), "lq.NotifyRoomPlayerReady")
	proto.RegisterType((*NotifyRoomPlayerUpdate)(nil), "lq.NotifyRoomPlayerUpdate")
	proto.RegisterType((*NotifyRoomKickOut)(nil), "lq.NotifyRoomKickOut")
	proto.RegisterType((*NotifyMatchTimeout)(nil), "lq.NotifyMatchTimeout")
	proto.RegisterType((*NotifyFriendStateChange)(nil), "lq.NotifyFriendStateChange")
	proto.RegisterType((*NotifyFriendViewChange)(nil), "lq.NotifyFriendViewChange")
	proto.RegisterType((*NotifyFriendChange)(nil), "lq.NotifyFriendChange")
	proto.RegisterType((*NotifyNewFriendApply)(nil), "lq.NotifyNewFriendApply")
	proto.RegisterType((*NotifyClientMessage)(nil), "lq.NotifyClientMessage")
	proto.RegisterType((*NotifyAccountUpdate)(nil), "lq.NotifyAccountUpdate")
	proto.RegisterType((*NotifyAnotherLogin)(nil), "lq.NotifyAnotherLogin")
	proto.RegisterType((*NotifyAccountLogout)(nil), "lq.NotifyAccountLogout")
	proto.RegisterType((*NotifyAnnouncementUpdate)(nil), "lq.NotifyAnnouncementUpdate")
	proto.RegisterType((*NotifyNewMail)(nil), "lq.NotifyNewMail")
	proto.RegisterType((*NotifyDeleteMail)(nil), "lq.NotifyDeleteMail")
	proto.RegisterType((*NotifyReviveCoinUpdate)(nil), "lq.NotifyReviveCoinUpdate")
	proto.RegisterType((*NotifyDailyTaskUpdate)(nil), "lq.NotifyDailyTaskUpdate")
	proto.RegisterType((*NotifyActivityTaskUpdate)(nil), "lq.NotifyActivityTaskUpdate")
	proto.RegisterType((*NotifyNewComment)(nil), "lq.NotifyNewComment")
	proto.RegisterType((*NotifyRollingNotice)(nil), "lq.NotifyRollingNotice")
	proto.RegisterType((*NotifyGiftSendRefresh)(nil), "lq.NotifyGiftSendRefresh")
	proto.RegisterType((*NotifyShopUpdate)(nil), "lq.NotifyShopUpdate")
	proto.RegisterType((*NotifyVipLevelChange)(nil), "lq.NotifyVipLevelChange")
	proto.RegisterType((*NotifyServerSetting)(nil), "lq.NotifyServerSetting")
	proto.RegisterType((*NotifyPayResult)(nil), "lq.NotifyPayResult")
	proto.RegisterType((*NotifyCustomContestAccountMsg)(nil), "lq.NotifyCustomContestAccountMsg")
	proto.RegisterType((*NotifyCustomContestSystemMsg)(nil), "lq.NotifyCustomContestSystemMsg")
	proto.RegisterType((*NotifyCustomContestState)(nil), "lq.NotifyCustomContestState")
	proto.RegisterType((*NotifyActivityChange)(nil), "lq.NotifyActivityChange")
	proto.RegisterType((*Error)(nil), "lq.Error")
	proto.RegisterType((*Wrapper)(nil), "lq.Wrapper")
	proto.RegisterType((*NetworkEndpoint)(nil), "lq.NetworkEndpoint")
	proto.RegisterType((*ReqCommon)(nil), "lq.ReqCommon")
	proto.RegisterType((*ResCommon)(nil), "lq.ResCommon")
	proto.RegisterType((*ResAccountUpdate)(nil), "lq.ResAccountUpdate")
	proto.RegisterType((*AntiAddiction)(nil), "lq.AntiAddiction")
	proto.RegisterType((*AccountMahjongStatistic)(nil), "lq.AccountMahjongStatistic")
	proto.RegisterType((*AccountMahjongStatistic_RoundSummary)(nil), "lq.AccountMahjongStatistic.RoundSummary")
	proto.RegisterType((*AccountMahjongStatistic_HuSummary)(nil), "lq.AccountMahjongStatistic.HuSummary")
	proto.RegisterType((*AccountMahjongStatistic_HighestHuRecord)(nil), "lq.AccountMahjongStatistic.HighestHuRecord")
	proto.RegisterType((*AccountMahjongStatistic_Liqi20Summary)(nil), "lq.AccountMahjongStatistic.Liqi20Summary")
	proto.RegisterType((*AccountMahjongStatistic_LiQi10Summary)(nil), "lq.AccountMahjongStatistic.LiQi10Summary")
	proto.RegisterType((*AccountMahjongStatistic_GameResult)(nil), "lq.AccountMahjongStatistic.GameResult")
	proto.RegisterType((*AccountStatisticData)(nil), "lq.AccountStatisticData")
	proto.RegisterType((*AccountLevel)(nil), "lq.AccountLevel")
	proto.RegisterType((*Account)(nil), "lq.Account")
	proto.RegisterType((*Account_PlatformDiamond)(nil), "lq.Account.PlatformDiamond")
	proto.RegisterType((*AccountOwnerData)(nil), "lq.AccountOwnerData")
	proto.RegisterType((*AccountUpdate)(nil), "lq.AccountUpdate")
	proto.RegisterType((*AccountUpdate_NumericalUpdate)(nil), "lq.AccountUpdate.NumericalUpdate")
	proto.RegisterType((*AccountUpdate_CharacterUpdate)(nil), "lq.AccountUpdate.CharacterUpdate")
	proto.RegisterType((*AccountUpdate_AchievementUpdate)(nil), "lq.AccountUpdate.AchievementUpdate")
	proto.RegisterType((*AccountUpdate_DailyTaskUpdate)(nil), "lq.AccountUpdate.DailyTaskUpdate")
	proto.RegisterType((*AccountUpdate_TitleUpdate)(nil), "lq.AccountUpdate.TitleUpdate")
	proto.RegisterType((*AccountUpdate_ActivityTaskUpdate)(nil), "lq.AccountUpdate.ActivityTaskUpdate")
	proto.RegisterType((*AccountUpdate_ActivityFlipTaskUpdate)(nil), "lq.AccountUpdate.ActivityFlipTaskUpdate")
	proto.RegisterType((*GameMetaData)(nil), "lq.GameMetaData")
	proto.RegisterType((*AccountPlayingGame)(nil), "lq.AccountPlayingGame")
	proto.RegisterType((*AccountCacheView)(nil), "lq.AccountCacheView")
	proto.RegisterType((*PlayerBaseView)(nil), "lq.PlayerBaseView")
	proto.RegisterType((*PlayerGameView)(nil), "lq.PlayerGameView")
	proto.RegisterType((*GameMode)(nil), "lq.GameMode")
	proto.RegisterType((*GameTestingEnvironmentSet)(nil), "lq.GameTestingEnvironmentSet")
	proto.RegisterType((*GameDetailRule)(nil), "lq.GameDetailRule")
	proto.RegisterType((*Room)(nil), "lq.Room")
	proto.RegisterType((*GameEndResult)(nil), "lq.GameEndResult")
	proto.RegisterType((*GameEndResult_PlayerItem)(nil), "lq.GameEndResult.PlayerItem")
	proto.RegisterType((*GameConnectInfo)(nil), "lq.GameConnectInfo")
	proto.RegisterType((*ItemGainRecord)(nil), "lq.ItemGainRecord")
	proto.RegisterType((*ItemGainRecords)(nil), "lq.ItemGainRecords")
	proto.RegisterType((*Item)(nil), "lq.Item")
	proto.RegisterType((*Bag)(nil), "lq.Bag")
	proto.RegisterType((*BagUpdate)(nil), "lq.BagUpdate")
	proto.RegisterType((*RewardSlot)(nil), "lq.RewardSlot")
	proto.RegisterType((*OpenResult)(nil), "lq.OpenResult")
	proto.RegisterType((*RewardPlusResult)(nil), "lq.RewardPlusResult")
	proto.RegisterType((*RewardPlusResult_Exchange)(nil), "lq.RewardPlusResult.Exchange")
	proto.RegisterType((*ExecuteReward)(nil), "lq.ExecuteReward")
	proto.RegisterType((*Mail)(nil), "lq.Mail")
	proto.RegisterType((*AchievementProgress)(nil), "lq.AchievementProgress")
	proto.RegisterType((*AccountStatisticByGameMode)(nil), "lq.AccountStatisticByGameMode")
	proto.RegisterType((*AccountStatisticByGameMode_RoundEndData)(nil), "lq.AccountStatisticByGameMode.RoundEndData")
	proto.RegisterType((*AccountStatisticByGameMode_RankScore)(nil), "lq.AccountStatisticByGameMode.RankScore")
	proto.RegisterType((*AccountStatisticByFan)(nil), "lq.AccountStatisticByFan")
	proto.RegisterType((*AccountFanAchieved)(nil), "lq.AccountFanAchieved")
	proto.RegisterType((*AccountDetailStatistic)(nil), "lq.AccountDetailStatistic")
	proto.RegisterType((*AccountDetailStatisticByCategory)(nil), "lq.AccountDetailStatisticByCategory")
	proto.RegisterType((*AccountDetailStatisticV2)(nil), "lq.AccountDetailStatisticV2")
	proto.RegisterType((*AccountDetailStatisticV2_RankStatistic)(nil), "lq.AccountDetailStatisticV2.RankStatistic")
	proto.RegisterType((*AccountDetailStatisticV2_RankStatistic_RankData)(nil), "lq.AccountDetailStatisticV2.RankStatistic.RankData")
	proto.RegisterType((*AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData)(nil), "lq.AccountDetailStatisticV2.RankStatistic.RankData.RankLevelData")
	proto.RegisterType((*AccountDetailStatisticV2_CustomizedContestStatistic)(nil), "lq.AccountDetailStatisticV2.CustomizedContestStatistic")
	proto.RegisterType((*AccountShiLian)(nil), "lq.AccountShiLian")
	proto.RegisterType((*ClientDeviceInfo)(nil), "lq.ClientDeviceInfo")
	proto.RegisterType((*Announcement)(nil), "lq.Announcement")
	proto.RegisterType((*TaskProgress)(nil), "lq.TaskProgress")
	proto.RegisterType((*GameConfig)(nil), "lq.GameConfig")
	proto.RegisterType((*AccountActiveState)(nil), "lq.AccountActiveState")
	proto.RegisterType((*Friend)(nil), "lq.Friend")
	proto.RegisterType((*GameLiveUnit)(nil), "lq.GameLiveUnit")
	proto.RegisterType((*GameLiveSegment)(nil), "lq.GameLiveSegment")
	proto.RegisterType((*GameLiveSegmentUri)(nil), "lq.GameLiveSegmentUri")
	proto.RegisterType((*GameLiveHead)(nil), "lq.GameLiveHead")
	proto.RegisterType((*GameNewRoundState)(nil), "lq.GameNewRoundState")
	proto.RegisterType((*GameEndAction)(nil), "lq.GameEndAction")
	proto.RegisterType((*GameNoopAction)(nil), "lq.GameNoopAction")
	proto.RegisterType((*CommentItem)(nil), "lq.CommentItem")
	proto.RegisterType((*RollingNotice)(nil), "lq.RollingNotice")
	proto.RegisterType((*BillingGoods)(nil), "lq.BillingGoods")
	proto.RegisterType((*BillShortcut)(nil), "lq.BillShortcut")
	proto.RegisterType((*BillingProduct)(nil), "lq.BillingProduct")
	proto.RegisterType((*Character)(nil), "lq.Character")
	proto.RegisterType((*Character_ViewSlotSet)(nil), "lq.Character.ViewSlotSet")
	proto.RegisterType((*BuyRecord)(nil), "lq.BuyRecord")
	proto.RegisterType((*ZHPShop)(nil), "lq.ZHPShop")
	proto.RegisterType((*ZHPShop_RefreshCount)(nil), "lq.ZHPShop.RefreshCount")
	proto.RegisterType((*MonthTicketInfo)(nil), "lq.MonthTicketInfo")
	proto.RegisterType((*ShopInfo)(nil), "lq.ShopInfo")
	proto.RegisterType((*ChangeNicknameRecord)(nil), "lq.ChangeNicknameRecord")
	proto.RegisterType((*ServerSettings)(nil), "lq.ServerSettings")
	proto.RegisterType((*PaymentSetting)(nil), "lq.PaymentSetting")
	proto.RegisterType((*PaymentSetting_WechatData)(nil), "lq.PaymentSetting.WechatData")
	proto.RegisterType((*PaymentSetting_AlipayData)(nil), "lq.PaymentSetting.AlipayData")
	proto.RegisterType((*AccountSetting)(nil), "lq.AccountSetting")
	proto.RegisterType((*ChestData)(nil), "lq.ChestData")
	proto.RegisterType((*ChestDataV2)(nil), "lq.ChestDataV2")
	proto.RegisterType((*FaithData)(nil), "lq.FaithData")
	proto.RegisterType((*CustomizedContestBase)(nil), "lq.CustomizedContestBase")
	proto.RegisterType((*CustomizedContestExtend)(nil), "lq.CustomizedContestExtend")
	proto.RegisterType((*CustomizedContestAbstract)(nil), "lq.CustomizedContestAbstract")
	proto.RegisterType((*CustomizedContestDetail)(nil), "lq.CustomizedContestDetail")
	proto.RegisterType((*CustomizedContestPlayerReport)(nil), "lq.CustomizedContestPlayerReport")
	proto.RegisterType((*RecordGame)(nil), "lq.RecordGame")
	proto.RegisterType((*RecordGame_AccountInfo)(nil), "lq.RecordGame.AccountInfo")
	proto.RegisterType((*CustomizedContestGameStart)(nil), "lq.CustomizedContestGameStart")
	proto.RegisterType((*CustomizedContestGameStart_Item)(nil), "lq.CustomizedContestGameStart.Item")
	proto.RegisterType((*CustomizedContestGameEnd)(nil), "lq.CustomizedContestGameEnd")
	proto.RegisterType((*CustomizedContestGameEnd_Item)(nil), "lq.CustomizedContestGameEnd.Item")
	proto.RegisterType((*Activity)(nil), "lq.Activity")
	proto.RegisterType((*ExchangeRecord)(nil), "lq.ExchangeRecord")
	proto.RegisterType((*ActivityAccumulatedPointData)(nil), "lq.ActivityAccumulatedPointData")
	proto.RegisterType((*ActivityRankPointData)(nil), "lq.ActivityRankPointData")
	proto.RegisterType((*GameRoundHuData)(nil), "lq.GameRoundHuData")
	proto.RegisterType((*GameRoundHuData_HuPai)(nil), "lq.GameRoundHuData.HuPai")
	proto.RegisterType((*GameRoundHuData_Fan)(nil), "lq.GameRoundHuData.Fan")
	proto.RegisterType((*GameRoundPlayerResult)(nil), "lq.GameRoundPlayerResult")
	proto.RegisterType((*GameRoundPlayer)(nil), "lq.GameRoundPlayer")
	proto.RegisterType((*GameRoundSnapshot)(nil), "lq.GameRoundSnapshot")
	proto.RegisterType((*GameFinalSnapshot)(nil), "lq.GameFinalSnapshot")
	proto.RegisterType((*GameFinalSnapshot_CalculateParam)(nil), "lq.GameFinalSnapshot.CalculateParam")
	proto.RegisterType((*GameFinalSnapshot_GameSeat)(nil), "lq.GameFinalSnapshot.GameSeat")
	proto.RegisterType((*GameFinalSnapshot_FinalPlayer)(nil), "lq.GameFinalSnapshot.FinalPlayer")
	proto.RegisterType((*RecordCollectedData)(nil), "lq.RecordCollectedData")
	proto.RegisterType((*ResConnectionInfo)(nil), "lq.ResConnectionInfo")
	proto.RegisterType((*ReqSignupAccount)(nil), "lq.ReqSignupAccount")
	proto.RegisterType((*ResSignupAccount)(nil), "lq.ResSignupAccount")
	proto.RegisterType((*ReqLogin)(nil), "lq.ReqLogin")
	proto.RegisterType((*ResLogin)(nil), "lq.ResLogin")
	proto.RegisterType((*ReqEmailLogin)(nil), "lq.ReqEmailLogin")
	proto.RegisterType((*ReqBindAccount)(nil), "lq.ReqBindAccount")
	proto.RegisterType((*ReqCreatePhoneVerifyCode)(nil), "lq.ReqCreatePhoneVerifyCode")
	proto.RegisterType((*ReqCreateEmailVerifyCode)(nil), "lq.ReqCreateEmailVerifyCode")
	proto.RegisterType((*ReqVerifyCodeForSecure)(nil), "lq.ReqVerifyCodeForSecure")
	proto.RegisterType((*ResVerfiyCodeForSecure)(nil), "lq.ResVerfiyCodeForSecure")
	proto.RegisterType((*ReqBindPhoneNumber)(nil), "lq.ReqBindPhoneNumber")
	proto.RegisterType((*ReqBindEmail)(nil), "lq.ReqBindEmail")
	proto.RegisterType((*ReqModifyPassword)(nil), "lq.ReqModifyPassword")
	proto.RegisterType((*ReqOauth2Auth)(nil), "lq.ReqOauth2Auth")
	proto.RegisterType((*ResOauth2Auth)(nil), "lq.ResOauth2Auth")
	proto.RegisterType((*ReqOauth2Check)(nil), "lq.ReqOauth2Check")
	proto.RegisterType((*ResOauth2Check)(nil), "lq.ResOauth2Check")
	proto.RegisterType((*ReqOauth2Signup)(nil), "lq.ReqOauth2Signup")
	proto.RegisterType((*ResOauth2Signup)(nil), "lq.ResOauth2Signup")
	proto.RegisterType((*ReqOauth2Login)(nil), "lq.ReqOauth2Login")
	proto.RegisterType((*ReqLogout)(nil), "lq.ReqLogout")
	proto.RegisterType((*ResLogout)(nil), "lq.ResLogout")
	proto.RegisterType((*ReqHeatBeat)(nil), "lq.ReqHeatBeat")
	proto.RegisterType((*ReqLoginBeat)(nil), "lq.ReqLoginBeat")
	proto.RegisterType((*ReqJoinMatchQueue)(nil), "lq.ReqJoinMatchQueue")
	proto.RegisterType((*ReqCancelMatchQueue)(nil), "lq.ReqCancelMatchQueue")
	proto.RegisterType((*ReqAccountInfo)(nil), "lq.ReqAccountInfo")
	proto.RegisterType((*ResAccountInfo)(nil), "lq.ResAccountInfo")
	proto.RegisterType((*ReqCreateNickname)(nil), "lq.ReqCreateNickname")
	proto.RegisterType((*ReqModifyNickname)(nil), "lq.ReqModifyNickname")
	proto.RegisterType((*ReqModifyBirthday)(nil), "lq.ReqModifyBirthday")
	proto.RegisterType((*ResSelfRoom)(nil), "lq.ResSelfRoom")
	proto.RegisterType((*ReqCreateRoom)(nil), "lq.ReqCreateRoom")
	proto.RegisterType((*ResCreateRoom)(nil), "lq.ResCreateRoom")
	proto.RegisterType((*ReqJoinRoom)(nil), "lq.ReqJoinRoom")
	proto.RegisterType((*ResJoinRoom)(nil), "lq.ResJoinRoom")
	proto.RegisterType((*ReqRoomReady)(nil), "lq.ReqRoomReady")
	proto.RegisterType((*ReqRoomStart)(nil), "lq.ReqRoomStart")
	proto.RegisterType((*ReqRoomKick)(nil), "lq.ReqRoomKick")
	proto.RegisterType((*ReqModifyRoom)(nil), "lq.ReqModifyRoom")
	proto.RegisterType((*ReqChangeAvatar)(nil), "lq.ReqChangeAvatar")
	proto.RegisterType((*ReqAccountStatisticInfo)(nil), "lq.ReqAccountStatisticInfo")
	proto.RegisterType((*ResAccountStatisticInfo)(nil), "lq.ResAccountStatisticInfo")
	proto.RegisterType((*ResAccountCharacterInfo)(nil), "lq.ResAccountCharacterInfo")
	proto.RegisterType((*ReqShopPurchase)(nil), "lq.ReqShopPurchase")
	proto.RegisterType((*ResShopPurchase)(nil), "lq.ResShopPurchase")
	proto.RegisterType((*ReqGameRecord)(nil), "lq.ReqGameRecord")
	proto.RegisterType((*ResGameRecord)(nil), "lq.ResGameRecord")
	proto.RegisterType((*ReqGameRecordList)(nil), "lq.ReqGameRecordList")
	proto.RegisterType((*ResGameRecordList)(nil), "lq.ResGameRecordList")
	proto.RegisterType((*ResCollectedGameRecordList)(nil), "lq.ResCollectedGameRecordList")
	proto.RegisterType((*ReqGameRecordsDetail)(nil), "lq.ReqGameRecordsDetail")
	proto.RegisterType((*ResGameRecordsDetail)(nil), "lq.ResGameRecordsDetail")
	proto.RegisterType((*ReqAddCollectedGameRecord)(nil), "lq.ReqAddCollectedGameRecord")
	proto.RegisterType((*ResAddCollectedGameRecord)(nil), "lq.ResAddCollectedGameRecord")
	proto.RegisterType((*ReqRemoveCollectedGameRecord)(nil), "lq.ReqRemoveCollectedGameRecord")
	proto.RegisterType((*ResRemoveCollectedGameRecord)(nil), "lq.ResRemoveCollectedGameRecord")
	proto.RegisterType((*ReqChangeCollectedGameRecordRemarks)(nil), "lq.ReqChangeCollectedGameRecordRemarks")
	proto.RegisterType((*ResChangeCollectedGameRecordRemarks)(nil), "lq.ResChangeCollectedGameRecordRemarks")
	proto.RegisterType((*ReqLevelLeaderboard)(nil), "lq.ReqLevelLeaderboard")
	proto.RegisterType((*ResLevelLeaderboard)(nil), "lq.ResLevelLeaderboard")
	proto.RegisterType((*ResLevelLeaderboard_Item)(nil), "lq.ResLevelLeaderboard.Item")
	proto.RegisterType((*ReqMultiAccountId)(nil), "lq.ReqMultiAccountId")
	proto.RegisterType((*ResMultiAccountBrief)(nil), "lq.ResMultiAccountBrief")
	proto.RegisterType((*ResFriendList)(nil), "lq.ResFriendList")
	proto.RegisterType((*ResFriendApplyList)(nil), "lq.ResFriendApplyList")
	proto.RegisterType((*ResFriendApplyList_FriendApply)(nil), "lq.ResFriendApplyList.FriendApply")
	proto.RegisterType((*ReqApplyFriend)(nil), "lq.ReqApplyFriend")
	proto.RegisterType((*ReqHandleFriendApply)(nil), "lq.ReqHandleFriendApply")
	proto.RegisterType((*ReqRemoveFriend)(nil), "lq.ReqRemoveFriend")
	proto.RegisterType((*ReqSearchAccountByPattern)(nil), "lq.ReqSearchAccountByPattern")
	proto.RegisterType((*ResSearchAccountByPattern)(nil), "lq.ResSearchAccountByPattern")
	proto.RegisterType((*ReqAccountList)(nil), "lq.ReqAccountList")
	proto.RegisterType((*ResAccountStates)(nil), "lq.ResAccountStates")
	proto.RegisterType((*ReqSearchAccountById)(nil), "lq.ReqSearchAccountById")
	proto.RegisterType((*ResSearchAccountById)(nil), "lq.ResSearchAccountById")
	proto.RegisterType((*ResBagInfo)(nil), "lq.ResBagInfo")
	proto.RegisterType((*ReqUseBagItem)(nil), "lq.ReqUseBagItem")
	proto.RegisterType((*ReqOpenManualItem)(nil), "lq.ReqOpenManualItem")
	proto.RegisterType((*ReqOpenRandomRewardItem)(nil), "lq.ReqOpenRandomRewardItem")
	proto.RegisterType((*ResOpenRandomRewardItem)(nil), "lq.ResOpenRandomRewardItem")
	proto.RegisterType((*ReqComposeShard)(nil), "lq.ReqComposeShard")
	proto.RegisterType((*ResAnnouncement)(nil), "lq.ResAnnouncement")
	proto.RegisterType((*ResMailInfo)(nil), "lq.ResMailInfo")
	proto.RegisterType((*ReqReadMail)(nil), "lq.ReqReadMail")
	proto.RegisterType((*ReqDeleteMail)(nil), "lq.ReqDeleteMail")
	proto.RegisterType((*ReqTakeAttachment)(nil), "lq.ReqTakeAttachment")
	proto.RegisterType((*ResAchievement)(nil), "lq.ResAchievement")
	proto.RegisterType((*ResTitleList)(nil), "lq.ResTitleList")
	proto.RegisterType((*ReqUseTitle)(nil), "lq.ReqUseTitle")
	proto.RegisterType((*ReqBuyShiLian)(nil), "lq.ReqBuyShiLian")
	proto.RegisterType((*ReqUpdateClientValue)(nil), "lq.ReqUpdateClientValue")
	proto.RegisterType((*ResClientValue)(nil), "lq.ResClientValue")
	proto.RegisterType((*ResClientValue_Value)(nil), "lq.ResClientValue.Value")
	proto.RegisterType((*ReqClientMessage)(nil), "lq.ReqClientMessage")
	proto.RegisterType((*ReqCurrentMatchInfo)(nil), "lq.ReqCurrentMatchInfo")
	proto.RegisterType((*ResCurrentMatchInfo)(nil), "lq.ResCurrentMatchInfo")
	proto.RegisterType((*ResCurrentMatchInfo_CurrentMatchInfo)(nil), "lq.ResCurrentMatchInfo.CurrentMatchInfo")
	proto.RegisterType((*ReqReadAnnouncement)(nil), "lq.ReqReadAnnouncement")
	proto.RegisterType((*ResReviveCoinInfo)(nil), "lq.ResReviveCoinInfo")
	proto.RegisterType((*ResDailyTask)(nil), "lq.ResDailyTask")
	proto.RegisterType((*ReqRefreshDailyTask)(nil), "lq.ReqRefreshDailyTask")
	proto.RegisterType((*ResRefreshDailyTask)(nil), "lq.ResRefreshDailyTask")
	proto.RegisterType((*ReqUseGiftCode)(nil), "lq.ReqUseGiftCode")
	proto.RegisterType((*ResUseGiftCode)(nil), "lq.ResUseGiftCode")
	proto.RegisterType((*ReqSendClientMessage)(nil), "lq.ReqSendClientMessage")
	proto.RegisterType((*ReqGameLiveInfo)(nil), "lq.ReqGameLiveInfo")
	proto.RegisterType((*ResGameLiveInfo)(nil), "lq.ResGameLiveInfo")
	proto.RegisterType((*ReqGameLiveLeftSegment)(nil), "lq.ReqGameLiveLeftSegment")
	proto.RegisterType((*ResGameLiveLeftSegment)(nil), "lq.ResGameLiveLeftSegment")
	proto.RegisterType((*ReqGameLiveList)(nil), "lq.ReqGameLiveList")
	proto.RegisterType((*ResGameLiveList)(nil), "lq.ResGameLiveList")
	proto.RegisterType((*ResCommentSetting)(nil), "lq.ResCommentSetting")
	proto.RegisterType((*ReqUpdateCommentSetting)(nil), "lq.ReqUpdateCommentSetting")
	proto.RegisterType((*ReqFetchCommentList)(nil), "lq.ReqFetchCommentList")
	proto.RegisterType((*ResFetchCommentList)(nil), "lq.ResFetchCommentList")
	proto.RegisterType((*ReqFetchCommentContent)(nil), "lq.ReqFetchCommentContent")
	proto.RegisterType((*ResFetchCommentContent)(nil), "lq.ResFetchCommentContent")
	proto.RegisterType((*ReqLeaveComment)(nil), "lq.ReqLeaveComment")
	proto.RegisterType((*ReqDeleteComment)(nil), "lq.ReqDeleteComment")
	proto.RegisterType((*ReqUpdateReadComment)(nil), "lq.ReqUpdateReadComment")
	proto.RegisterType((*ReqRollingNotice)(nil), "lq.ReqRollingNotice")
	proto.RegisterType((*ResServerTime)(nil), "lq.ResServerTime")
	proto.RegisterType((*ReqPlatformBillingProducts)(nil), "lq.ReqPlatformBillingProducts")
	proto.RegisterType((*ResPlatformBillingProducts)(nil), "lq.ResPlatformBillingProducts")
	proto.RegisterType((*ReqCreateBillingOrder)(nil), "lq.ReqCreateBillingOrder")
	proto.RegisterType((*ResCreateBillingOrder)(nil), "lq.ResCreateBillingOrder")
	proto.RegisterType((*ReqSolveGooglePlayOrder)(nil), "lq.ReqSolveGooglePlayOrder")
	proto.RegisterType((*ReqCancelGooglePlayOrder)(nil), "lq.ReqCancelGooglePlayOrder")
	proto.RegisterType((*ReqCreateWechatNativeOrder)(nil), "lq.ReqCreateWechatNativeOrder")
	proto.RegisterType((*ResCreateWechatNativeOrder)(nil), "lq.ResCreateWechatNativeOrder")
	proto.RegisterType((*ReqCreateWechatAppOrder)(nil), "lq.ReqCreateWechatAppOrder")
	proto.RegisterType((*ResCreateWechatAppOrder)(nil), "lq.ResCreateWechatAppOrder")
	proto.RegisterType((*ResCreateWechatAppOrder_CallWechatAppParam)(nil), "lq.ResCreateWechatAppOrder.CallWechatAppParam")
	proto.RegisterType((*ReqCreateAlipayOrder)(nil), "lq.ReqCreateAlipayOrder")
	proto.RegisterType((*ResCreateAlipayOrder)(nil), "lq.ResCreateAlipayOrder")
	proto.RegisterType((*ReqCreateAlipayScanOrder)(nil), "lq.ReqCreateAlipayScanOrder")
	proto.RegisterType((*ResCreateAlipayScanOrder)(nil), "lq.ResCreateAlipayScanOrder")
	proto.RegisterType((*ReqCreateAlipayAppOrder)(nil), "lq.ReqCreateAlipayAppOrder")
	proto.RegisterType((*ResCreateAlipayAppOrder)(nil), "lq.ResCreateAlipayAppOrder")
	proto.RegisterType((*ReqCreateJPCreditCardOrder)(nil), "lq.ReqCreateJPCreditCardOrder")
	proto.RegisterType((*ResCreateJPCreditCardOrder)(nil), "lq.ResCreateJPCreditCardOrder")
	proto.RegisterType((*ReqCreateJPPaypalOrder)(nil), "lq.ReqCreateJPPaypalOrder")
	proto.RegisterType((*ResCreateJPPaypalOrder)(nil), "lq.ResCreateJPPaypalOrder")
	proto.RegisterType((*ReqCreateJPAuOrder)(nil), "lq.ReqCreateJPAuOrder")
	proto.RegisterType((*ResCreateJPAuOrder)(nil), "lq.ResCreateJPAuOrder")
	proto.RegisterType((*ReqCreateJPDocomoOrder)(nil), "lq.ReqCreateJPDocomoOrder")
	proto.RegisterType((*ResCreateJPDocomoOrder)(nil), "lq.ResCreateJPDocomoOrder")
	proto.RegisterType((*ReqCreateJPWebMoneyOrder)(nil), "lq.ReqCreateJPWebMoneyOrder")
	proto.RegisterType((*ResCreateJPWebMoneyOrder)(nil), "lq.ResCreateJPWebMoneyOrder")
	proto.RegisterType((*ReqCreateJPSoftbankOrder)(nil), "lq.ReqCreateJPSoftbankOrder")
	proto.RegisterType((*ResCreateJPSoftbankOrder)(nil), "lq.ResCreateJPSoftbankOrder")
	proto.RegisterType((*ReqCreateENPaypalOrder)(nil), "lq.ReqCreateENPaypalOrder")
	proto.RegisterType((*ResCreateENPaypalOrder)(nil), "lq.ResCreateENPaypalOrder")
	proto.RegisterType((*ReqCreateENJCBOrder)(nil), "lq.ReqCreateENJCBOrder")
	proto.RegisterType((*ResCreateENJCBOrder)(nil), "lq.ResCreateENJCBOrder")
	proto.RegisterType((*ReqCreateENMasterCardOrder)(nil), "lq.ReqCreateENMasterCardOrder")
	proto.RegisterType((*ResCreateENMasterCardOrder)(nil), "lq.ResCreateENMasterCardOrder")
	proto.RegisterType((*ReqCreateENVisaOrder)(nil), "lq.ReqCreateENVisaOrder")
	proto.RegisterType((*ResCreateENVisaOrder)(nil), "lq.ResCreateENVisaOrder")
	proto.RegisterType((*ReqCreateENAlipayOrder)(nil), "lq.ReqCreateENAlipayOrder")
	proto.RegisterType((*ResCreateENAlipayOrder)(nil), "lq.ResCreateENAlipayOrder")
	proto.RegisterType((*ReqOpenChest)(nil), "lq.ReqOpenChest")
	proto.RegisterType((*ResOpenChest)(nil), "lq.ResOpenChest")
	proto.RegisterType((*ReqBuyFromChestShop)(nil), "lq.ReqBuyFromChestShop")
	proto.RegisterType((*ResBuyFromChestShop)(nil), "lq.ResBuyFromChestShop")
	proto.RegisterType((*ResDailySignInInfo)(nil), "lq.ResDailySignInInfo")
	proto.RegisterType((*ReqDoActivitySignIn)(nil), "lq.ReqDoActivitySignIn")
	proto.RegisterType((*ResDoActivitySignIn)(nil), "lq.ResDoActivitySignIn")
	proto.RegisterType((*ResDoActivitySignIn_RewardData)(nil), "lq.ResDoActivitySignIn.RewardData")
	proto.RegisterType((*ResCharacterInfo)(nil), "lq.ResCharacterInfo")
	proto.RegisterType((*ReqChangeMainCharacter)(nil), "lq.ReqChangeMainCharacter")
	proto.RegisterType((*ReqChangeCharacterSkin)(nil), "lq.ReqChangeCharacterSkin")
	proto.RegisterType((*ReqChangeCharacterView)(nil), "lq.ReqChangeCharacterView")
	proto.RegisterType((*ReqSendGiftToCharacter)(nil), "lq.ReqSendGiftToCharacter")
	proto.RegisterType((*ReqSendGiftToCharacter_Gift)(nil), "lq.ReqSendGiftToCharacter.Gift")
	proto.RegisterType((*ResSendGiftToCharacter)(nil), "lq.ResSendGiftToCharacter")
	proto.RegisterType((*ReqSellItem)(nil), "lq.ReqSellItem")
	proto.RegisterType((*ReqSellItem_Item)(nil), "lq.ReqSellItem.Item")
	proto.RegisterType((*ResCommonView)(nil), "lq.ResCommonView")
	proto.RegisterType((*ResCommonView_Slot)(nil), "lq.ResCommonView.Slot")
	proto.RegisterType((*ReqChangeCommonView)(nil), "lq.ReqChangeCommonView")
	proto.RegisterType((*ReqUpgradeCharacter)(nil), "lq.ReqUpgradeCharacter")
	proto.RegisterType((*ResUpgradeCharacter)(nil), "lq.ResUpgradeCharacter")
	proto.RegisterType((*ReqGMCommand)(nil), "lq.ReqGMCommand")
	proto.RegisterType((*ResShopInfo)(nil), "lq.ResShopInfo")
	proto.RegisterType((*ReqBuyFromShop)(nil), "lq.ReqBuyFromShop")
	proto.RegisterType((*ResBuyFromShop)(nil), "lq.ResBuyFromShop")
	proto.RegisterType((*ReqBuyFromZHP)(nil), "lq.ReqBuyFromZHP")
	proto.RegisterType((*ReqPayMonthTicket)(nil), "lq.ReqPayMonthTicket")
	proto.RegisterType((*ResPayMonthTicket)(nil), "lq.ResPayMonthTicket")
	proto.RegisterType((*ResRefreshZHPShop)(nil), "lq.ResRefreshZHPShop")
	proto.RegisterType((*ResMonthTicketInfo)(nil), "lq.ResMonthTicketInfo")
	proto.RegisterType((*ReqExchangeCurrency)(nil), "lq.ReqExchangeCurrency")
	proto.RegisterType((*ResServerSettings)(nil), "lq.ResServerSettings")
	proto.RegisterType((*ResAccountSettings)(nil), "lq.ResAccountSettings")
	proto.RegisterType((*ReqUpdateAccountSettings)(nil), "lq.ReqUpdateAccountSettings")
	proto.RegisterType((*ResModNicknameTime)(nil), "lq.ResModNicknameTime")
	proto.RegisterType((*ResMisc)(nil), "lq.ResMisc")
	proto.RegisterType((*ReqModifySignature)(nil), "lq.ReqModifySignature")
	proto.RegisterType((*ResIDCardInfo)(nil), "lq.ResIDCardInfo")
	proto.RegisterType((*ReqUpdateIDCardInfo)(nil), "lq.ReqUpdateIDCardInfo")
	proto.RegisterType((*ResVipReward)(nil), "lq.ResVipReward")
	proto.RegisterType((*ReqGainVipReward)(nil), "lq.ReqGainVipReward")
	proto.RegisterType((*ReqFetchCustomizedContestList)(nil), "lq.ReqFetchCustomizedContestList")
	proto.RegisterType((*ResFetchCustomizedContestList)(nil), "lq.ResFetchCustomizedContestList")
	proto.RegisterType((*ReqFetchCustomizedContestExtendInfo)(nil), "lq.ReqFetchCustomizedContestExtendInfo")
	proto.RegisterType((*ResFetchCustomizedContestExtendInfo)(nil), "lq.ResFetchCustomizedContestExtendInfo")
	proto.RegisterType((*ReqEnterCustomizedContest)(nil), "lq.ReqEnterCustomizedContest")
	proto.RegisterType((*ResEnterCustomizedContest)(nil), "lq.ResEnterCustomizedContest")
	proto.RegisterType((*ReqFetchCustomizedContestOnlineInfo)(nil), "lq.ReqFetchCustomizedContestOnlineInfo")
	proto.RegisterType((*ResFetchCustomizedContestOnlineInfo)(nil), "lq.ResFetchCustomizedContestOnlineInfo")
	proto.RegisterType((*ReqFetchCustomizedContestByContestId)(nil), "lq.ReqFetchCustomizedContestByContestId")
	proto.RegisterType((*ResFetchCustomizedContestByContestId)(nil), "lq.ResFetchCustomizedContestByContestId")
	proto.RegisterType((*ReqStartCustomizedContest)(nil), "lq.ReqStartCustomizedContest")
	proto.RegisterType((*ReqJoinCustomizedContestChatRoom)(nil), "lq.ReqJoinCustomizedContestChatRoom")
	proto.RegisterType((*ResJoinCustomizedContestChatRoom)(nil), "lq.ResJoinCustomizedContestChatRoom")
	proto.RegisterType((*ReqSayChatMessage)(nil), "lq.ReqSayChatMessage")
	proto.RegisterType((*ReqFetchCustomizedContestGameLiveList)(nil), "lq.ReqFetchCustomizedContestGameLiveList")
	proto.RegisterType((*ResFetchCustomizedContestGameLiveList)(nil), "lq.ResFetchCustomizedContestGameLiveList")
	proto.RegisterType((*ReqFetchCustomizedContestGameRecords)(nil), "lq.ReqFetchCustomizedContestGameRecords")
	proto.RegisterType((*ResFetchCustomizedContestGameRecords)(nil), "lq.ResFetchCustomizedContestGameRecords")
	proto.RegisterType((*ReqTargetCustomizedContest)(nil), "lq.ReqTargetCustomizedContest")
	proto.RegisterType((*ResActivityList)(nil), "lq.ResActivityList")
	proto.RegisterType((*ResAccountActivityData)(nil), "lq.ResAccountActivityData")
	proto.RegisterType((*ResAccountActivityData_ActivitySignInData)(nil), "lq.ResAccountActivityData.ActivitySignInData")
	proto.RegisterType((*ReqExchangeActivityItem)(nil), "lq.ReqExchangeActivityItem")
	proto.RegisterType((*ResExchangeActivityItem)(nil), "lq.ResExchangeActivityItem")
	proto.RegisterType((*ReqCompleteActivityTask)(nil), "lq.ReqCompleteActivityTask")
	proto.RegisterType((*ReqRecieveActivityFlipTask)(nil), "lq.ReqRecieveActivityFlipTask")
	proto.RegisterType((*ResRecieveActivityFlipTask)(nil), "lq.ResRecieveActivityFlipTask")
	proto.RegisterType((*ReqFetchActivityFlipInfo)(nil), "lq.ReqFetchActivityFlipInfo")
	proto.RegisterType((*ResFetchActivityFlipInfo)(nil), "lq.ResFetchActivityFlipInfo")
	proto.RegisterType((*ReqGainAccumulatedPointActivityReward)(nil), "lq.ReqGainAccumulatedPointActivityReward")
	proto.RegisterType((*ReqFetchRankPointLeaderboard)(nil), "lq.ReqFetchRankPointLeaderboard")
	proto.RegisterType((*ResFetchRankPointLeaderboard)(nil), "lq.ResFetchRankPointLeaderboard")
	proto.RegisterType((*ResFetchRankPointLeaderboard_Item)(nil), "lq.ResFetchRankPointLeaderboard.Item")
	proto.RegisterType((*ReqGainRankPointReward)(nil), "lq.ReqGainRankPointReward")
	proto.RegisterType((*ActionMJStart)(nil), "lq.ActionMJStart")
	proto.RegisterType((*ActionNewRound)(nil), "lq.ActionNewRound")
	proto.RegisterType((*RecordNewRound)(nil), "lq.RecordNewRound")
	proto.RegisterType((*RecordNewRound_TingPai)(nil), "lq.RecordNewRound.TingPai")
	proto.RegisterType((*GameSnapshot)(nil), "lq.GameSnapshot")
	proto.RegisterType((*GameSnapshot_PlayerSnapshot)(nil), "lq.GameSnapshot.PlayerSnapshot")
	proto.RegisterType((*GameSnapshot_PlayerSnapshot_Fulu)(nil), "lq.GameSnapshot.PlayerSnapshot.Fulu")
	proto.RegisterType((*ActionPrototype)(nil), "lq.ActionPrototype")
	proto.RegisterType((*GameDetailRecords)(nil), "lq.GameDetailRecords")
	proto.RegisterType((*OptionalOperation)(nil), "lq.OptionalOperation")
	proto.RegisterType((*OptionalOperationList)(nil), "lq.OptionalOperationList")
	proto.RegisterType((*LiQiSuccess)(nil), "lq.LiQiSuccess")
	proto.RegisterType((*FanInfo)(nil), "lq.FanInfo")
	proto.RegisterType((*HuleInfo)(nil), "lq.HuleInfo")
	proto.RegisterType((*TingPaiInfo)(nil), "lq.TingPaiInfo")
	proto.RegisterType((*TingPaiDiscardInfo)(nil), "lq.TingPaiDiscardInfo")
	proto.RegisterType((*GameEnd)(nil), "lq.GameEnd")
	proto.RegisterType((*ActionDiscardTile)(nil), "lq.ActionDiscardTile")
	proto.RegisterType((*RecordDiscardTile)(nil), "lq.RecordDiscardTile")
	proto.RegisterType((*ActionDealTile)(nil), "lq.ActionDealTile")
	proto.RegisterType((*RecordDealTile)(nil), "lq.RecordDealTile")
	proto.RegisterType((*ActionChiPengGang)(nil), "lq.ActionChiPengGang")
	proto.RegisterType((*RecordChiPengGang)(nil), "lq.RecordChiPengGang")
	proto.RegisterType((*ActionAnGangAddGang)(nil), "lq.ActionAnGangAddGang")
	proto.RegisterType((*RecordAnGangAddGang)(nil), "lq.RecordAnGangAddGang")
	proto.RegisterType((*ActionBaBei)(nil), "lq.ActionBaBei")
	proto.RegisterType((*RecordBaBei)(nil), "lq.RecordBaBei")
	proto.RegisterType((*ActionHule)(nil), "lq.ActionHule")
	proto.RegisterType((*RecordHule)(nil), "lq.RecordHule")
	proto.RegisterType((*ActionLiuJu)(nil), "lq.ActionLiuJu")
	proto.RegisterType((*RecordLiuJu)(nil), "lq.RecordLiuJu")
	proto.RegisterType((*NoTilePlayerInfo)(nil), "lq.NoTilePlayerInfo")
	proto.RegisterType((*NoTileScoreInfo)(nil), "lq.NoTileScoreInfo")
	proto.RegisterType((*ActionNoTile)(nil), "lq.ActionNoTile")
	proto.RegisterType((*RecordNoTile)(nil), "lq.RecordNoTile")
	proto.RegisterType((*ReqAuthGame)(nil), "lq.ReqAuthGame")
	proto.RegisterType((*ResAuthGame)(nil), "lq.ResAuthGame")
	proto.RegisterType((*GameRestore)(nil), "lq.GameRestore")
	proto.RegisterType((*ResEnterGame)(nil), "lq.ResEnterGame")
	proto.RegisterType((*ReqSyncGame)(nil), "lq.ReqSyncGame")
	proto.RegisterType((*ResSyncGame)(nil), "lq.ResSyncGame")
	proto.RegisterType((*ReqSelfOperation)(nil), "lq.ReqSelfOperation")
	proto.RegisterType((*ReqChiPengGang)(nil), "lq.ReqChiPengGang")
	proto.RegisterType((*ReqBroadcastInGame)(nil), "lq.ReqBroadcastInGame")
	proto.RegisterType((*ReqGMCommandInGaming)(nil), "lq.ReqGMCommandInGaming")
	proto.RegisterType((*ResGamePlayerState)(nil), "lq.ResGamePlayerState")
	proto.RegisterType((*NotifyNewGame)(nil), "lq.NotifyNewGame")
	proto.RegisterType((*NotifyPlayerLoadGameReady)(nil), "lq.NotifyPlayerLoadGameReady")
	proto.RegisterType((*NotifyGameBroadcast)(nil), "lq.NotifyGameBroadcast")
	proto.RegisterType((*NotifyGameEndResult)(nil), "lq.NotifyGameEndResult")
	proto.RegisterType((*NotifyGameTerminate)(nil), "lq.NotifyGameTerminate")
	proto.RegisterType((*NotifyPlayerConnectionState)(nil), "lq.NotifyPlayerConnectionState")
	proto.RegisterType((*NotifyAccountLevelChange)(nil), "lq.NotifyAccountLevelChange")
	proto.RegisterType((*NotifyGameFinishReward)(nil), "lq.NotifyGameFinishReward")
	proto.RegisterType((*NotifyGameFinishReward_LevelChange)(nil), "lq.NotifyGameFinishReward.LevelChange")
	proto.RegisterType((*NotifyGameFinishReward_MatchChest)(nil), "lq.NotifyGameFinishReward.MatchChest")
	proto.RegisterType((*NotifyGameFinishReward_MainCharacter)(nil), "lq.NotifyGameFinishReward.MainCharacter")
	proto.RegisterType((*NotifyGameFinishReward_CharacterGift)(nil), "lq.NotifyGameFinishReward.CharacterGift")
	proto.RegisterType((*NotifyActivityReward)(nil), "lq.NotifyActivityReward")
	proto.RegisterType((*NotifyActivityReward_ActivityReward)(nil), "lq.NotifyActivityReward.ActivityReward")
	proto.RegisterType((*NotifyActivityPoint)(nil), "lq.NotifyActivityPoint")
	proto.RegisterType((*NotifyActivityPoint_ActivityPoint)(nil), "lq.NotifyActivityPoint.ActivityPoint")
	proto.RegisterType((*NotifyLeaderboardPoint)(nil), "lq.NotifyLeaderboardPoint")
	proto.RegisterType((*NotifyLeaderboardPoint_LeaderboardPoint)(nil), "lq.NotifyLeaderboardPoint.LeaderboardPoint")
	proto.RegisterType((*NotifyGamePause)(nil), "lq.NotifyGamePause")
}

func init() { proto.RegisterFile("liqi.proto", fileDescriptor_b888a73c23735b82) }

var fileDescriptor_b888a73c23735b82 = []byte{
	// 18267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x6d, 0x8c, 0x5c, 0xc7,
	0x76, 0x20, 0xb6, 0xdd, 0xf3, 0xd5, 0x7d, 0xfa, 0x63, 0x66, 0x2e, 0xbf, 0x86, 0x4d, 0x4a, 0xa2,
	0xae, 0x44, 0x89, 0x94, 0xa8, 0x91, 0x34, 0x94, 0xf4, 0xf4, 0xa4, 0xa7, 0xa7, 0x47, 0x0e, 0x39,
	0xe4, 0xe8, 0x91, 0x14, 0xdf, 0x1d, 0x8a, 0xcf, 0x92, 0xed, 0xd7, 0xae, 0xe9, 0xae, 0xee, 0xbe,
	0x9a, 0xdb, 0xf7, 0x36, 0xef, 0xc7, 0x0c, 0x47, 0xf1, 0x22, 0x0b, 0x38, 0x5e, 0xbc, 0xfd, 0x61,
	0xc3, 0x41, 0x12, 0xef, 0x26, 0xb1, 0xd7, 0xeb, 0xc4, 0x46, 0xe0, 0x6c, 0x16, 0xc1, 0xc6, 0x09,
	0x82, 0xc4, 0x9b, 0x38, 0x09, 0xe0, 0x60, 0x03, 0x2c, 0x90, 0x00, 0xf9, 0x00, 0x82, 0x60, 0x81,
	0xac, 0xfd, 0x27, 0x48, 0x1c, 0x60, 0x91, 0xe4, 0x47, 0x12, 0x64, 0x83, 0xa0, 0xce, 0xa9, 0xaa,
	0x5b, 0xf7, 0xf6, 0xed, 0x0f, 0x8a, 0x7c, 0x6f, 0x9f, 0x10, 0xff, 0x69, 0xf4, 0x3d, 0x75, 0xea,
	0xeb, 0x54, 0xd5, 0xa9, 0x53, 0xa7, 0x4e, 0x9d, 0x03, 0xe0, 0xb9, 0x8f, 0xdc, 0xcd, 0x51, 0x18,
	0xc4, 0x81, 0x55, 0xf6, 0x1e, 0xd9, 0xbf, 0x5e, 0x82, 0x13, 0xf7, 0x82, 0xd8, 0xed, 0x1d, 0x3b,
	0x41, 0x30, 0xbc, 0xc5, 0x86, 0x7c, 0x2f, 0x66, 0x61, 0x6c, 0x9d, 0x85, 0x4a, 0x9f, 0x0d, 0x79,
	0x3b, 0x09, 0xbd, 0x8d, 0xd2, 0x85, 0xd2, 0xa5, 0xaa, 0xb3, 0x22, 0xbe, 0x3f, 0x0b, 0x3d, 0xeb,
	0x25, 0x68, 0x74, 0x02, 0xdf, 0xe7, 0x9d, 0xb8, 0x1d, 0x07, 0x07, 0xdc, 0xdf, 0x28, 0x63, 0x7a,
	0x5d, 0x02, 0x1f, 0x08, 0x98, 0x75, 0x0e, 0xaa, 0x94, 0x3f, 0x71, 0xbb, 0x1b, 0x0b, 0x88, 0x80,
	0x05, 0x7e, 0x96, 0xb8, 0x5d, 0xab, 0x05, 0x15, 0x2f, 0xe8, 0xb0, 0xd8, 0x0d, 0xfc, 0x8d, 0x45,
	0x4a, 0x53, 0xdf, 0xf6, 0x1f, 0x96, 0xe0, 0x24, 0x35, 0xe8, 0x2e, 0x8b, 0x3b, 0x83, 0x9f, 0x52,
	0x8b, 0x6c, 0x68, 0x0c, 0x45, 0x75, 0xed, 0x61, 0xd0, 0xe5, 0x6d, 0xb7, 0x8b, 0xcd, 0x6a, 0x38,
	0x35, 0x04, 0xde, 0x0d, 0xba, 0x7c, 0x37, 0xdb, 0xea, 0xa5, 0x5c, 0xab, 0xef, 0xc0, 0xa9, 0x94,
	0x8a, 0xf7, 0x3d, 0x76, 0xcc, 0x43, 0x87, 0xb3, 0xee, 0xb1, 0xf5, 0x1c, 0x00, 0xeb, 0x74, 0x82,
	0xc4, 0x8f, 0x45, 0xa9, 0x25, 0x2c, 0xb5, 0x2a, 0x21, 0xbb, 0x5d, 0xeb, 0x24, 0x2c, 0x85, 0x02,
	0x0f, 0x5b, 0x5c, 0x71, 0xe8, 0xc3, 0xfe, 0x37, 0x4b, 0x70, 0x3a, 0x5f, 0xdc, 0x67, 0xa3, 0x2e,
	0x8b, 0xb9, 0x75, 0x15, 0x6a, 0x09, 0xfe, 0x6b, 0x7b, 0x6e, 0x14, 0x6f, 0x94, 0x2e, 0x2c, 0x5c,
	0xaa, 0x6d, 0x59, 0x9b, 0xde, 0xa3, 0x4d, 0x42, 0xbb, 0xce, 0x22, 0xfe, 0xd0, 0xe5, 0x47, 0x0e,
	0x10, 0xda, 0x1d, 0x37, 0x8a, 0xad, 0x17, 0xa0, 0x16, 0xf2, 0x61, 0x70, 0x28, 0x33, 0x95, 0x2f,
	0x2c, 0x5c, 0x6a, 0x38, 0x40, 0x20, 0x44, 0x38, 0x0b, 0x95, 0xe0, 0xc8, 0xe7, 0x61, 0x5b, 0x92,
	0xa6, 0xe1, 0xac, 0xe0, 0xf7, 0x6e, 0x17, 0xf3, 0x06, 0xfb, 0x41, 0xdc, 0xc6, 0x26, 0x4b, 0xba,
	0x00, 0x82, 0xb6, 0x05, 0xc4, 0x3e, 0x01, 0xeb, 0x69, 0x5b, 0xbf, 0xef, 0x76, 0x0e, 0x3e, 0x4d,
	0x62, 0xfb, 0x24, 0x58, 0xc6, 0x20, 0x3e, 0x70, 0x87, 0x3c, 0x48, 0x62, 0xfb, 0x11, 0x9c, 0x21,
	0xe8, 0x4e, 0xe8, 0x72, 0xbf, 0xbb, 0x17, 0xb3, 0x98, 0x6f, 0x0f, 0x98, 0xdf, 0xe7, 0x62, 0x74,
	0x62, 0x16, 0xf6, 0xb9, 0x41, 0xa6, 0x0a, 0x01, 0x76, 0xbb, 0xd6, 0xb7, 0xa1, 0xce, 0x3a, 0xb1,
	0x7b, 0xc8, 0xdb, 0x91, 0xc8, 0x82, 0xc4, 0xaa, 0x6d, 0x9d, 0x16, 0xbd, 0xbe, 0x46, 0xa4, 0xbc,
	0x86, 0xc9, 0x58, 0xa0, 0x53, 0x63, 0xe9, 0x87, 0xfd, 0x8b, 0x8a, 0x92, 0x54, 0xa5, 0x20, 0xcd,
	0x3c, 0x35, 0xbe, 0x02, 0x8b, 0xfb, 0x2c, 0x52, 0x35, 0x15, 0xd1, 0x17, 0xd3, 0xed, 0x03, 0xd5,
	0x4f, 0x2a, 0x5e, 0x16, 0x3d, 0x63, 0xd0, 0x2d, 0x58, 0x8c, 0x8f, 0x47, 0x54, 0x78, 0xc3, 0xc1,
	0xff, 0x96, 0x0d, 0xcb, 0x3d, 0x2c, 0x02, 0xe9, 0x5f, 0xdb, 0x02, 0x51, 0x25, 0x15, 0xea, 0xc8,
	0x14, 0x3b, 0x52, 0x2b, 0xe3, 0x1e, 0x3f, 0xa2, 0xa4, 0x6b, 0xa3, 0x91, 0x37, 0x73, 0x8e, 0x89,
	0x64, 0x81, 0xd7, 0x8e, 0xdd, 0xa1, 0xaa, 0xb4, 0x8a, 0x10, 0x31, 0x2e, 0x22, 0x99, 0x66, 0x42,
	0x37, 0x1d, 0xfd, 0xaa, 0x84, 0xec, 0x76, 0xed, 0x40, 0xf1, 0x87, 0x6d, 0xcf, 0xe5, 0x7e, 0x7c,
	0x97, 0x47, 0x11, 0xeb, 0x73, 0xeb, 0x35, 0x58, 0x8e, 0xb8, 0xdf, 0xe5, 0x21, 0xd6, 0x57, 0x4c,
	0x22, 0x89, 0x51, 0xd8, 0xdf, 0x0d, 0x58, 0xe9, 0x04, 0x7e, 0xcc, 0xfd, 0x58, 0xae, 0x45, 0xf5,
	0x69, 0x7f, 0x4f, 0x55, 0x28, 0x87, 0x56, 0x4e, 0xfc, 0xcb, 0xb0, 0x4c, 0x33, 0x5a, 0x56, 0xb8,
	0x6e, 0x8c, 0x3e, 0xa1, 0x38, 0x12, 0x21, 0x9d, 0x7c, 0xd7, 0xfc, 0x20, 0x1e, 0xf0, 0xf0, 0x4e,
	0xd0, 0x77, 0x7d, 0xfb, 0x54, 0xae, 0xdc, 0x3b, 0x41, 0x5f, 0xcc, 0xc9, 0x1e, 0x6c, 0x28, 0x64,
	0x3f, 0x48, 0xfc, 0x0e, 0x1f, 0x72, 0x5d, 0xe7, 0x7b, 0xd0, 0x60, 0x06, 0x34, 0x92, 0xcb, 0x6d,
	0x0d, 0xab, 0x36, 0x12, 0x9c, 0x2c, 0x9a, 0xe8, 0x70, 0x14, 0x84, 0x6a, 0xa1, 0xe1, 0x7f, 0xfb,
	0x0d, 0x68, 0xe8, 0xc1, 0xbb, 0xcb, 0x5c, 0xcf, 0x3a, 0x0f, 0x8b, 0x43, 0xe6, 0x7a, 0xb2, 0x3b,
	0x15, 0x51, 0xa6, 0x80, 0x3b, 0x08, 0xb5, 0xdf, 0x81, 0x35, 0x42, 0xbf, 0xc1, 0x3d, 0x1e, 0x73,
	0xcc, 0x71, 0x01, 0xea, 0x22, 0xad, 0xed, 0x76, 0xd3, 0xc5, 0xdf, 0x70, 0x40, 0xc0, 0x76, 0xbb,
	0x62, 0x1d, 0xdb, 0xdf, 0xd2, 0x7c, 0x83, 0x1f, 0xba, 0x87, 0x7c, 0x3b, 0x70, 0x7d, 0xd9, 0x95,
	0xe7, 0x00, 0x06, 0x2c, 0x6a, 0xf7, 0x99, 0xeb, 0x73, 0x9a, 0x23, 0x15, 0xa7, 0x3a, 0x60, 0xd1,
	0x2d, 0x04, 0xd8, 0xbf, 0x53, 0x52, 0x0c, 0xec, 0x06, 0x73, 0xbd, 0xe3, 0x07, 0x2c, 0x3a, 0x90,
	0x19, 0xdf, 0x02, 0x18, 0x85, 0x41, 0x3f, 0xe4, 0x51, 0xc4, 0x33, 0x04, 0x10, 0x38, 0xf7, 0x65,
	0x8a, 0x63, 0xe0, 0x58, 0x6f, 0xc2, 0xc9, 0x21, 0x7b, 0xdc, 0xee, 0x8a, 0x82, 0xda, 0x31, 0x8b,
	0x0e, 0x24, 0xeb, 0xa0, 0xe1, 0x5f, 0x1f, 0xb2, 0xc7, 0xba, 0x0e, 0xe4, 0x20, 0x82, 0x7d, 0x87,
	0xbc, 0x17, 0xf2, 0x68, 0x20, 0x31, 0x69, 0x12, 0xd6, 0x25, 0x90, 0xd8, 0xcc, 0x1d, 0x3d, 0x4e,
	0x62, 0x75, 0xbb, 0xf1, 0x53, 0xb5, 0xd1, 0xb6, 0x14, 0x79, 0xef, 0xf1, 0xa3, 0xed, 0x60, 0x38,
	0xcc, 0x4c, 0x3c, 0x27, 0xf0, 0x3c, 0xd7, 0xef, 0x8b, 0x8f, 0x0e, 0x4e, 0x3c, 0x1f, 0xff, 0x99,
	0x13, 0x2f, 0x83, 0xe2, 0x48, 0x04, 0xfb, 0x8c, 0x22, 0xe2, 0x2d, 0xb7, 0x17, 0xef, 0x89, 0xa5,
	0x4b, 0x3d, 0xb0, 0x3f, 0x52, 0xd5, 0xed, 0x0d, 0x82, 0x91, 0x9e, 0xd0, 0xd5, 0x68, 0x10, 0x8c,
	0xda, 0xae, 0xdf, 0x0b, 0x64, 0xd1, 0x75, 0x51, 0xb4, 0x40, 0xd9, 0xf5, 0x7b, 0x81, 0x53, 0x89,
	0xe4, 0x3f, 0xfb, 0xb7, 0xca, 0x6a, 0xe5, 0x3f, 0x74, 0x47, 0x77, 0xf8, 0x21, 0xf7, 0x52, 0x46,
	0xd3, 0x77, 0x7b, 0x71, 0xdb, 0x73, 0x87, 0x6e, 0xac, 0x56, 0xbe, 0x80, 0xdc, 0x11, 0x00, 0xeb,
	0x12, 0xac, 0x11, 0xeb, 0x68, 0x8b, 0x01, 0x31, 0x47, 0xa1, 0x49, 0xf0, 0xbb, 0xec, 0x31, 0x0d,
	0xc1, 0x55, 0x38, 0xfd, 0xd5, 0x60, 0xd4, 0xee, 0x85, 0x9c, 0xb7, 0xd5, 0x58, 0x50, 0xa1, 0x34,
	0x16, 0x27, 0xbe, 0x1a, 0x8c, 0x76, 0x42, 0xce, 0x65, 0x87, 0xa8, 0x78, 0x99, 0xa9, 0x13, 0x44,
	0x71, 0x2e, 0xd3, 0xa2, 0xce, 0xb4, 0x1d, 0x44, 0x71, 0x26, 0xd3, 0x0b, 0x50, 0xdb, 0x4f, 0xba,
	0xdd, 0xe3, 0xf6, 0x7e, 0xe0, 0x27, 0x11, 0x6e, 0xa4, 0x65, 0x07, 0x10, 0x74, 0x5d, 0x40, 0xac,
	0xb7, 0xe0, 0x64, 0xc8, 0x3b, 0x41, 0xd8, 0x6d, 0x77, 0x02, 0xcf, 0x13, 0x7b, 0x3a, 0x95, 0xb9,
	0x8c, 0x65, 0x5a, 0x94, 0xb6, 0x4d, 0x49, 0x58, 0xa4, 0x7d, 0x53, 0x0d, 0xdc, 0x1e, 0x0f, 0x0f,
	0x79, 0xb8, 0xc7, 0xe3, 0xd8, 0xf5, 0xfb, 0xd6, 0x26, 0x54, 0x22, 0xfa, 0x1b, 0x99, 0x4c, 0x2a,
	0x83, 0x14, 0x39, 0x1a, 0xc7, 0xee, 0xc1, 0x2a, 0x15, 0x73, 0x9f, 0x1d, 0x3b, 0x3c, 0x4a, 0xbc,
	0x58, 0xd0, 0x77, 0xc4, 0x8e, 0xdb, 0x21, 0x7e, 0x29, 0xfa, 0x8e, 0x74, 0xb2, 0xd8, 0x36, 0xc3,
	0x2e, 0x6d, 0x9b, 0x24, 0x72, 0xac, 0xe0, 0xf7, 0x6e, 0x17, 0xa5, 0x95, 0x20, 0xe8, 0x46, 0xc6,
	0x8e, 0x8a, 0xdf, 0xbb, 0x5d, 0xfb, 0xd7, 0x4a, 0xf0, 0x9c, 0x64, 0xa9, 0x49, 0x14, 0x07, 0xc3,
	0x6d, 0xc1, 0xf8, 0xa2, 0x58, 0xb2, 0xa5, 0xbb, 0x51, 0x5f, 0x6c, 0x4d, 0x89, 0xef, 0x3e, 0x4a,
	0xb8, 0xb1, 0x35, 0x11, 0x40, 0xb2, 0xf3, 0x94, 0xdb, 0x97, 0xf3, 0xdc, 0xfe, 0xb4, 0x66, 0xcc,
	0xc4, 0x57, 0x15, 0x13, 0x36, 0x18, 0xee, 0x62, 0x96, 0xe1, 0xfe, 0x0f, 0x25, 0x38, 0x5f, 0xd0,
	0x9e, 0xbd, 0xe3, 0x28, 0xe6, 0xc3, 0x99, 0xcd, 0x29, 0x62, 0xee, 0x16, 0x2c, 0x1a, 0x52, 0x16,
	0xfe, 0xb7, 0x3e, 0x02, 0x40, 0xf1, 0x2b, 0x12, 0xc2, 0x1c, 0x36, 0xa1, 0xb6, 0xf5, 0xbc, 0x18,
	0x0f, 0xaa, 0xd4, 0xfd, 0x8a, 0x77, 0x65, 0xc5, 0x5a, 0xe4, 0x73, 0x50, 0x60, 0x23, 0xe9, 0xef,
	0x5b, 0x52, 0xfa, 0x13, 0x3b, 0xe4, 0x12, 0x66, 0x3e, 0x3f, 0x31, 0xf3, 0x4d, 0xbf, 0x4b, 0xb2,
	0xe1, 0x4d, 0xbf, 0x6b, 0xdf, 0x55, 0x7c, 0x23, 0xdb, 0x39, 0x21, 0x1c, 0x4c, 0xef, 0xd8, 0x49,
	0x58, 0x4a, 0xa5, 0x8d, 0x86, 0x43, 0x1f, 0x76, 0xa8, 0x56, 0xa2, 0x62, 0x43, 0x72, 0x25, 0x5e,
	0x85, 0xa6, 0xcf, 0x8f, 0xda, 0x8c, 0xa0, 0xae, 0x66, 0x43, 0x75, 0xda, 0xa6, 0x08, 0xd7, 0x69,
	0xf8, 0xfc, 0xe8, 0x9a, 0x46, 0xb1, 0x2e, 0x42, 0x53, 0x2c, 0x4e, 0x23, 0x13, 0xed, 0x18, 0x0d,
	0xb1, 0xb5, 0x6b, 0xa0, 0xfd, 0x18, 0x96, 0x6e, 0x86, 0x61, 0x80, 0x1b, 0x69, 0x27, 0xe8, 0x72,
	0xd9, 0x54, 0xfc, 0x2f, 0xa6, 0x43, 0x72, 0x75, 0xab, 0x3d, 0x62, 0x21, 0x1b, 0xaa, 0xfc, 0xd5,
	0xe4, 0xea, 0xd6, 0x7d, 0x04, 0x88, 0xe4, 0x28, 0x0e, 0x55, 0xf2, 0xc2, 0x85, 0x85, 0x4b, 0x55,
	0xa7, 0x1a, 0xc5, 0x61, 0x9a, 0xfc, 0x65, 0x14, 0xf8, 0x94, 0x2e, 0x27, 0x46, 0x55, 0x40, 0x30,
	0xdd, 0x7e, 0x1b, 0x56, 0x7e, 0x18, 0xb2, 0xd1, 0x88, 0x36, 0x71, 0x9f, 0x0d, 0xb9, 0x14, 0xbd,
	0xf1, 0xbf, 0x80, 0x75, 0x59, 0xcc, 0x90, 0x42, 0x75, 0x07, 0xff, 0xdb, 0x3f, 0x84, 0xd5, 0x7b,
	0x3c, 0x3e, 0x0a, 0xc2, 0x83, 0x9b, 0x7e, 0x77, 0x14, 0xb8, 0x7e, 0x2c, 0xa6, 0x64, 0x8f, 0x0d,
	0x5d, 0xef, 0x58, 0x66, 0x96, 0x5f, 0x62, 0x4a, 0xb2, 0x6e, 0x57, 0x70, 0x64, 0xb5, 0x7a, 0xe4,
	0xa7, 0x28, 0x78, 0x24, 0x36, 0x50, 0x5a, 0x39, 0xf8, 0xdf, 0xae, 0x41, 0xd5, 0xe1, 0x8f, 0x04,
	0xb3, 0x0e, 0x7c, 0xfb, 0x8a, 0xf8, 0x88, 0xe8, 0xc3, 0x7a, 0x01, 0x96, 0xb8, 0xa0, 0x8f, 0x5c,
	0xe5, 0x55, 0x41, 0x72, 0x24, 0x98, 0x43, 0x70, 0xfb, 0x47, 0xb0, 0xe6, 0xf0, 0x28, 0x2b, 0x4f,
	0xcc, 0xca, 0x64, 0x08, 0x1c, 0xe5, 0x59, 0x02, 0xc7, 0xfb, 0xd0, 0xb8, 0xe6, 0xc7, 0xee, 0xb5,
	0x6e, 0xd7, 0xed, 0x88, 0xe3, 0x80, 0xf5, 0x2a, 0xac, 0x06, 0xbe, 0xe7, 0xfa, 0xbc, 0xdd, 0x4d,
	0x42, 0x3a, 0x31, 0xd0, 0x98, 0x35, 0x09, 0x7c, 0x43, 0x42, 0xed, 0xbf, 0x03, 0x70, 0x46, 0x2d,
	0x7c, 0x36, 0xf8, 0x32, 0xf0, 0xfb, 0x62, 0x66, 0xba, 0x51, 0xec, 0x76, 0xac, 0x2d, 0x38, 0xd5,
	0x73, 0x7d, 0xe6, 0xb5, 0x47, 0x41, 0xe4, 0x0a, 0x6c, 0xe2, 0xe0, 0x91, 0xdc, 0xf7, 0x4f, 0x60,
	0xe2, 0x7d, 0x99, 0x86, 0x6c, 0x3c, 0xb2, 0xbe, 0x0f, 0xf5, 0x90, 0x77, 0xb8, 0x1f, 0xb7, 0xc3,
	0x20, 0xf1, 0xbb, 0xb2, 0xe9, 0x97, 0x8c, 0xa6, 0xe7, 0xab, 0xd9, 0x74, 0x04, 0xe2, 0x5e, 0x32,
	0x1c, 0xb2, 0xf0, 0xd8, 0xa9, 0x51, 0x6e, 0x84, 0x59, 0xd7, 0xa1, 0x2a, 0x0b, 0x1b, 0x24, 0x52,
	0x2c, 0xbd, 0x38, 0xad, 0xa4, 0xdb, 0x89, 0x2a, 0xa6, 0x42, 0xf9, 0x6e, 0x27, 0xd6, 0x27, 0x00,
	0x03, 0xb7, 0x3f, 0xe0, 0x11, 0x16, 0x42, 0xcb, 0xfe, 0xf5, 0xa9, 0x85, 0x10, 0xf6, 0xed, 0xc4,
	0x41, 0x46, 0xef, 0x54, 0x07, 0x0a, 0x60, 0x7d, 0x81, 0x3b, 0x83, 0x68, 0xcf, 0xd6, 0x5b, 0xed,
	0x41, 0xd2, 0x8e, 0xa8, 0x36, 0xdc, 0x19, 0x6a, 0x5b, 0x97, 0xa7, 0x95, 0x7a, 0xc7, 0x7d, 0xe4,
	0x6e, 0xbd, 0xa5, 0x9a, 0xb7, 0x4e, 0xc5, 0x6c, 0xbd, 0xa5, 0x5b, 0x6c, 0x94, 0xfd, 0x76, 0xa6,
	0xec, 0x95, 0x79, 0xca, 0xfe, 0x81, 0xfb, 0x76, 0xbe, 0xec, 0xb7, 0x8d, 0xb2, 0x3f, 0x87, 0x53,
	0x69, 0xd9, 0xc8, 0xc5, 0xe4, 0x86, 0x52, 0x41, 0x16, 0xf1, 0xca, 0xb4, 0xc2, 0x05, 0x3f, 0xa3,
	0xdd, 0x06, 0xb7, 0x3e, 0x2c, 0x39, 0x85, 0xb5, 0x7e, 0xb3, 0x04, 0x75, 0x73, 0x00, 0xc5, 0xf6,
	0x1a, 0x07, 0x31, 0xf3, 0xe4, 0x6e, 0x4f, 0xb3, 0x0e, 0x10, 0x44, 0x3b, 0xbd, 0x10, 0xf7, 0x03,
	0xbf, 0x9f, 0x91, 0x06, 0xaa, 0x02, 0xa2, 0x93, 0xbf, 0x72, 0x87, 0x41, 0x46, 0x10, 0xab, 0x0a,
	0x08, 0x25, 0xbf, 0x0a, 0xab, 0x3d, 0xe6, 0xf7, 0x3b, 0x83, 0xb4, 0x88, 0x45, 0x29, 0x50, 0x28,
	0x30, 0x22, 0xb6, 0x22, 0xa8, 0xa6, 0x04, 0x98, 0xd9, 0xa8, 0x4b, 0xb0, 0xd6, 0x0d, 0x42, 0x46,
	0x93, 0x36, 0x2b, 0xa8, 0x08, 0x38, 0xf6, 0x90, 0x30, 0xc5, 0xa9, 0x0d, 0x8b, 0xea, 0x31, 0x5f,
	0x36, 0xaf, 0x82, 0x80, 0x1d, 0xe6, 0xb7, 0xfe, 0xdd, 0x12, 0xac, 0xe6, 0xe6, 0x0f, 0x31, 0x1f,
	0x3f, 0x1a, 0x24, 0xb2, 0x5a, 0xf9, 0x25, 0x98, 0x8f, 0x28, 0xda, 0x4f, 0x86, 0xb2, 0x26, 0xf5,
	0x29, 0x18, 0x7f, 0xec, 0xc6, 0x1e, 0x97, 0xdb, 0x17, 0x7d, 0x08, 0xe8, 0x80, 0xf9, 0xdd, 0x68,
	0x63, 0x11, 0x79, 0x28, 0x7d, 0x08, 0x46, 0x35, 0x74, 0xfd, 0xfe, 0xc6, 0x12, 0x02, 0xf1, 0x3f,
	0x62, 0x26, 0x23, 0xe6, 0xe2, 0xbc, 0x14, 0x98, 0xe2, 0x43, 0x08, 0x04, 0x58, 0x90, 0xd8, 0x6a,
	0x56, 0xa8, 0x42, 0xfc, 0xde, 0xed, 0xb6, 0x7e, 0x5c, 0x82, 0x46, 0x66, 0x82, 0xce, 0x26, 0xd8,
	0x15, 0xb0, 0x08, 0xc1, 0x73, 0x91, 0x70, 0x26, 0xc9, 0xd6, 0x30, 0xe5, 0x0e, 0x26, 0x68, 0xf2,
	0xb2, 0x43, 0x1e, 0xb2, 0x3e, 0x17, 0x53, 0x1b, 0x99, 0xb2, 0xa4, 0x5d, 0x53, 0xc2, 0x6f, 0x27,
	0xf7, 0x05, 0xb4, 0xf5, 0xf3, 0xa2, 0x25, 0xc6, 0x74, 0x16, 0x03, 0x4e, 0x15, 0x3d, 0x4e, 0x04,
	0xdd, 0x98, 0xdf, 0x57, 0x9c, 0x0c, 0xc1, 0x3f, 0xa7, 0xa0, 0xd6, 0x8b, 0x50, 0xd7, 0x03, 0x23,
	0xa8, 0x4d, 0x6d, 0xa9, 0xa9, 0xb1, 0x89, 0x06, 0x49, 0xeb, 0x1a, 0x40, 0x3a, 0x75, 0x05, 0xe9,
	0x42, 0xe6, 0x1f, 0xa8, 0xcd, 0x4c, 0xfc, 0x17, 0xfd, 0x56, 0x2c, 0xcf, 0x95, 0xfd, 0x59, 0x72,
	0x40, 0x32, 0x3a, 0xd7, 0x8f, 0xed, 0xdf, 0x2d, 0xc1, 0x49, 0xb9, 0x54, 0xf4, 0x1a, 0xb9, 0xc1,
	0x62, 0x66, 0x5d, 0x86, 0xb5, 0x21, 0xad, 0x9d, 0x76, 0x87, 0xc5, 0xbc, 0x1f, 0x84, 0xc7, 0xb2,
	0xe4, 0x55, 0x09, 0xdf, 0x96, 0x60, 0x71, 0xdc, 0xc0, 0x45, 0xa8, 0xf1, 0xa8, 0xa9, 0x75, 0x01,
	0xd4, 0x48, 0xdf, 0x86, 0x6a, 0xa4, 0x2a, 0x90, 0xbc, 0xef, 0xdc, 0x94, 0x75, 0xea, 0xa4, 0xd8,
	0xf6, 0x3b, 0x50, 0x57, 0x47, 0x4c, 0x21, 0xaa, 0x5b, 0x4d, 0x28, 0x6b, 0xf1, 0xa2, 0xec, 0x92,
	0x60, 0xd1, 0x09, 0xc2, 0x54, 0xb0, 0x10, 0x1f, 0xf6, 0x9f, 0x2f, 0xc1, 0x8a, 0xcc, 0x36, 0xeb,
	0x40, 0xdf, 0x82, 0x8a, 0xef, 0x76, 0x0e, 0x70, 0x3b, 0xa6, 0x8d, 0x53, 0x7f, 0x8b, 0xac, 0x9e,
	0x38, 0xee, 0xd2, 0x61, 0x5f, 0xae, 0x5f, 0x84, 0xe0, 0x61, 0xff, 0x05, 0xa8, 0x79, 0x78, 0xee,
	0xa5, 0x74, 0xa9, 0xcd, 0x21, 0x10, 0x22, 0x9c, 0x81, 0x95, 0x30, 0x08, 0x86, 0xa2, 0xde, 0x25,
	0x5a, 0x2f, 0xe2, 0x73, 0xb7, 0x6b, 0xbd, 0x0f, 0x4d, 0xe6, 0xc7, 0x6e, 0x9b, 0xa9, 0x4d, 0x4e,
	0xb2, 0x5d, 0xda, 0x16, 0xcd, 0xdd, 0x4f, 0x9c, 0x86, 0xcd, 0xcd, 0x50, 0xaf, 0x27, 0x9a, 0xf6,
	0x72, 0x3d, 0x9d, 0x87, 0x6a, 0xe4, 0xf6, 0x7d, 0x16, 0x27, 0x21, 0xdf, 0xa8, 0x90, 0xe0, 0xa1,
	0x01, 0x22, 0x0f, 0xc7, 0xd3, 0x71, 0x95, 0xd6, 0x10, 0x7e, 0x88, 0x39, 0x86, 0x7f, 0xda, 0x87,
	0x3c, 0x74, 0x7b, 0xc7, 0x1b, 0x40, 0x73, 0x0c, 0x61, 0x0f, 0x11, 0x24, 0x66, 0x55, 0x3f, 0xf0,
	0xba, 0x1b, 0x35, 0x9a, 0x55, 0xe2, 0x3f, 0x2e, 0x75, 0x97, 0x0d, 0x03, 0xbf, 0xbb, 0x51, 0x97,
	0x4b, 0x9d, 0x3e, 0x05, 0x37, 0x61, 0x87, 0x2c, 0x66, 0x28, 0xc1, 0x37, 0x88, 0x9b, 0x10, 0x60,
	0xb7, 0x6b, 0xad, 0xc1, 0xc2, 0xa1, 0x3b, 0xda, 0x68, 0x22, 0x58, 0xfc, 0x15, 0x84, 0xdf, 0x77,
	0xc3, 0x78, 0xd0, 0x65, 0xc7, 0x1b, 0xab, 0x38, 0x37, 0xf5, 0xb7, 0x68, 0xf1, 0x68, 0x10, 0xf8,
	0x7c, 0x63, 0x8d, 0x5a, 0x8c, 0x1f, 0xa2, 0xc5, 0xf8, 0x47, 0xb5, 0x78, 0x9d, 0x5a, 0x8c, 0x30,
	0xd9, 0xe2, 0x1d, 0x58, 0x1b, 0x79, 0x2c, 0xee, 0x05, 0xe1, 0xb0, 0xad, 0x9a, 0x69, 0xe1, 0xc6,
	0x60, 0x4e, 0xb8, 0xcd, 0xfb, 0x12, 0xe7, 0x06, 0xa1, 0x38, 0xab, 0xa3, 0x2c, 0xc0, 0x7a, 0x05,
	0x96, 0x3c, 0x31, 0xdf, 0x36, 0x4e, 0xe1, 0xb8, 0xac, 0x19, 0x99, 0x71, 0x1e, 0x3a, 0x94, 0x6c,
	0x5d, 0x82, 0x65, 0xfc, 0x73, 0x75, 0xe3, 0xf4, 0x04, 0x44, 0x99, 0x2e, 0x1a, 0x2f, 0xa9, 0xd3,
	0x0b, 0xc5, 0x5c, 0x3b, 0x43, 0x8d, 0x27, 0xd8, 0x8e, 0x00, 0xb5, 0xbe, 0x05, 0xab, 0xb9, 0x86,
	0x15, 0x4d, 0x77, 0x93, 0x3b, 0xd1, 0x87, 0xfd, 0x31, 0xac, 0xc9, 0x3a, 0x3f, 0x3d, 0xf2, 0x79,
	0x88, 0x6b, 0xf8, 0x75, 0x58, 0x4f, 0x7c, 0x2f, 0xe8, 0x1c, 0xb4, 0x3b, 0x03, 0x16, 0xb2, 0x4e,
	0xcc, 0x43, 0x25, 0xec, 0xac, 0x51, 0xc2, 0xb6, 0x86, 0xdb, 0xff, 0x6d, 0x05, 0x1a, 0x59, 0x89,
	0xee, 0x63, 0xa8, 0xfa, 0xc9, 0x90, 0x87, 0x6e, 0x87, 0x79, 0x52, 0xfa, 0x7e, 0x71, 0x4c, 0x66,
	0xdb, 0xbc, 0xa7, 0x50, 0xa4, 0x0c, 0x97, 0xe6, 0x11, 0x05, 0xe8, 0x8a, 0xa5, 0xe4, 0x54, 0x50,
	0x80, 0x6e, 0x83, 0x2a, 0x40, 0xe7, 0xb1, 0x5e, 0x80, 0x85, 0x7d, 0xd6, 0x97, 0xec, 0xa2, 0x21,
	0xb2, 0x5e, 0x67, 0x7d, 0x89, 0x26, 0x52, 0xac, 0x9b, 0x50, 0x63, 0x9d, 0x81, 0xcb, 0x0f, 0x51,
	0x51, 0x24, 0xc5, 0xa1, 0x97, 0xc6, 0xeb, 0xb8, 0x96, 0x22, 0xc9, 0xec, 0x66, 0x3e, 0xeb, 0x0a,
	0xac, 0x44, 0x03, 0xd7, 0x73, 0x99, 0x2f, 0xcf, 0x42, 0x96, 0x51, 0xc4, 0xde, 0xc0, 0xbd, 0xe3,
	0x32, 0xdf, 0x51, 0x28, 0xd6, 0xf7, 0x00, 0x52, 0x5d, 0x8c, 0x5c, 0xb5, 0x05, 0xfd, 0xca, 0x29,
	0x7e, 0x9c, 0x6a, 0x57, 0x01, 0xac, 0xab, 0xe6, 0x0a, 0xae, 0x6d, 0x3d, 0x37, 0x9e, 0xf9, 0x81,
	0x48, 0x96, 0x19, 0xe5, 0x02, 0xbf, 0x02, 0x96, 0x38, 0x11, 0x85, 0x5c, 0xd0, 0xa7, 0xcf, 0xa5,
	0xce, 0xaa, 0x42, 0xc3, 0xe9, 0xf3, 0x23, 0x47, 0x25, 0xa0, 0x06, 0x7a, 0x17, 0x1a, 0xf2, 0x18,
	0x24, 0xdb, 0x59, 0xc5, 0xaa, 0x5e, 0x2e, 0xa2, 0x4d, 0x5e, 0xff, 0xe3, 0xd4, 0x99, 0x01, 0xb3,
	0x1e, 0x82, 0xa5, 0x8b, 0xea, 0x79, 0xee, 0x88, 0xca, 0x83, 0x31, 0x49, 0x38, 0x57, 0xde, 0x8e,
	0xe7, 0x8e, 0x8c, 0x32, 0xd7, 0x58, 0x0e, 0x2e, 0xe6, 0x7a, 0x6e, 0xf2, 0x14, 0xcd, 0x75, 0xdc,
	0xac, 0x24, 0xe3, 0xa5, 0x8f, 0xd6, 0x43, 0x58, 0xcd, 0x4d, 0x1a, 0xeb, 0x0d, 0x00, 0x63, 0x8e,
	0x97, 0x71, 0xb2, 0xe2, 0x84, 0xd1, 0x88, 0x8e, 0x81, 0x80, 0x5b, 0xc6, 0x81, 0xeb, 0xd3, 0x01,
	0x4e, 0x6c, 0x19, 0xe2, 0xa3, 0x75, 0x07, 0xd6, 0xc7, 0x26, 0x8a, 0xf5, 0xad, 0x02, 0x5d, 0xd8,
	0x19, 0xea, 0xb5, 0x46, 0x2d, 0x52, 0x89, 0xb5, 0xb6, 0x61, 0xf5, 0xa9, 0x75, 0x7f, 0xad, 0x2b,
	0x50, 0x33, 0xa6, 0x82, 0xd8, 0x8d, 0xc4, 0x1c, 0xc0, 0x09, 0xa1, 0x96, 0x72, 0xd5, 0xe7, 0x47,
	0x88, 0x13, 0xb5, 0x76, 0xc0, 0x7a, 0x16, 0xda, 0xbc, 0xd6, 0x27, 0x70, 0xba, 0x78, 0x14, 0xbf,
	0x86, 0x66, 0x90, 0x41, 0x5d, 0x08, 0x29, 0x77, 0x79, 0xcc, 0x90, 0x29, 0x19, 0x1b, 0x62, 0x29,
	0xb3, 0x21, 0x9e, 0x81, 0x15, 0x75, 0x59, 0x44, 0x9c, 0x6d, 0x79, 0x48, 0xf7, 0x44, 0x2f, 0x40,
	0xad, 0x43, 0x5a, 0x86, 0x76, 0xa2, 0xb5, 0x3f, 0x20, 0x41, 0x9f, 0xb9, 0x5d, 0x3b, 0x12, 0xdd,
	0xc6, 0x29, 0x78, 0xdf, 0x63, 0xc7, 0xae, 0xdf, 0x17, 0x15, 0x66, 0xef, 0xa7, 0x4a, 0xe3, 0x37,
	0x66, 0x39, 0x71, 0x45, 0x7f, 0x5b, 0x2f, 0xc3, 0xe2, 0x90, 0xc7, 0x4c, 0xb2, 0x1d, 0xec, 0x9d,
	0xd9, 0x03, 0x07, 0x53, 0xed, 0x7f, 0xb8, 0xa0, 0x39, 0xee, 0x36, 0xeb, 0x0c, 0x50, 0x43, 0x8f,
	0x17, 0x67, 0xe2, 0x43, 0x6c, 0x4f, 0x51, 0x7a, 0x4a, 0xad, 0x23, 0xf0, 0x21, 0xc1, 0x66, 0x29,
	0x9c, 0x4c, 0x69, 0x64, 0x61, 0xaa, 0x34, 0xb2, 0x38, 0x43, 0x1a, 0x59, 0x1a, 0x93, 0x46, 0xce,
	0x41, 0xd5, 0x8d, 0xda, 0x74, 0x66, 0x46, 0xce, 0x55, 0x71, 0x2a, 0x6e, 0xf4, 0x29, 0x7e, 0x9b,
	0x23, 0xb3, 0x92, 0x19, 0x19, 0x2d, 0x70, 0x54, 0x4c, 0x81, 0x23, 0xb3, 0xd7, 0x57, 0x8b, 0xf7,
	0x7a, 0x48, 0xf7, 0x7a, 0xbd, 0x9d, 0xd6, 0xa6, 0x6f, 0xa7, 0xdf, 0x86, 0xfa, 0x88, 0x46, 0x11,
	0x8f, 0x76, 0x28, 0x61, 0x64, 0xef, 0xa6, 0x8c, 0x41, 0x76, 0x6a, 0x23, 0x63, 0xc4, 0xd3, 0x9d,
	0xb8, 0xf1, 0x84, 0x3b, 0x71, 0x73, 0x6c, 0x27, 0xb6, 0xff, 0xf7, 0x12, 0x34, 0xb3, 0xf7, 0x2f,
	0xb3, 0xc4, 0xc8, 0x0c, 0x41, 0xca, 0x39, 0x82, 0x64, 0x0e, 0x41, 0x9a, 0x86, 0xe6, 0x58, 0x2f,
	0xe6, 0xc6, 0x5a, 0x13, 0x6c, 0x69, 0x5e, 0xf9, 0x63, 0xf9, 0x09, 0x7b, 0xbd, 0x32, 0xde, 0xeb,
	0xbf, 0x55, 0x56, 0xbd, 0x16, 0x14, 0xfd, 0x19, 0xee, 0xf5, 0xeb, 0xa6, 0x6c, 0xb1, 0x9c, 0x0a,
	0x08, 0x29, 0xbf, 0x37, 0xe4, 0x88, 0x94, 0x44, 0x2b, 0x4f, 0x48, 0xa2, 0xca, 0x38, 0x89, 0xfe,
	0xeb, 0x12, 0x54, 0x90, 0x1f, 0x04, 0x5d, 0xd4, 0xd8, 0x0d, 0x0d, 0x0d, 0xa2, 0xf8, 0x2f, 0x36,
	0x31, 0xe6, 0x62, 0xc7, 0x2a, 0x4e, 0x99, 0xb9, 0xd6, 0xf3, 0x00, 0xfc, 0x71, 0xcc, 0xfd, 0x2e,
	0xde, 0x4c, 0xd0, 0x4d, 0xb7, 0x01, 0xb1, 0xae, 0x42, 0xad, 0xcb, 0x63, 0x21, 0x86, 0x87, 0x89,
	0xc7, 0x65, 0x67, 0x2c, 0xc5, 0x76, 0x6e, 0x60, 0x92, 0x93, 0x78, 0xdc, 0x81, 0xae, 0xfe, 0x6f,
	0xdd, 0x83, 0x13, 0x82, 0xfd, 0x89, 0x65, 0xc2, 0xfd, 0x43, 0x37, 0x0c, 0x7c, 0x94, 0x80, 0x0c,
	0x81, 0x42, 0x64, 0x7e, 0x40, 0x28, 0x37, 0x53, 0x8c, 0x3d, 0x1e, 0x3b, 0x56, 0x3c, 0x06, 0xb6,
	0x1f, 0xc0, 0xd9, 0x89, 0x19, 0x84, 0xc0, 0x3f, 0x62, 0xee, 0x63, 0x57, 0x1f, 0x56, 0xd5, 0x27,
	0x32, 0x24, 0xde, 0x8b, 0xb3, 0xda, 0x0f, 0x01, 0xa1, 0x4b, 0xa6, 0xff, 0xb3, 0x0e, 0xcd, 0x6c,
	0x27, 0x44, 0x0e, 0xc1, 0x9c, 0xda, 0x3d, 0xf7, 0x31, 0xd7, 0xd3, 0x49, 0x40, 0x76, 0x04, 0x80,
	0x8e, 0xf5, 0x43, 0x2e, 0x8e, 0x45, 0x4a, 0x8f, 0x20, 0xbe, 0xaf, 0x75, 0x51, 0x51, 0x6f, 0x9c,
	0xcd, 0xe5, 0x51, 0x2c, 0x3d, 0x94, 0x6f, 0xa0, 0x10, 0xd7, 0x4d, 0x98, 0x2f, 0x19, 0xa3, 0xfa,
	0x14, 0x19, 0x5d, 0xdf, 0x8d, 0xe5, 0x21, 0x98, 0xb8, 0x62, 0x55, 0x40, 0xf0, 0x0c, 0x2c, 0x32,
	0xf6, 0x98, 0xdf, 0x15, 0xd2, 0x1f, 0xdd, 0x89, 0xa8, 0x4f, 0x31, 0xb7, 0x3b, 0xcc, 0x6f, 0x7f,
	0xe9, 0xf6, 0xb8, 0x8b, 0xa4, 0xad, 0x88, 0x6d, 0xc2, 0xff, 0x44, 0x7c, 0x5b, 0x17, 0xa1, 0x19,
	0xbb, 0xcc, 0xdf, 0x77, 0x99, 0xdf, 0x3e, 0x64, 0x5e, 0xa2, 0x26, 0x4b, 0x43, 0x41, 0x1f, 0x0a,
	0xa0, 0x40, 0xf3, 0xdc, 0x47, 0xee, 0x3e, 0xf3, 0xfb, 0x12, 0x8d, 0x78, 0x65, 0x43, 0x41, 0x09,
	0xed, 0x55, 0x58, 0xed, 0x88, 0x73, 0xbf, 0x81, 0x47, 0xcc, 0xb3, 0xa9, 0xc1, 0x84, 0x68, 0x43,
	0xc3, 0x0f, 0x70, 0xdc, 0x7b, 0xac, 0x97, 0xb4, 0xdf, 0x96, 0x27, 0xb3, 0x1a, 0x01, 0x77, 0x58,
	0x2f, 0x79, 0x3b, 0x8f, 0xb3, 0x25, 0x8f, 0x69, 0x06, 0xce, 0x56, 0x1e, 0xe7, 0xaa, 0x3c, 0xae,
	0x19, 0x38, 0x57, 0xc5, 0x01, 0x62, 0xc0, 0xd0, 0xca, 0x21, 0xf9, 0x32, 0x19, 0x32, 0xbf, 0x2f,
	0x88, 0xdb, 0x44, 0x3a, 0xac, 0x89, 0x84, 0x3b, 0x06, 0xdc, 0x7a, 0x1b, 0x4e, 0x22, 0xf2, 0x23,
	0x97, 0xa3, 0x06, 0x43, 0xe1, 0xaf, 0x22, 0xfe, 0x09, 0x91, 0xf6, 0x83, 0x6c, 0x92, 0xf5, 0x32,
	0x34, 0x31, 0xcb, 0xbe, 0xcb, 0x82, 0xb6, 0x18, 0x49, 0x3c, 0xec, 0x55, 0x9c, 0xba, 0x80, 0x5e,
	0x77, 0x59, 0x70, 0x23, 0x08, 0x99, 0xf5, 0x06, 0x60, 0xe6, 0x76, 0x5f, 0x90, 0x26, 0x45, 0x5d,
	0x4f, 0xdb, 0x71, 0x8b, 0xf9, 0x7d, 0x8d, 0xfe, 0x21, 0xb4, 0x86, 0xa2, 0x5b, 0x38, 0x57, 0xdc,
	0xe1, 0x90, 0x77, 0x5d, 0x16, 0x73, 0xef, 0xb8, 0x1d, 0x8c, 0xb8, 0xbf, 0x61, 0x61, 0xae, 0x33,
	0x02, 0x43, 0x60, 0xef, 0xa6, 0xe9, 0x9f, 0x8e, 0xb8, 0x6f, 0x5d, 0x80, 0xba, 0xec, 0x31, 0x55,
	0x72, 0x02, 0xd1, 0x81, 0x3a, 0x8b, 0xc5, 0x5f, 0x96, 0x34, 0xc1, 0xd6, 0x28, 0xb4, 0x93, 0x88,
	0xd6, 0x54, 0x6d, 0x91, 0xa8, 0x8a, 0x7c, 0x91, 0xdb, 0xe3, 0x7e, 0x5f, 0x9c, 0x1d, 0xba, 0x0c,
	0x4f, 0x93, 0xb2, 0xd9, 0x7b, 0x06, 0xdc, 0xba, 0x0c, 0x6b, 0x12, 0x59, 0x94, 0x1c, 0x31, 0xdf,
	0xe3, 0x78, 0xa0, 0xac, 0x38, 0xab, 0x84, 0xab, 0xc1, 0x62, 0xae, 0x48, 0xd4, 0x2f, 0x5d, 0xe6,
	0xb9, 0x5f, 0x0d, 0x5c, 0x3c, 0x4a, 0xca, 0x06, 0xec, 0x69, 0xa8, 0xf5, 0xa6, 0xa4, 0xdc, 0x97,
	0x6e, 0xf2, 0xd5, 0x20, 0xf0, 0xfb, 0x5f, 0xba, 0xa8, 0x47, 0xdb, 0x40, 0x64, 0x4b, 0x24, 0x7d,
	0x92, 0x49, 0x49, 0x4b, 0x66, 0xfe, 0x97, 0x2e, 0x1b, 0x70, 0x8f, 0x6f, 0x9c, 0x35, 0x4a, 0xd6,
	0x50, 0xc1, 0x27, 0x11, 0x31, 0x0e, 0x92, 0xd8, 0x65, 0xc1, 0x46, 0x0b, 0xb1, 0x6a, 0x02, 0xf6,
	0x80, 0x40, 0xba, 0x72, 0x81, 0x2f, 0xfa, 0xf8, 0xd5, 0x20, 0x61, 0x7e, 0x7f, 0xe3, 0x5c, 0x5a,
	0xf9, 0xed, 0x4c, 0x8a, 0xa6, 0x80, 0xc8, 0x40, 0x8d, 0x4a, 0x36, 0xce, 0xa7, 0x14, 0xb8, 0x9d,
	0x82, 0xad, 0x77, 0xe1, 0x34, 0x55, 0xef, 0xfa, 0xfd, 0x11, 0x73, 0x8d, 0xe2, 0x9f, 0xc3, 0x0c,
	0xa7, 0xb0, 0x21, 0xf9, 0x44, 0xdd, 0x24, 0x99, 0x4d, 0x55, 0xf2, 0x7c, 0xda, 0xa4, 0x07, 0x99,
	0x14, 0xc1, 0x00, 0x30, 0xc3, 0xb1, 0xdb, 0x63, 0x1b, 0x2f, 0x10, 0x03, 0x10, 0x80, 0xcf, 0xdd,
	0x1e, 0x13, 0x2b, 0x1b, 0x13, 0x7d, 0xe6, 0x87, 0xc9, 0x63, 0x37, 0x4c, 0x36, 0x2e, 0x20, 0x46,
	0x43, 0x40, 0xef, 0x29, 0xa0, 0xf5, 0x1a, 0xac, 0x7d, 0xe9, 0xfa, 0xfd, 0x28, 0x61, 0xfe, 0x71,
	0x22, 0xf9, 0xcc, 0x8b, 0xa4, 0x58, 0xcc, 0xc3, 0x85, 0x00, 0x17, 0x0d, 0x12, 0xff, 0x88, 0xbb,
	0x43, 0xd6, 0xde, 0xda, 0xb0, 0x49, 0x5f, 0xa7, 0x41, 0x5b, 0x59, 0x84, 0xab, 0x1b, 0x2f, 0xe5,
	0x10, 0xae, 0x66, 0x11, 0xde, 0xd9, 0x78, 0x39, 0x87, 0xf0, 0x8e, 0x65, 0x43, 0x5d, 0x30, 0xa7,
	0x2f, 0x5d, 0x1e, 0xbb, 0xd1, 0xc0, 0xdd, 0xb8, 0x48, 0x2b, 0xce, 0x84, 0x09, 0x26, 0xcc, 0xdc,
	0x36, 0xed, 0xc3, 0xaf, 0x10, 0x4b, 0x64, 0x2e, 0x29, 0xdf, 0xd4, 0xc0, 0x7f, 0xe5, 0x0e, 0x83,
	0x28, 0xf1, 0x37, 0x5e, 0x4d, 0x07, 0xfe, 0x0b, 0x02, 0x59, 0x5b, 0x70, 0xaa, 0xeb, 0x46, 0x6c,
	0xdf, 0xe3, 0xed, 0x61, 0xe2, 0xc5, 0x6e, 0xfb, 0x38, 0x39, 0x60, 0x43, 0xe6, 0x6f, 0x5c, 0x22,
	0x4e, 0x20, 0x13, 0xef, 0x8a, 0xb4, 0xcf, 0x29, 0x09, 0x0f, 0x7a, 0xcc, 0xef, 0x25, 0x1b, 0x97,
	0xe5, 0x41, 0x4f, 0x7c, 0xa0, 0x08, 0x9f, 0x1c, 0xbb, 0x68, 0x44, 0xb6, 0xf1, 0x1a, 0xc9, 0x16,
	0x02, 0x70, 0x57, 0x5e, 0xd4, 0x89, 0xb5, 0x77, 0x95, 0x52, 0x5f, 0x4f, 0xb7, 0x83, 0xab, 0x22,
	0xd9, 0xfe, 0xef, 0xcb, 0xb0, 0xe8, 0x04, 0xc1, 0x70, 0xf2, 0x81, 0xc3, 0x34, 0xd2, 0x2a, 0x67,
	0x8d, 0xb4, 0x2e, 0xc8, 0x6d, 0x7d, 0x21, 0x35, 0x23, 0x50, 0x5b, 0xbe, 0xdc, 0xe4, 0x2f, 0xc1,
	0xda, 0x90, 0x3d, 0x6e, 0x8f, 0x50, 0x56, 0xca, 0x6a, 0xee, 0x87, 0xec, 0x31, 0x89, 0x50, 0x4a,
	0xb5, 0xbc, 0x32, 0xe2, 0x61, 0x14, 0xf8, 0x11, 0x6a, 0xb5, 0x33, 0xa6, 0x3d, 0x4a, 0xc8, 0x72,
	0x14, 0x0a, 0x59, 0x0f, 0xb1, 0xee, 0x31, 0x9d, 0xee, 0x97, 0xe9, 0x84, 0x87, 0x10, 0x3c, 0xd6,
	0x8b, 0xad, 0x2c, 0x6a, 0x4b, 0xa1, 0x57, 0x6e, 0x49, 0x55, 0x37, 0x92, 0x22, 0xb1, 0x18, 0xfd,
	0x51, 0xb2, 0xef, 0xb9, 0x9d, 0xb6, 0xe7, 0x1e, 0xd2, 0x86, 0x54, 0x71, 0x80, 0x40, 0x77, 0xdc,
	0x43, 0x9e, 0xb7, 0x3e, 0xab, 0xe6, 0xad, 0xcf, 0xc4, 0x09, 0x26, 0x0e, 0x92, 0x50, 0xc8, 0x62,
	0x24, 0xf0, 0xd1, 0x2e, 0x54, 0x4f, 0x81, 0xbb, 0x5d, 0xfb, 0xc7, 0x65, 0x68, 0xa8, 0x8b, 0x61,
	0x52, 0x3e, 0xbf, 0x07, 0x2b, 0x44, 0x0a, 0x75, 0x28, 0x3c, 0xaf, 0x68, 0xa6, 0x71, 0x64, 0x97,
	0x77, 0x63, 0x3e, 0x74, 0x14, 0x72, 0xeb, 0x3f, 0x2e, 0x01, 0xa4, 0x70, 0x34, 0xf4, 0xe1, 0x4c,
	0x29, 0xe8, 0xf1, 0x7f, 0xaa, 0xbb, 0xcf, 0xe8, 0xb0, 0x11, 0x44, 0xfb, 0xf7, 0x05, 0xa8, 0x8f,
	0x58, 0x28, 0xb7, 0xf7, 0xf6, 0xdb, 0x38, 0x68, 0x4b, 0x0e, 0x08, 0x18, 0x22, 0xbc, 0x9d, 0xc3,
	0xd8, 0xc2, 0x81, 0x32, 0x31, 0xb6, 0x50, 0x87, 0x1d, 0xb2, 0xae, 0xd8, 0x37, 0x48, 0x97, 0xbc,
	0x84, 0x28, 0x75, 0x09, 0xdc, 0x13, 0x30, 0xad, 0x0b, 0x5d, 0xc6, 0x34, 0xfc, 0x6f, 0x07, 0xb0,
	0x2a, 0x7a, 0xb9, 0x4d, 0x96, 0x91, 0xbb, 0x42, 0x9e, 0xfb, 0xc9, 0xda, 0x73, 0x7e, 0x0c, 0x4d,
	0x41, 0xaa, 0x5b, 0xcc, 0xf5, 0xe5, 0x8d, 0xcc, 0x19, 0x58, 0x71, 0x63, 0x6e, 0x4e, 0x70, 0xf1,
	0xb9, 0x3b, 0x49, 0x53, 0xf8, 0xe3, 0x12, 0xac, 0x66, 0x4b, 0x88, 0xc8, 0xa0, 0x11, 0x6d, 0x44,
	0xf0, 0xe0, 0x28, 0xef, 0x47, 0x08, 0x84, 0x07, 0xc7, 0x57, 0x60, 0x15, 0xad, 0x46, 0xda, 0x51,
	0x90, 0x84, 0x1d, 0xe3, 0x90, 0xde, 0x40, 0xf0, 0x1e, 0x42, 0x77, 0xbb, 0x62, 0xb2, 0x53, 0x2e,
	0x52, 0xad, 0xc8, 0xc9, 0x9e, 0xad, 0xce, 0x51, 0x28, 0xf6, 0xbb, 0xb0, 0x88, 0xc3, 0x3e, 0xad,
	0x07, 0x51, 0xcc, 0x3a, 0x07, 0x86, 0xcd, 0x40, 0xe7, 0xc0, 0xee, 0xc1, 0xc2, 0x75, 0xd6, 0xb7,
	0x9e, 0x87, 0x25, 0x81, 0xa6, 0x66, 0x5c, 0x45, 0xd5, 0xe4, 0x10, 0xd8, 0xfa, 0x18, 0xd6, 0x49,
	0x4f, 0xd7, 0x67, 0xae, 0xdf, 0xa6, 0x3a, 0xa5, 0x6a, 0xe8, 0xc4, 0x78, 0xab, 0x22, 0x67, 0x15,
	0xb1, 0x53, 0x88, 0xfd, 0x57, 0x4b, 0x50, 0xd5, 0x0a, 0x47, 0xeb, 0x75, 0xa8, 0x4b, 0x4b, 0xd1,
	0xe2, 0x5a, 0xa5, 0x1d, 0xe9, 0x2e, 0xd6, 0x7d, 0x07, 0x36, 0x24, 0xf2, 0x13, 0x35, 0xe1, 0x14,
	0x65, 0xba, 0x91, 0x6b, 0xc8, 0x16, 0x80, 0xc3, 0x8f, 0x58, 0xd8, 0xdd, 0xf3, 0x82, 0x78, 0x4e,
	0x85, 0xf0, 0x8f, 0x00, 0x84, 0x44, 0x23, 0xd7, 0xe7, 0x2b, 0xb0, 0x1c, 0x62, 0x09, 0xf2, 0x7a,
	0xbe, 0x89, 0x46, 0x57, 0xba, 0x4c, 0x47, 0xa6, 0x5a, 0x97, 0xc4, 0xf8, 0x8d, 0x3c, 0xd6, 0x51,
	0xb7, 0xf4, 0x79, 0x44, 0x95, 0x6c, 0xff, 0xa7, 0x25, 0x58, 0x23, 0xf8, 0x7d, 0x2f, 0x89, 0x64,
	0x35, 0x73, 0x35, 0xcd, 0xfa, 0x36, 0x54, 0xf8, 0x63, 0x14, 0x6b, 0x15, 0x87, 0x7d, 0x2e, 0xad,
	0x25, 0x2d, 0x6d, 0xf3, 0xa6, 0x44, 0x72, 0x34, 0x7a, 0xeb, 0x0e, 0x54, 0x14, 0x74, 0xce, 0xca,
	0x5a, 0xb9, 0xca, 0x1a, 0x69, 0x69, 0x62, 0x80, 0x1b, 0x37, 0x1f, 0xf3, 0x4e, 0x12, 0x73, 0xaa,
	0xfc, 0xd9, 0xd3, 0x89, 0x8c, 0xf1, 0xf0, 0x6f, 0xde, 0x18, 0x0f, 0x81, 0x74, 0x4e, 0xfa, 0xfd,
	0x32, 0x2c, 0xa2, 0x49, 0xe2, 0x19, 0x58, 0x91, 0x26, 0x89, 0x6a, 0x25, 0x90, 0x35, 0x62, 0xb1,
	0xf5, 0x0c, 0xde, 0x26, 0xb2, 0x03, 0xde, 0x66, 0x71, 0xcc, 0x3a, 0x83, 0xa1, 0xb2, 0xfe, 0xac,
	0x38, 0x4d, 0x01, 0xbe, 0xa6, 0xa1, 0xe9, 0x41, 0x7c, 0xd1, 0xbc, 0x83, 0x35, 0x6c, 0x98, 0x96,
	0x32, 0x36, 0x4c, 0xd6, 0x5b, 0x50, 0x4b, 0xcb, 0x8c, 0x70, 0x1f, 0x1a, 0xef, 0xa3, 0x89, 0x82,
	0x5a, 0xba, 0x90, 0x8b, 0x19, 0x8f, 0x2c, 0x64, 0x45, 0x6a, 0xe9, 0x10, 0xa4, 0x94, 0x53, 0xfc,
	0xf1, 0xc8, 0x0d, 0x25, 0x02, 0x1d, 0x96, 0x80, 0x40, 0x88, 0xf0, 0x22, 0xd4, 0x43, 0xde, 0xe3,
	0x21, 0xf7, 0x89, 0xc1, 0xd0, 0xe6, 0x54, 0xd3, 0x30, 0x32, 0x9e, 0x2d, 0x50, 0xbb, 0x8e, 0xcd,
	0x04, 0xec, 0x57, 0xe2, 0xab, 0x6b, 0x87, 0x86, 0xa3, 0x3e, 0xc5, 0x6c, 0x90, 0x8a, 0xff, 0xae,
	0xa4, 0x94, 0xfe, 0x96, 0xd6, 0x37, 0x4a, 0xad, 0x86, 0xff, 0xed, 0x7f, 0xbc, 0x04, 0xad, 0xfc,
	0xfd, 0xe8, 0xf5, 0xe3, 0xa9, 0xc7, 0xff, 0x97, 0xa1, 0x49, 0xd7, 0xa1, 0xa8, 0x32, 0x89, 0xf4,
	0x7d, 0x38, 0xdd, 0x87, 0x62, 0x49, 0xc9, 0xd0, 0xda, 0x84, 0x13, 0x88, 0x95, 0xb5, 0x48, 0x91,
	0xfa, 0xe8, 0x75, 0x91, 0xb4, 0x63, 0x9a, 0xa3, 0x88, 0xfd, 0xa2, 0xe7, 0x1d, 0x67, 0x04, 0x8d,
	0x4a, 0xcf, 0x3b, 0xa6, 0x4d, 0xdb, 0x86, 0x86, 0xd8, 0x8c, 0xda, 0x9c, 0x85, 0x3e, 0xd6, 0x48,
	0x56, 0x80, 0x35, 0x01, 0xbc, 0xc9, 0x42, 0x5f, 0x54, 0xf8, 0x0a, 0xac, 0x1a, 0xd6, 0x00, 0x88,
	0x45, 0xa7, 0xdd, 0x46, 0xa8, 0xad, 0x01, 0x04, 0x9e, 0x10, 0xab, 0x98, 0x10, 0x46, 0x11, 0x65,
	0x05, 0x0b, 0xaa, 0x12, 0x44, 0x24, 0xdf, 0x86, 0x2a, 0x15, 0xc3, 0xfd, 0xae, 0xb4, 0xb7, 0x30,
	0xcd, 0x4f, 0x0a, 0x88, 0x44, 0x06, 0x31, 0x37, 0xfd, 0x2e, 0x2a, 0x4f, 0x2b, 0xa1, 0xfc, 0x12,
	0x74, 0xc2, 0x73, 0x5a, 0xda, 0x1e, 0x1a, 0xf0, 0xba, 0x80, 0xea, 0xe6, 0xbc, 0x4c, 0xc7, 0x67,
	0x03, 0x4b, 0x0a, 0x24, 0x02, 0xaa, 0xb1, 0x6c, 0x68, 0x3c, 0x4e, 0x7c, 0x03, 0x49, 0x1e, 0x8a,
	0x1f, 0x27, 0xbe, 0xc6, 0x79, 0x03, 0x2c, 0x65, 0x39, 0x63, 0x9c, 0x17, 0xe8, 0x64, 0xbc, 0x2e,
	0x53, 0xee, 0xa4, 0x67, 0x85, 0x97, 0xa1, 0x89, 0x92, 0x40, 0x4a, 0x54, 0x3a, 0x20, 0xd7, 0x11,
	0xaa, 0xa8, 0x7a, 0x0b, 0x20, 0x64, 0xfe, 0x81, 0x14, 0x1a, 0x9a, 0x48, 0x8f, 0x4b, 0xb3, 0xe8,
	0xc1, 0xfc, 0x03, 0x14, 0x28, 0x9c, 0x6a, 0xa8, 0xfe, 0xb6, 0xde, 0x91, 0x76, 0x27, 0x92, 0x4e,
	0xda, 0x0c, 0xb0, 0x64, 0x98, 0x01, 0xae, 0xc1, 0x42, 0x3a, 0x9d, 0xc4, 0xdf, 0x96, 0x03, 0x55,
	0x5d, 0x5a, 0xa1, 0x01, 0xc0, 0x39, 0xa8, 0x52, 0x2f, 0x54, 0xc6, 0x25, 0xa7, 0x82, 0x80, 0x3d,
	0x32, 0xcc, 0x30, 0x59, 0x92, 0xdc, 0x38, 0xbe, 0x07, 0xa7, 0xc6, 0x1b, 0xbf, 0xc3, 0x7c, 0xeb,
	0x14, 0x5a, 0x7e, 0xa4, 0xac, 0x49, 0x08, 0xe9, 0xa4, 0xea, 0xcd, 0xb6, 0xca, 0xfe, 0x8d, 0x92,
	0x56, 0xc8, 0xef, 0x30, 0xff, 0x9a, 0x5a, 0x5f, 0x4f, 0x60, 0x52, 0xf0, 0x3a, 0x2c, 0xf4, 0x98,
	0x2f, 0x77, 0xca, 0xb3, 0xc5, 0xf4, 0xdc, 0x61, 0xbe, 0x23, 0xb0, 0xc4, 0x89, 0x26, 0xa3, 0xa0,
	0x58, 0x50, 0x13, 0x24, 0x85, 0xd9, 0xff, 0xa8, 0x04, 0xa7, 0x65, 0x11, 0xa4, 0x8b, 0x4a, 0xcd,
	0xc2, 0x3e, 0x94, 0x92, 0x98, 0x5c, 0xc8, 0x0b, 0xca, 0x8e, 0x72, 0xf2, 0x08, 0x92, 0xa4, 0x86,
	0x0c, 0xe0, 0x59, 0x37, 0xd4, 0xfa, 0x36, 0xd4, 0x05, 0x91, 0x35, 0x93, 0x5a, 0xc4, 0x92, 0x4d,
	0xf5, 0xb7, 0x41, 0x52, 0xa7, 0xd6, 0x4b, 0x3f, 0xec, 0x5f, 0x2d, 0xc1, 0x85, 0xe2, 0x3e, 0x5e,
	0x3f, 0xd6, 0x94, 0x35, 0x2f, 0x3e, 0x4a, 0xb9, 0x8b, 0x8f, 0x9b, 0xb0, 0x26, 0x15, 0x91, 0xa9,
	0xa9, 0x06, 0xed, 0x6e, 0x2d, 0xa3, 0xfe, 0x5c, 0xd9, 0xce, 0x6a, 0x37, 0x0b, 0xb0, 0x7f, 0xad,
	0x0a, 0x1b, 0xc5, 0xb8, 0x0f, 0xb7, 0xac, 0x7b, 0x70, 0x4a, 0x9a, 0x50, 0xe3, 0xa1, 0x2c, 0xad,
	0xa8, 0x34, 0xb3, 0xa2, 0x13, 0x94, 0x51, 0x1c, 0xea, 0xd2, 0xd1, 0xfb, 0x01, 0x34, 0x69, 0x01,
	0xe6, 0x5a, 0xfc, 0xda, 0xe4, 0x82, 0x1e, 0x6e, 0xd1, 0x12, 0xd4, 0x05, 0x37, 0x42, 0xf3, 0xd3,
	0x3a, 0x86, 0xf3, 0x1d, 0x6d, 0x06, 0xdb, 0x56, 0x57, 0x4f, 0x79, 0xeb, 0x95, 0x6f, 0x4d, 0xad,
	0x60, 0xcc, 0x8e, 0x36, 0xad, 0xad, 0xd5, 0x99, 0x98, 0x66, 0x39, 0x70, 0xc6, 0xe3, 0x6e, 0x94,
	0x84, 0xbc, 0x4d, 0xcf, 0xa7, 0xd2, 0x5a, 0x17, 0x67, 0xd2, 0xe7, 0x94, 0xcc, 0x8a, 0x4f, 0x84,
	0x34, 0xb8, 0xf5, 0x6f, 0x2c, 0x42, 0x23, 0xd3, 0x5f, 0xeb, 0x17, 0x94, 0x0d, 0x52, 0x9e, 0xfa,
	0x57, 0xe7, 0x27, 0x1a, 0x7e, 0x21, 0x47, 0x27, 0xc3, 0xa5, 0x4c, 0xe9, 0xc3, 0xc0, 0x8f, 0x07,
	0x63, 0x43, 0xf2, 0xf5, 0x4a, 0xc7, 0xb2, 0xd2, 0xd2, 0xaf, 0x80, 0x45, 0xa5, 0x2b, 0x03, 0x79,
	0xc3, 0x2e, 0x67, 0x0d, 0x53, 0xa4, 0x75, 0xbc, 0x10, 0x29, 0x5a, 0x7f, 0xbb, 0x0c, 0x15, 0x55,
	0x94, 0xf5, 0x09, 0x9c, 0x60, 0x9e, 0x47, 0x6a, 0x8d, 0x27, 0x9a, 0x78, 0xeb, 0xcc, 0xf3, 0x50,
	0xfb, 0x91, 0x36, 0xc3, 0x85, 0x55, 0x2a, 0xa7, 0xcb, 0x62, 0x96, 0xbe, 0x02, 0xab, 0x6d, 0x5d,
	0xfb, 0x1a, 0x9d, 0xc4, 0x3f, 0x58, 0x01, 0x76, 0xb9, 0xe1, 0xa9, 0xbf, 0xe2, 0xc8, 0xdf, 0x1a,
	0xd0, 0xf0, 0xe9, 0x74, 0x54, 0x11, 0x88, 0x29, 0x4f, 0xfa, 0x19, 0xa9, 0x41, 0x0f, 0x15, 0x8a,
	0xf5, 0xbe, 0x69, 0x69, 0x35, 0x7b, 0xf9, 0xa6, 0xc8, 0xad, 0xff, 0xa6, 0x04, 0xad, 0xc9, 0x13,
	0xd7, 0xda, 0x9e, 0x34, 0x6d, 0xa6, 0x15, 0x9f, 0x9f, 0x1d, 0xdb, 0x93, 0x66, 0xc7, 0xd4, 0x42,
	0x9e, 0x66, 0x12, 0xd8, 0x1f, 0x40, 0x33, 0x6b, 0xca, 0x81, 0x6a, 0x86, 0x98, 0x8f, 0xb4, 0x9a,
	0x21, 0xe6, 0xa3, 0x09, 0xe6, 0xe9, 0xbf, 0x0c, 0x6b, 0xf4, 0x4e, 0xeb, 0x06, 0x3f, 0x74, 0x3b,
	0x1c, 0xcf, 0xf7, 0x2f, 0x40, 0xad, 0x8b, 0x5f, 0x6d, 0xbd, 0x43, 0x57, 0x1d, 0x20, 0xd0, 0x03,
	0xb1, 0x4f, 0x37, 0xa1, 0x1c, 0x28, 0x13, 0xec, 0x72, 0x80, 0x3a, 0x9d, 0x20, 0xd2, 0x57, 0xc2,
	0x74, 0xd8, 0xaf, 0x06, 0x91, 0xba, 0x0f, 0xde, 0x80, 0x95, 0xfd, 0x30, 0x38, 0x8a, 0x78, 0xa8,
	0x5e, 0x12, 0xc8, 0x4f, 0xfb, 0x1e, 0xd4, 0xcd, 0x67, 0x51, 0x45, 0x27, 0x1e, 0x92, 0xea, 0xcb,
	0x13, 0xa4, 0xfa, 0xdc, 0x53, 0xb0, 0x11, 0xd4, 0xcd, 0x7b, 0xfa, 0x67, 0x24, 0x37, 0xb7, 0xa0,
	0x42, 0xa7, 0x22, 0xde, 0x95, 0xb7, 0x5e, 0xfa, 0xdb, 0x1e, 0x91, 0x89, 0xe2, 0x76, 0xe0, 0xf7,
	0xdc, 0xfe, 0xd4, 0xcd, 0x47, 0xa9, 0xdc, 0xca, 0x13, 0x55, 0x6e, 0xf3, 0xdd, 0xcb, 0xff, 0x67,
	0xa9, 0xf0, 0x61, 0x3c, 0x62, 0x9c, 0xe3, 0x4d, 0x9f, 0x71, 0xb1, 0x5e, 0x9e, 0x71, 0xb1, 0xbe,
	0x30, 0xfd, 0x62, 0x7d, 0x31, 0x77, 0xb1, 0xfe, 0x16, 0x29, 0xc7, 0xc8, 0xae, 0x75, 0xda, 0x6d,
	0xb6, 0x42, 0xb3, 0x7f, 0x04, 0xcb, 0xf4, 0x20, 0x51, 0x3f, 0x9c, 0x2c, 0x4d, 0x7f, 0x38, 0x69,
	0x5d, 0x31, 0xa7, 0xef, 0xe4, 0xb7, 0x9c, 0x72, 0x5a, 0x1f, 0x92, 0x51, 0xc6, 0x1d, 0xf7, 0x90,
	0x7f, 0xe6, 0xbb, 0xb1, 0x75, 0x1e, 0xf0, 0x0a, 0x2e, 0x8a, 0xd9, 0x70, 0x64, 0xde, 0xc9, 0x21,
	0x40, 0x9c, 0x32, 0x59, 0x87, 0x0c, 0xe6, 0xb3, 0x36, 0x13, 0x4d, 0x02, 0x6b, 0xe1, 0xe2, 0x05,
	0xa8, 0x49, 0x44, 0x7c, 0xc6, 0xb0, 0x80, 0xcf, 0x18, 0x80, 0x40, 0x62, 0x88, 0xec, 0x8f, 0x48,
	0x5b, 0x26, 0xea, 0xdd, 0xe3, 0x7d, 0x9c, 0xd3, 0xaf, 0xc1, 0x0a, 0x21, 0x64, 0xcc, 0x49, 0xcc,
	0xd6, 0x39, 0x0a, 0xc1, 0x7e, 0x00, 0x56, 0x2e, 0xfb, 0x67, 0xa1, 0x8b, 0x4f, 0x32, 0xe8, 0xcb,
	0x18, 0x5a, 0x09, 0x21, 0xf3, 0x11, 0x95, 0x9c, 0x84, 0xae, 0x5c, 0x2a, 0x2a, 0xc7, 0x67, 0xa1,
	0x6b, 0xff, 0x47, 0xa5, 0x94, 0x1a, 0xb7, 0x39, 0xeb, 0xea, 0xe7, 0x36, 0x25, 0xe3, 0xb9, 0x0d,
	0xbe, 0xfb, 0x60, 0x61, 0x9c, 0x99, 0x20, 0x08, 0xc1, 0xf1, 0x7f, 0x13, 0x6a, 0xf2, 0xd0, 0x27,
	0x26, 0xba, 0x9c, 0xa2, 0x4d, 0xd5, 0x13, 0x9a, 0xfe, 0x0e, 0xf4, 0xd3, 0xa5, 0x70, 0x25, 0x55,
	0x98, 0x2e, 0x4e, 0xd1, 0x0a, 0x13, 0x0a, 0x8a, 0xf1, 0x9c, 0xc5, 0xb4, 0xd1, 0x2c, 0xe1, 0x19,
	0xb1, 0x22, 0x00, 0xf8, 0x48, 0xf1, 0x1d, 0x58, 0x17, 0x39, 0xee, 0xf1, 0x23, 0xb2, 0x5c, 0x8f,
	0xe9, 0x39, 0x46, 0x0d, 0x73, 0xe0, 0x78, 0x2b, 0x53, 0x21, 0x10, 0x20, 0x4c, 0x8f, 0xec, 0x8b,
	0x5a, 0x85, 0x7b, 0x4d, 0x9b, 0x95, 0xd2, 0x0c, 0x2a, 0x99, 0x0c, 0x70, 0x8d, 0x2e, 0x70, 0xef,
	0x05, 0xc1, 0x88, 0xf0, 0xec, 0xdf, 0x2c, 0x41, 0x4d, 0x3e, 0xf1, 0x43, 0xe5, 0xdd, 0x73, 0x00,
	0x1d, 0xfa, 0x34, 0xc8, 0x2f, 0x21, 0xbb, 0xdd, 0xec, 0xd4, 0x2a, 0xe7, 0xa7, 0xd6, 0x5b, 0xa0,
	0x50, 0xe5, 0x03, 0xab, 0xe2, 0x39, 0x9e, 0x22, 0x4d, 0x79, 0x77, 0xf5, 0x5b, 0x25, 0x68, 0x64,
	0x9f, 0x1a, 0x16, 0xf2, 0x37, 0xca, 0x5b, 0xce, 0xea, 0x3b, 0xb2, 0xc3, 0xbb, 0x90, 0x1f, 0xde,
	0xb3, 0x50, 0x11, 0x22, 0xab, 0x61, 0x75, 0xb3, 0xc2, 0x7d, 0xd2, 0x8c, 0xbe, 0x0a, 0xab, 0x21,
	0x1f, 0x09, 0x52, 0xbb, 0xa2, 0x7d, 0x87, 0xcc, 0x93, 0x37, 0xcc, 0x4d, 0x02, 0xef, 0x4a, 0xa8,
	0xfd, 0xaf, 0x95, 0xa0, 0x7e, 0xdd, 0xc5, 0xe6, 0xdd, 0x0a, 0x82, 0xae, 0xc9, 0x7d, 0xab, 0xd8,
	0x3a, 0xf5, 0x22, 0xa8, 0x9c, 0x7b, 0x11, 0xc4, 0xa3, 0x8e, 0x7a, 0xf9, 0x25, 0xfe, 0x0b, 0x98,
	0xdb, 0xd1, 0x9a, 0x61, 0xfc, 0x4f, 0x0a, 0xdc, 0x54, 0x37, 0xbb, 0xa4, 0x14, 0xb8, 0x91, 0x52,
	0xcc, 0x5e, 0x84, 0xa6, 0x46, 0xa0, 0x43, 0x9f, 0x3a, 0xfd, 0x4b, 0x28, 0x29, 0xa2, 0xf6, 0xa8,
	0x8d, 0x7b, 0x83, 0x20, 0x8c, 0x3b, 0xc9, 0xbc, 0x0a, 0xbd, 0xe7, 0x00, 0xba, 0x9c, 0x79, 0xed,
	0x51, 0xe8, 0x76, 0x34, 0xf5, 0x04, 0xe4, 0xbe, 0x00, 0xd8, 0xbf, 0x5f, 0x82, 0xa6, 0xec, 0xf9,
	0xfd, 0x30, 0xe8, 0x26, 0x9d, 0xd8, 0x7a, 0x05, 0x96, 0xf0, 0xf9, 0x9e, 0xe4, 0x6b, 0xb8, 0xe6,
	0x4d, 0xe2, 0x38, 0x94, 0x8c, 0xba, 0xf4, 0x24, 0x0c, 0xb9, 0xdf, 0x39, 0x6e, 0x77, 0xd4, 0xf6,
	0x50, 0x75, 0xea, 0x0a, 0xb8, 0x2d, 0x36, 0x86, 0x8b, 0xd0, 0xd4, 0x48, 0x66, 0x13, 0x74, 0x56,
	0x6c, 0x06, 0x2e, 0x89, 0x20, 0x8c, 0xdb, 0x47, 0xdc, 0xed, 0x0f, 0xf4, 0xcb, 0x7b, 0x01, 0xfa,
	0x21, 0x42, 0xec, 0x5f, 0x2f, 0x43, 0x55, 0xdb, 0x8f, 0x58, 0xa7, 0x61, 0xb9, 0x33, 0x60, 0x61,
	0xaa, 0x89, 0xa3, 0x2f, 0x41, 0x02, 0x92, 0xbc, 0x24, 0x09, 0xc8, 0x1e, 0x65, 0x0d, 0x16, 0xf8,
	0xe3, 0x91, 0xac, 0x58, 0xfc, 0xb5, 0xde, 0x84, 0xa5, 0x43, 0x97, 0x1f, 0xa9, 0xf5, 0x7d, 0x36,
	0x63, 0x9d, 0xb2, 0x29, 0xa6, 0xf5, 0x9e, 0x17, 0xa0, 0x3d, 0x06, 0xe1, 0xa1, 0x54, 0x72, 0xe0,
	0xfa, 0x72, 0xf0, 0xf0, 0xbf, 0x68, 0xb3, 0x1b, 0xb5, 0x93, 0x51, 0x3f, 0x64, 0x62, 0x7b, 0x25,
	0x93, 0x2d, 0x70, 0xa3, 0xcf, 0x24, 0x84, 0xb4, 0x6a, 0x71, 0xc8, 0xda, 0x7c, 0x18, 0x7c, 0xe9,
	0x6e, 0xac, 0xd0, 0x3a, 0x47, 0xd0, 0x4d, 0x01, 0x69, 0x7d, 0x00, 0x35, 0xa3, 0x2e, 0xac, 0xc4,
	0x0b, 0xd2, 0x1b, 0x16, 0x2f, 0x88, 0x4d, 0xf5, 0x7b, 0xd9, 0x54, 0xbf, 0xdb, 0x6f, 0x43, 0xf5,
	0x7a, 0x72, 0x2c, 0xaf, 0x19, 0xe6, 0x53, 0x3b, 0xff, 0x6a, 0x19, 0x56, 0xbe, 0xb8, 0x7d, 0x7f,
	0x6f, 0x10, 0xa0, 0x48, 0xa5, 0x06, 0x19, 0xad, 0x2c, 0x69, 0x48, 0x37, 0xa1, 0xb6, 0x9f, 0x1c,
	0xb7, 0xd5, 0x35, 0x81, 0x61, 0xab, 0xa9, 0xeb, 0x72, 0x60, 0x5f, 0xfd, 0x8d, 0xac, 0x0f, 0xa1,
	0x6e, 0x3e, 0xa3, 0x95, 0x5c, 0x62, 0x43, 0x64, 0x90, 0x15, 0x6d, 0x3a, 0xc6, 0xc3, 0x66, 0xa7,
	0xd6, 0x4b, 0xdf, 0xd5, 0x8a, 0xcc, 0xe6, 0x73, 0x5a, 0x79, 0x8a, 0x9a, 0x92, 0xb9, 0x93, 0xbe,
	0xaf, 0x6d, 0x7d, 0x00, 0x75, 0x33, 0x31, 0xed, 0x71, 0xc9, 0x9c, 0xfc, 0x62, 0x3e, 0xe0, 0x83,
	0x5a, 0x35, 0x1f, 0xf0, 0x0d, 0xed, 0x2f, 0xc1, 0xea, 0x5d, 0x21, 0x88, 0x3e, 0x70, 0x3b, 0x07,
	0x9c, 0xee, 0x85, 0xf2, 0x04, 0x34, 0x99, 0x4a, 0x39, 0xcb, 0x54, 0x6c, 0x68, 0x78, 0x2c, 0x8a,
	0xdb, 0x23, 0x76, 0x6c, 0x72, 0xa4, 0x9a, 0x00, 0xde, 0x67, 0xe8, 0x67, 0x40, 0x1c, 0xf7, 0x2b,
	0xea, 0x6d, 0xb3, 0xf5, 0x1c, 0x2c, 0x7c, 0x35, 0x18, 0xc9, 0xd5, 0x54, 0x33, 0xba, 0xe7, 0x08,
	0xf8, 0x13, 0xd3, 0xfc, 0x35, 0x58, 0xc7, 0xfa, 0x0b, 0xe4, 0xeb, 0x55, 0x91, 0x60, 0x8a, 0xd7,
	0xf7, 0xe0, 0x24, 0xbd, 0xd9, 0xbc, 0x27, 0x6d, 0xb8, 0xe4, 0x7c, 0xb1, 0x60, 0xb1, 0x17, 0x06,
	0x43, 0xb5, 0x8b, 0x8a, 0xff, 0x82, 0x04, 0x71, 0xa0, 0x24, 0xe3, 0x38, 0x40, 0x2d, 0x57, 0x5a,
	0x34, 0xfe, 0xb7, 0xef, 0x42, 0x33, 0xfb, 0xa4, 0xd8, 0xfa, 0x10, 0x56, 0x47, 0xec, 0x18, 0x77,
	0x18, 0xf9, 0xb8, 0x38, 0xb3, 0x55, 0x50, 0x92, 0xc4, 0x76, 0x9a, 0xa3, 0xcc, 0xb7, 0xfd, 0x7f,
	0x2d, 0x40, 0x33, 0x8b, 0x62, 0xbd, 0x08, 0xf5, 0x60, 0xc4, 0xfd, 0xb6, 0xc4, 0x94, 0x43, 0x52,
	0x13, 0x30, 0x89, 0x69, 0x5d, 0x85, 0xd3, 0xaa, 0x4a, 0xd7, 0xef, 0x05, 0xed, 0x68, 0x10, 0x1c,
	0xb5, 0x8d, 0x77, 0xb9, 0x27, 0x64, 0xaa, 0x20, 0xfe, 0xde, 0x20, 0x38, 0x42, 0xb9, 0xff, 0x45,
	0xa8, 0x9b, 0x99, 0x24, 0xd3, 0xae, 0x19, 0xa8, 0xd6, 0xbb, 0xb0, 0x7c, 0xc4, 0x3b, 0x03, 0xa6,
	0x6c, 0xd5, 0x9f, 0x1b, 0xef, 0xc1, 0xe6, 0x0f, 0x11, 0x01, 0x45, 0x5a, 0x89, 0x2c, 0xb2, 0x31,
	0xcf, 0x1d, 0xb1, 0x63, 0x29, 0x40, 0x16, 0x65, 0xbb, 0x86, 0x08, 0x94, 0x8d, 0x90, 0x5b, 0xbf,
	0x51, 0x02, 0x48, 0x4b, 0x13, 0x7c, 0x52, 0x5d, 0xcc, 0x93, 0x5e, 0x5e, 0xfa, 0x2d, 0x68, 0x48,
	0xe8, 0x36, 0x02, 0xad, 0xf7, 0xe0, 0x8c, 0x26, 0x37, 0x6d, 0x18, 0xea, 0x69, 0x84, 0xec, 0xfc,
	0x29, 0x45, 0x62, 0x4c, 0x55, 0xef, 0x15, 0x04, 0xaf, 0xe6, 0xbe, 0x2a, 0xbd, 0xeb, 0xaa, 0xab,
	0x88, 0x3a, 0x01, 0xb7, 0x11, 0xd6, 0x3a, 0x00, 0x48, 0x1b, 0xfa, 0x13, 0x6e, 0x91, 0xfd, 0x7e,
	0x7a, 0xf2, 0x93, 0x43, 0xbf, 0x06, 0x0b, 0x07, 0x5c, 0x1d, 0x3e, 0xc4, 0x5f, 0xb1, 0x7c, 0xc9,
	0xdc, 0x4a, 0x2e, 0x5f, 0xfc, 0xb0, 0x7f, 0xa7, 0x24, 0xb6, 0x02, 0x1e, 0x11, 0xe1, 0xce, 0x42,
	0xa5, 0x83, 0x8a, 0x63, 0xbd, 0x7e, 0x57, 0xf0, 0x7b, 0xb7, 0x6b, 0x5d, 0x02, 0x7a, 0x1e, 0x86,
	0xd6, 0x45, 0xd9, 0x97, 0x76, 0x08, 0xff, 0x74, 0xc4, 0x7d, 0x7d, 0xb3, 0xde, 0x09, 0xfc, 0x28,
	0x19, 0xe6, 0x2e, 0x82, 0x24, 0x50, 0xbf, 0x2c, 0xeb, 0xb1, 0x0e, 0x6f, 0xef, 0x7b, 0xac, 0x73,
	0x90, 0x7f, 0x10, 0xd8, 0xe1, 0xd7, 0x05, 0x98, 0x76, 0xea, 0x5f, 0x86, 0x9a, 0x6e, 0xe0, 0xc3,
	0xad, 0x67, 0xd3, 0xc4, 0xa2, 0xda, 0x17, 0x0a, 0x6b, 0x4f, 0xa0, 0xba, 0xc3, 0xdc, 0x78, 0xa0,
	0xc8, 0xd3, 0x13, 0x1f, 0x46, 0xdd, 0xf8, 0xfd, 0xcc, 0xc9, 0x63, 0xff, 0xad, 0x32, 0x9c, 0x1a,
	0xd3, 0x50, 0x08, 0x29, 0x71, 0xe6, 0x13, 0x7f, 0xa5, 0xc6, 0x4b, 0x2d, 0xae, 0x25, 0x64, 0xb7,
	0x2b, 0xd6, 0xad, 0x4a, 0x36, 0xac, 0xae, 0x95, 0xd1, 0xf9, 0x3d, 0x21, 0x87, 0x69, 0xe1, 0x78,
	0xd1, 0xbc, 0x7e, 0x13, 0xe5, 0x8a, 0x19, 0x1a, 0x84, 0xa9, 0xd0, 0x55, 0x95, 0x10, 0x69, 0xb8,
	0x6e, 0x5c, 0x89, 0x2d, 0x8f, 0x5d, 0x89, 0x65, 0xa5, 0xce, 0x95, 0xbc, 0xd4, 0x49, 0xaf, 0xf7,
	0x5c, 0xc5, 0x7f, 0xe5, 0x8d, 0x19, 0x81, 0x10, 0xc1, 0x82, 0x45, 0x34, 0x6a, 0xab, 0xe2, 0xa2,
	0xc1, 0xff, 0xf6, 0xcf, 0xc3, 0x99, 0x31, 0x0a, 0xdd, 0x44, 0x63, 0xd3, 0xe9, 0x34, 0x7a, 0x09,
	0x1a, 0xd2, 0x74, 0x44, 0x7a, 0xe7, 0x90, 0x92, 0x16, 0x01, 0x49, 0xa0, 0xb6, 0xff, 0x8b, 0x32,
	0x9c, 0x1d, 0x2b, 0xfd, 0xda, 0x7e, 0x14, 0x0b, 0xa9, 0xe6, 0x2f, 0xc6, 0x40, 0x8e, 0xc1, 0x38,
	0x2d, 0xa1, 0x80, 0x96, 0xff, 0xfc, 0x42, 0xc1, 0x48, 0x91, 0xe6, 0xeb, 0x2f, 0x28, 0xa9, 0x28,
	0x79, 0x0e, 0x50, 0xb3, 0x49, 0x96, 0xd1, 0x74, 0xf3, 0x57, 0x11, 0x00, 0x34, 0x25, 0xbe, 0x6c,
	0xde, 0xdc, 0xd4, 0x0a, 0xf4, 0x46, 0xe9, 0x3d, 0xcd, 0x45, 0x68, 0x8e, 0x42, 0xf7, 0x50, 0xb4,
	0x5e, 0x0e, 0x49, 0x1d, 0xc9, 0xd2, 0x90, 0x50, 0x39, 0x26, 0x7f, 0xaf, 0x04, 0xcf, 0x8d, 0x8d,
	0x89, 0x72, 0x3f, 0x36, 0x0a, 0xc2, 0x38, 0xdb, 0xa0, 0x52, 0xae, 0x41, 0xea, 0x06, 0xae, 0x6c,
	0xdc, 0xc0, 0x9d, 0x84, 0xa5, 0xf4, 0x81, 0xf0, 0x92, 0x43, 0x1f, 0x42, 0xc0, 0x92, 0x4f, 0xd8,
	0xe9, 0xfd, 0x3a, 0xf3, 0x0f, 0xe8, 0xa0, 0xd0, 0x70, 0x56, 0x29, 0x01, 0x15, 0x42, 0x02, 0x9c,
	0xf2, 0xd0, 0xf4, 0x5a, 0x59, 0x1d, 0x31, 0x11, 0x7e, 0x4b, 0xdd, 0x2b, 0xdb, 0xff, 0xf2, 0x22,
	0x00, 0x49, 0x5f, 0xb7, 0xe4, 0xe1, 0xf1, 0x49, 0xf5, 0x18, 0xa6, 0x4c, 0xba, 0x90, 0x95, 0x49,
	0x5f, 0x81, 0x65, 0xa9, 0xdd, 0x58, 0x2a, 0xd4, 0x6e, 0xc8, 0x54, 0xeb, 0x3d, 0xa8, 0x48, 0xbd,
	0x5a, 0xb4, 0x51, 0x43, 0x41, 0xb3, 0x45, 0x76, 0x03, 0xaa, 0x5d, 0x4a, 0x2f, 0x45, 0x4e, 0x79,
	0x14, 0xae, 0x75, 0x19, 0x96, 0xe5, 0x33, 0xfe, 0x7a, 0xfa, 0x10, 0x36, 0x63, 0x41, 0xe6, 0x48,
	0x84, 0xd6, 0xdf, 0x2d, 0x43, 0xcd, 0x28, 0x64, 0x0e, 0xff, 0x60, 0x68, 0x55, 0x56, 0x36, 0xac,
	0xca, 0xa6, 0xbd, 0xb2, 0xc9, 0x3c, 0x69, 0x58, 0xcc, 0x3d, 0x69, 0xc8, 0x3c, 0x3c, 0x58, 0x9a,
	0xf1, 0xf0, 0x40, 0x2b, 0x68, 0x97, 0xcd, 0xf7, 0x0f, 0xfa, 0x8d, 0xc3, 0xca, 0xbc, 0x2f, 0x3b,
	0x2a, 0x4f, 0xf8, 0x6c, 0xa1, 0x3a, 0xfe, 0x6c, 0xe1, 0x6f, 0x16, 0x29, 0xf7, 0x53, 0x6f, 0x80,
	0x1f, 0xe5, 0x0d, 0xf8, 0x5e, 0x9a, 0xee, 0x4b, 0x66, 0x33, 0x6b, 0xc7, 0x77, 0x4d, 0x5a, 0x72,
	0x7d, 0xfd, 0x97, 0xd6, 0xf6, 0x1f, 0x95, 0x60, 0x63, 0x92, 0xfb, 0x19, 0xeb, 0xc3, 0x7c, 0xf3,
	0x5e, 0x9c, 0xe6, 0xad, 0x26, 0xd7, 0xb8, 0xfd, 0xa7, 0x6e, 0x5c, 0xde, 0x08, 0x71, 0x21, 0x6f,
	0x84, 0x68, 0x1f, 0x43, 0x45, 0x3d, 0x99, 0x53, 0x6a, 0x50, 0x7c, 0x30, 0xa9, 0x2b, 0x02, 0x05,
	0xda, 0x7d, 0x9a, 0x45, 0xa8, 0xcc, 0x02, 0xa4, 0xee, 0x47, 0xfc, 0xb7, 0x6f, 0x41, 0x53, 0x5b,
	0x4a, 0xd1, 0xd1, 0x0b, 0x95, 0x02, 0x04, 0x31, 0x1a, 0xa0, 0x40, 0x13, 0x2d, 0x03, 0x7f, 0xa5,
	0x04, 0xe7, 0x55, 0x27, 0xae, 0x75, 0x3a, 0xc9, 0x30, 0xf1, 0x58, 0xcc, 0xbb, 0xd8, 0x41, 0x14,
	0xf4, 0x66, 0x76, 0x4c, 0x33, 0xbb, 0xb2, 0xc9, 0xec, 0xae, 0x80, 0x45, 0x7e, 0xd2, 0xda, 0x74,
	0x2f, 0x40, 0x6a, 0x4c, 0x32, 0x75, 0x59, 0xa3, 0x14, 0xb2, 0x2a, 0x42, 0x75, 0xe6, 0xdf, 0x2c,
	0xc1, 0x29, 0xed, 0xe0, 0x87, 0xf9, 0x07, 0x69, 0xf5, 0x17, 0xa1, 0xe9, 0x71, 0xd6, 0xe5, 0xe1,
	0x7e, 0x20, 0x4a, 0xd1, 0x2d, 0x68, 0x18, 0xd0, 0x89, 0x8d, 0x40, 0x2f, 0x05, 0x46, 0x23, 0xd4,
	0xe9, 0xc4, 0xac, 0x5f, 0x21, 0xe1, 0x81, 0xc4, 0x50, 0xf6, 0xd5, 0x15, 0x10, 0x0f, 0xbc, 0x7f,
	0x7f, 0x91, 0xb4, 0xd8, 0xa8, 0x6d, 0xbd, 0x9d, 0x60, 0xd3, 0xde, 0x54, 0x3e, 0x2a, 0xe8, 0x04,
	0x7e, 0x56, 0xf1, 0x2e, 0x03, 0x67, 0xf3, 0x76, 0x72, 0x9f, 0xb9, 0xca, 0x7d, 0xc5, 0xeb, 0xb0,
	0xd8, 0x63, 0xbe, 0x3a, 0x8a, 0x9f, 0x29, 0xc2, 0xdf, 0x61, 0xbe, 0x83, 0x48, 0xa9, 0x87, 0x83,
	0x05, 0xc3, 0xc3, 0x81, 0x38, 0xcb, 0x3c, 0x4e, 0xd4, 0x63, 0x17, 0xf1, 0x37, 0xe3, 0x13, 0x63,
	0x29, 0xe3, 0x13, 0xc3, 0x3a, 0x83, 0x8f, 0x5c, 0x0c, 0xb3, 0x9f, 0xe5, 0x1e, 0x19, 0xf4, 0x9c,
	0x82, 0xe5, 0x5e, 0xa2, 0x6d, 0x7d, 0x1a, 0xce, 0x52, 0x2f, 0x11, 0xe0, 0x97, 0xa0, 0x71, 0xcc,
	0x0e, 0x92, 0x21, 0x53, 0x52, 0x3b, 0xed, 0xd7, 0x75, 0x09, 0x24, 0x99, 0xfd, 0x15, 0x58, 0xd5,
	0xef, 0x31, 0x32, 0x16, 0xc5, 0x8d, 0x7d, 0xf9, 0x1a, 0x83, 0xf0, 0x5e, 0x86, 0x66, 0xc8, 0xbb,
	0x26, 0x1a, 0x28, 0x23, 0xb8, 0x6e, 0x8a, 0x65, 0x43, 0x43, 0xbe, 0xa7, 0x90, 0x48, 0xd2, 0x88,
	0xc7, 0x73, 0x53, 0x9c, 0x17, 0xa0, 0xb6, 0xcf, 0xf6, 0xb9, 0xb4, 0x07, 0x92, 0xd6, 0x3b, 0x80,
	0x20, 0x7d, 0x84, 0x79, 0x9c, 0x88, 0x8e, 0x8a, 0xa9, 0x2e, 0xb1, 0xc8, 0x70, 0xa7, 0x29, 0xe0,
	0x7b, 0x02, 0x4c, 0x1e, 0x55, 0xb6, 0x61, 0x09, 0x47, 0x84, 0x94, 0x10, 0x9e, 0xf6, 0xc4, 0x24,
	0xfe, 0x17, 0x6e, 0x19, 0x16, 0x2c, 0x7a, 0xee, 0x23, 0x57, 0x29, 0x2b, 0xc4, 0xff, 0xd6, 0x47,
	0xb0, 0xb0, 0xc3, 0xfc, 0x39, 0xd5, 0xa4, 0x6b, 0x64, 0x2c, 0x22, 0x75, 0x84, 0x3d, 0xe6, 0xdb,
	0xff, 0x77, 0x09, 0x4e, 0xe9, 0x61, 0x57, 0x72, 0x86, 0xf2, 0xe6, 0x31, 0x66, 0xff, 0xa3, 0x5d,
	0xa6, 0x94, 0x8b, 0x5c, 0xa6, 0x2c, 0x18, 0x2e, 0x53, 0xce, 0x41, 0x15, 0xad, 0xa6, 0x34, 0xaf,
	0x68, 0x38, 0x15, 0x01, 0x40, 0x35, 0xc5, 0x19, 0x58, 0x71, 0xa3, 0x76, 0x2f, 0xf1, 0x12, 0x9c,
	0x24, 0x15, 0x67, 0xd9, 0x8d, 0x76, 0x12, 0x2f, 0xb1, 0x5e, 0x85, 0x55, 0x37, 0xca, 0x3e, 0xf6,
	0x21, 0x85, 0x63, 0xd3, 0x8d, 0x32, 0x4f, 0x7d, 0x5e, 0x80, 0x9a, 0xe7, 0x32, 0xbf, 0x2d, 0x6d,
	0xa8, 0xa4, 0xad, 0x9f, 0x00, 0x7d, 0x41, 0xc6, 0x53, 0x2f, 0x41, 0x79, 0x90, 0xc8, 0x5d, 0xeb,
	0x44, 0xc1, 0xdc, 0x76, 0xca, 0x83, 0xc4, 0xf6, 0x8d, 0x65, 0x44, 0x7d, 0x4f, 0x27, 0x7a, 0x89,
	0x96, 0x6e, 0x94, 0x31, 0x6c, 0x32, 0xc5, 0xaa, 0xb7, 0xb5, 0xb4, 0xb0, 0x50, 0xb0, 0xe2, 0x4c,
	0x52, 0x2a, 0xa9, 0xc1, 0xee, 0xd2, 0x3d, 0x09, 0x5d, 0x92, 0xf8, 0x6c, 0x14, 0x0d, 0xc8, 0x98,
	0xf6, 0x4b, 0xe5, 0xca, 0xa6, 0xfc, 0x65, 0x22, 0xc6, 0x68, 0x5f, 0x9a, 0x6c, 0x37, 0x1c, 0xf1,
	0xd7, 0x7a, 0x23, 0xdd, 0x7a, 0x16, 0x52, 0xcb, 0xdd, 0x7c, 0x55, 0x0a, 0xc7, 0xfe, 0xe3, 0x0a,
	0x55, 0x83, 0xe6, 0x7b, 0xba, 0x9a, 0x22, 0x51, 0xac, 0xd8, 0xa4, 0xd3, 0xbc, 0x23, 0x5d, 0x98,
	0x70, 0x47, 0xba, 0x38, 0xf3, 0x8e, 0x74, 0x69, 0xda, 0x1d, 0xa9, 0x75, 0x17, 0x56, 0x3b, 0xcc,
	0xeb, 0x20, 0x7b, 0x97, 0xae, 0xca, 0x96, 0x53, 0xf7, 0x00, 0x63, 0xad, 0xdf, 0xdc, 0x56, 0xc8,
	0xe8, 0xc5, 0xcc, 0x69, 0x76, 0x32, 0xdf, 0xb3, 0x4d, 0x3f, 0xb3, 0xfb, 0x5d, 0x65, 0xc6, 0xc9,
	0xa0, 0x3a, 0x76, 0x32, 0x78, 0x07, 0x96, 0xc4, 0x0a, 0x8c, 0x36, 0x20, 0x35, 0xcf, 0x1a, 0x6f,
	0x25, 0xca, 0x26, 0x9c, 0xc5, 0x0e, 0x21, 0x5b, 0x6f, 0xc0, 0x32, 0x1a, 0x1b, 0x2a, 0x31, 0xf4,
	0x54, 0x66, 0xdc, 0x54, 0x36, 0x47, 0x22, 0x59, 0xdf, 0x82, 0x86, 0x92, 0x0e, 0x48, 0x6f, 0x5f,
	0x9f, 0x78, 0x2f, 0x57, 0x97, 0x88, 0x0f, 0x51, 0x6f, 0xbf, 0x03, 0x0d, 0x69, 0xc5, 0x29, 0xa7,
	0x49, 0x23, 0x95, 0x50, 0xc6, 0x5b, 0x49, 0x66, 0x9d, 0x34, 0x69, 0xea, 0xbd, 0xf4, 0x23, 0x6a,
	0xfd, 0x32, 0x34, 0xb3, 0x84, 0xce, 0x3d, 0x5c, 0x2c, 0xe5, 0x1f, 0x2e, 0x16, 0xbd, 0x2c, 0x2a,
	0x4f, 0x7e, 0x59, 0x84, 0xe7, 0x16, 0x2c, 0x8a, 0x66, 0xf2, 0x92, 0x83, 0x76, 0x24, 0x58, 0x56,
	0xd4, 0xfa, 0x13, 0xf9, 0xac, 0x75, 0x4f, 0xb2, 0xba, 0x31, 0xee, 0x33, 0xe3, 0xd9, 0xfa, 0x77,
	0x60, 0xd5, 0x47, 0x47, 0x7e, 0x6d, 0x2e, 0xfd, 0xd4, 0xc9, 0x95, 0x89, 0xcb, 0x25, 0xe7, 0xc2,
	0xce, 0x69, 0x12, 0xae, 0x76, 0x69, 0x77, 0x11, 0x9a, 0x1d, 0xb4, 0xb3, 0x68, 0x2b, 0x0f, 0x76,
	0x24, 0xe1, 0x34, 0x08, 0x7a, 0x4d, 0xfa, 0xb1, 0x7b, 0x11, 0xea, 0x6e, 0xd4, 0x96, 0x0f, 0x29,
	0x78, 0x57, 0xf2, 0xaf, 0x9a, 0x1b, 0x6d, 0x2b, 0x50, 0xeb, 0x8f, 0x4b, 0x50, 0x33, 0x68, 0xfc,
	0x0d, 0x7c, 0x52, 0xf2, 0x97, 0xe1, 0x84, 0x63, 0x3a, 0xe5, 0xe4, 0xda, 0x22, 0x74, 0x8c, 0x85,
	0x6c, 0xc0, 0x4a, 0xc8, 0x87, 0x2c, 0x3c, 0xd0, 0x1e, 0xff, 0xe4, 0xe7, 0xd7, 0xbf, 0xd0, 0xb4,
	0x43, 0x58, 0x47, 0x57, 0x80, 0x48, 0x50, 0x37, 0xf0, 0xa5, 0xcd, 0xcb, 0x0c, 0xef, 0x7e, 0xdf,
	0x81, 0x55, 0x39, 0x80, 0x7a, 0xf8, 0xcb, 0x53, 0x86, 0x9f, 0x70, 0xd5, 0xb7, 0x3d, 0x82, 0x35,
	0x87, 0x3f, 0xda, 0x73, 0xfb, 0x7e, 0x32, 0x52, 0x4e, 0x9b, 0x36, 0x60, 0x45, 0xce, 0x2e, 0xe5,
	0x9e, 0x5c, 0x7e, 0x0a, 0x16, 0x39, 0x62, 0x51, 0x74, 0x44, 0x8f, 0x29, 0x50, 0x50, 0x57, 0xdf,
	0xda, 0xa5, 0xa3, 0xbc, 0x30, 0xed, 0x48, 0x2b, 0x6d, 0x63, 0x23, 0x24, 0xa1, 0xf9, 0x2a, 0xba,
	0x30, 0xcc, 0xd6, 0x38, 0xd3, 0xef, 0xe1, 0x1f, 0x97, 0xa1, 0xe2, 0xf0, 0x47, 0xe8, 0xff, 0xf8,
	0x6b, 0xb6, 0xef, 0x3c, 0xfa, 0x00, 0x24, 0xe2, 0x4a, 0x11, 0x34, 0x05, 0x58, 0x57, 0x60, 0x99,
	0xec, 0x88, 0x24, 0x8b, 0x3f, 0x89, 0xa7, 0x9c, 0x9c, 0x01, 0x92, 0x23, 0x71, 0xa4, 0x21, 0x58,
	0x37, 0x18, 0xb6, 0x0f, 0xf8, 0xb1, 0xb4, 0xe0, 0xaf, 0x12, 0xe4, 0xfb, 0xfc, 0xd8, 0x58, 0x53,
	0xca, 0xf4, 0x68, 0xd9, 0x5c, 0x53, 0xca, 0xfc, 0xe8, 0x12, 0xac, 0xf5, 0xb9, 0xdf, 0x66, 0x9d,
	0x0e, 0x8f, 0x22, 0xf9, 0x62, 0x89, 0x1e, 0x96, 0x35, 0xfb, 0xdc, 0xbf, 0x86, 0x60, 0x7a, 0xb3,
	0xf4, 0x06, 0x58, 0xe9, 0x3d, 0xab, 0xd4, 0xb1, 0x47, 0xd2, 0x03, 0xcd, 0xba, 0xbe, 0x6b, 0x55,
	0x09, 0x9a, 0xec, 0x55, 0x83, 0xec, 0xff, 0x6f, 0x49, 0x50, 0x30, 0x22, 0x0a, 0xce, 0x9c, 0x54,
	0x33, 0x58, 0xce, 0xc5, 0x74, 0x04, 0x16, 0xd2, 0x8b, 0x2f, 0x39, 0x9a, 0xe9, 0x70, 0xbc, 0x25,
	0xd5, 0x44, 0x78, 0x27, 0xb3, 0x98, 0x95, 0x49, 0x8c, 0x77, 0x5b, 0xa4, 0x2d, 0xc2, 0xd9, 0xfe,
	0x1e, 0x9c, 0x19, 0xb0, 0xa8, 0x9d, 0xf8, 0x21, 0x67, 0xdd, 0xb6, 0xe9, 0x8b, 0x5a, 0x72, 0x9c,
	0x53, 0x03, 0x16, 0x7d, 0x86, 0xa9, 0x19, 0xfb, 0x2c, 0x71, 0x0c, 0x37, 0xc9, 0x48, 0xf4, 0xae,
	0xb1, 0x94, 0x86, 0xf6, 0xbf, 0x55, 0x86, 0x86, 0xc3, 0x1f, 0xdd, 0x1c, 0x32, 0xd7, 0x23, 0x2a,
	0x68, 0xd7, 0x5c, 0x25, 0xd3, 0x35, 0xd7, 0x5f, 0xcc, 0x21, 0x91, 0x60, 0xef, 0x40, 0xd3, 0xe1,
	0x8f, 0xae, 0xbb, 0x7e, 0xf7, 0xa9, 0xd8, 0x82, 0xbd, 0x03, 0x1b, 0x0e, 0x7f, 0x44, 0xd7, 0x49,
	0xf7, 0x53, 0x67, 0x61, 0x68, 0x3e, 0xa0, 0x3d, 0x8d, 0x95, 0x4c, 0x4f, 0x63, 0x27, 0x61, 0x29,
	0x89, 0x58, 0x5f, 0x4b, 0x67, 0xf8, 0x91, 0x29, 0xe7, 0x66, 0xea, 0x26, 0x4d, 0x95, 0x53, 0x30,
	0x90, 0xc5, 0xe5, 0x7c, 0x02, 0xa7, 0x1d, 0xfe, 0x28, 0xcd, 0xbc, 0x13, 0x84, 0x7b, 0xbc, 0x93,
	0xd0, 0x8e, 0xa0, 0x7d, 0xd2, 0x2a, 0x06, 0x76, 0x1e, 0xaa, 0xc1, 0x88, 0x4b, 0xc7, 0xa7, 0x72,
	0x19, 0x68, 0x80, 0xfd, 0x0b, 0xa2, 0xac, 0xe8, 0x21, 0x0f, 0x7b, 0x6e, 0xae, 0xac, 0x99, 0x0b,
	0xec, 0x45, 0xa8, 0x47, 0x88, 0x9a, 0x79, 0xa9, 0x58, 0x23, 0x18, 0x4d, 0xd8, 0x2f, 0xc0, 0x92,
	0x23, 0x80, 0x74, 0xbb, 0x97, 0x0c, 0xf7, 0x79, 0x58, 0xd8, 0x4a, 0x4d, 0xc7, 0xb2, 0x49, 0x47,
	0x73, 0x54, 0x16, 0x72, 0xa3, 0xf2, 0x00, 0xea, 0xb2, 0xec, 0x9b, 0x8a, 0x56, 0x05, 0x14, 0x54,
	0x75, 0x95, 0x8d, 0xba, 0xa6, 0x95, 0xfa, 0xcb, 0x62, 0x03, 0x7b, 0x74, 0x37, 0xe8, 0xa2, 0xeb,
	0x69, 0xb9, 0x66, 0x5e, 0x84, 0xba, 0xcf, 0x8f, 0xda, 0x3a, 0x13, 0xd5, 0x50, 0xf3, 0xf9, 0x91,
	0x89, 0x12, 0x78, 0xdd, 0x76, 0x6e, 0x0e, 0xd5, 0x02, 0xaf, 0x6b, 0xa2, 0x64, 0xe8, 0xb5, 0x30,
	0x4e, 0xaf, 0x5d, 0x5c, 0xdf, 0x9f, 0xb2, 0x24, 0x1e, 0x6c, 0x5d, 0x4b, 0xe2, 0x41, 0xa1, 0x2c,
	0x55, 0xd4, 0xa5, 0x35, 0x58, 0x48, 0xdf, 0x82, 0x8a, 0xbf, 0xf6, 0x9e, 0x28, 0x2a, 0x32, 0x8a,
	0x9a, 0x67, 0x3c, 0x33, 0x6b, 0xb0, 0x3c, 0xce, 0x80, 0x6e, 0xe1, 0x8a, 0xa2, 0x42, 0xb7, 0x07,
	0xbc, 0x73, 0x50, 0xd8, 0xc0, 0x39, 0x0a, 0x72, 0x44, 0x41, 0x91, 0x59, 0xd0, 0xcc, 0xe6, 0xbd,
	0x00, 0x35, 0xc1, 0x57, 0xd5, 0xfa, 0x2d, 0x2b, 0xe7, 0x0a, 0xca, 0x95, 0xb0, 0xfd, 0x2b, 0x25,
	0x58, 0xd5, 0xad, 0xa3, 0xcd, 0xf9, 0x6b, 0x36, 0x2f, 0x9d, 0x4b, 0x0b, 0xe6, 0x5c, 0x7a, 0x09,
	0x1a, 0xac, 0x7b, 0xc8, 0xc3, 0xd8, 0x8d, 0x78, 0x3b, 0x8a, 0x95, 0xc5, 0x6d, 0x5d, 0x03, 0xf7,
	0xe2, 0xd0, 0xde, 0x12, 0x8d, 0x88, 0x32, 0x8d, 0x98, 0x29, 0x1a, 0xfc, 0xb8, 0x6c, 0xd0, 0x95,
	0x18, 0xfb, 0xd7, 0x6c, 0xf8, 0xcf, 0x1e, 0x77, 0x7f, 0x42, 0x9e, 0x4d, 0x8e, 0xa5, 0x65, 0x38,
	0x08, 0x72, 0x2c, 0x4d, 0x1f, 0xb3, 0xa9, 0xf8, 0x31, 0xd4, 0x1c, 0xfe, 0xe8, 0x36, 0x67, 0xf1,
	0x75, 0x21, 0xa7, 0xbf, 0x05, 0x27, 0xfd, 0xa0, 0xad, 0x39, 0x5d, 0x5b, 0x19, 0x27, 0x13, 0x45,
	0x2d, 0x3f, 0xf8, 0x54, 0x25, 0x6d, 0x53, 0x8a, 0xfd, 0x1a, 0x72, 0x14, 0xa4, 0xff, 0x75, 0xa9,
	0xe6, 0xef, 0x04, 0x3e, 0x5e, 0x4f, 0x2a, 0x1f, 0x60, 0xea, 0xdb, 0xde, 0x42, 0x3e, 0xf1, 0x49,
	0xe0, 0xfa, 0xf8, 0x62, 0xe2, 0x07, 0x09, 0x4f, 0x90, 0x62, 0x69, 0xe0, 0x1a, 0x75, 0xe4, 0xd2,
	0x51, 0x6b, 0xec, 0x77, 0x84, 0x6c, 0xfe, 0x68, 0x9b, 0xf9, 0x1d, 0xee, 0xcd, 0x9f, 0xeb, 0x4d,
	0x9c, 0x1b, 0xf3, 0xdf, 0x58, 0xd8, 0x87, 0xb8, 0xb6, 0xcc, 0x0c, 0x33, 0xd7, 0x96, 0x21, 0x0c,
	0x95, 0xa7, 0x08, 0x43, 0xe7, 0x61, 0x31, 0x0c, 0x82, 0xa1, 0x14, 0x98, 0x2a, 0x14, 0x7b, 0x21,
	0x18, 0x3a, 0x08, 0xb5, 0x1f, 0x20, 0x49, 0x68, 0x7b, 0x53, 0xe6, 0x3c, 0x19, 0xbd, 0x78, 0x29,
	0xa7, 0x17, 0x1f, 0x5b, 0x4f, 0xe5, 0x82, 0xf5, 0xf4, 0xa9, 0xc1, 0x90, 0xe7, 0x2a, 0xf5, 0x79,
	0xa8, 0x25, 0x11, 0xbd, 0xb3, 0x36, 0x04, 0xbf, 0x24, 0xc2, 0xc7, 0xd5, 0xbb, 0x5d, 0xfb, 0x4d,
	0xa3, 0xc0, 0xeb, 0xca, 0x61, 0xa8, 0xe9, 0x4c, 0xb4, 0x94, 0x75, 0x26, 0x6a, 0xdf, 0x11, 0xf3,
	0x2a, 0xda, 0xe3, 0x5e, 0x0f, 0x5d, 0x42, 0xcc, 0x24, 0xa6, 0xa2, 0x52, 0xb9, 0x90, 0x4a, 0x09,
	0xb2, 0x78, 0xa2, 0x12, 0x96, 0xf7, 0x22, 0xf9, 0x2c, 0xd3, 0x8e, 0x20, 0xa4, 0x41, 0xd1, 0xc8,
	0xf0, 0x02, 0x31, 0xdb, 0xbc, 0x3d, 0xe7, 0xbb, 0x61, 0x21, 0xef, 0xbb, 0xc1, 0xbe, 0x87, 0xdb,
	0x81, 0x51, 0xed, 0x53, 0x76, 0xe3, 0x15, 0x5c, 0x6c, 0x62, 0xfe, 0x4f, 0xf5, 0x93, 0x21, 0x89,
	0xa7, 0xf1, 0x9e, 0xb2, 0xd6, 0x97, 0x71, 0x85, 0x22, 0x00, 0x03, 0x3a, 0xe9, 0x88, 0x4d, 0x25,
	0x33, 0x62, 0x53, 0x53, 0x63, 0xe1, 0x6d, 0x93, 0x7d, 0x05, 0xdb, 0xaa, 0x22, 0x22, 0xcd, 0x5a,
	0x3e, 0x6f, 0xe1, 0x00, 0xd1, 0xfc, 0x90, 0x6d, 0xce, 0xb8, 0xbd, 0x28, 0x8d, 0x05, 0x5d, 0xda,
	0xc4, 0x7d, 0x87, 0xec, 0xd8, 0xae, 0xe1, 0xad, 0x59, 0xf6, 0x16, 0xb0, 0x94, 0xbd, 0x05, 0xb4,
	0xdf, 0x87, 0x33, 0xe9, 0x8a, 0xd6, 0x0f, 0x53, 0xe6, 0x59, 0xda, 0xff, 0x61, 0x49, 0x64, 0x8d,
	0x0a, 0xb3, 0xce, 0x24, 0xed, 0xc7, 0xd0, 0xd4, 0xef, 0x66, 0xda, 0x32, 0x54, 0xc0, 0x82, 0x32,
	0x68, 0x2c, 0xf2, 0xe3, 0xec, 0x34, 0xa2, 0x8c, 0x5b, 0xe7, 0x8f, 0xb4, 0xaf, 0x31, 0x6d, 0xa1,
	0x2f, 0x7d, 0x75, 0x4c, 0x7a, 0xb3, 0xa4, 0xbc, 0x8e, 0xa1, 0xfd, 0xfe, 0x07, 0x66, 0xdb, 0xf5,
	0x8d, 0xa7, 0x7a, 0x15, 0x23, 0x9d, 0xcd, 0x9a, 0xb1, 0x74, 0x08, 0x84, 0xf7, 0x3a, 0xef, 0x22,
	0x89, 0xf7, 0x06, 0xc1, 0xe8, 0x7e, 0x12, 0x76, 0x06, 0x2c, 0xe2, 0x99, 0x1d, 0x52, 0xde, 0x66,
	0x49, 0x55, 0x7a, 0x59, 0xa9, 0xd2, 0xed, 0x5f, 0xc4, 0xcd, 0x38, 0x93, 0xed, 0x59, 0x86, 0x1a,
	0xb8, 0x82, 0x53, 0xe5, 0x56, 0x6a, 0xb6, 0x38, 0xcd, 0x6d, 0xa4, 0x90, 0x4f, 0xc4, 0x1a, 0x34,
	0xd0, 0x67, 0xb6, 0xc5, 0x86, 0xc5, 0x01, 0x67, 0x5d, 0xf3, 0x49, 0x40, 0x7a, 0x15, 0xee, 0x60,
	0x9a, 0x8e, 0xfb, 0xb0, 0x98, 0xc6, 0x7d, 0xb0, 0xce, 0x42, 0x05, 0xdf, 0x96, 0x25, 0xa1, 0xa7,
	0x1e, 0xe7, 0x8b, 0xef, 0xcf, 0x42, 0xcf, 0xde, 0x43, 0xf6, 0x97, 0x36, 0x02, 0x3d, 0xc3, 0x90,
	0x36, 0x39, 0x8c, 0x0d, 0xf3, 0xfd, 0x30, 0x9e, 0x70, 0x11, 0xa1, 0xe8, 0xbe, 0x60, 0x9c, 0xcc,
	0xff, 0x6a, 0x09, 0xf5, 0x3e, 0xb9, 0x52, 0xe7, 0x11, 0xe9, 0x4c, 0xcf, 0xea, 0xe5, 0x31, 0xcf,
	0xea, 0x6f, 0x6a, 0xd7, 0x22, 0xfa, 0xd6, 0x6f, 0x9c, 0x0c, 0xd2, 0xd5, 0x08, 0xce, 0x93, 0x3f,
	0x28, 0x41, 0x0b, 0x15, 0x50, 0x52, 0xf9, 0xf5, 0xa4, 0x2d, 0x7a, 0x3f, 0x5b, 0xa1, 0x71, 0xc1,
	0x56, 0xa0, 0x55, 0x33, 0x6b, 0x9e, 0x18, 0x29, 0x67, 0x61, 0x62, 0xa4, 0x9c, 0xab, 0x70, 0x32,
	0x33, 0x12, 0x91, 0x61, 0xbf, 0x93, 0x98, 0x61, 0xa5, 0xaa, 0x4e, 0x45, 0x00, 0xb0, 0x83, 0x03,
	0x91, 0x29, 0x1a, 0xcf, 0x34, 0xb3, 0x67, 0x6f, 0x16, 0xf5, 0x6c, 0x1a, 0x29, 0x7f, 0xa5, 0x04,
	0x67, 0x05, 0x9b, 0xea, 0x76, 0x0b, 0xa8, 0xf9, 0x53, 0x53, 0x28, 0x7e, 0x47, 0x34, 0x22, 0x9a,
	0xd0, 0x88, 0x99, 0x22, 0xe1, 0x16, 0x9c, 0x17, 0x9c, 0x1f, 0xe3, 0xa7, 0xcd, 0xd9, 0x0b, 0xfb,
	0x63, 0x91, 0x27, 0x9a, 0x9c, 0x67, 0x66, 0xa5, 0x7b, 0xf0, 0x92, 0xde, 0x0e, 0x0a, 0x0a, 0x70,
	0x24, 0x4d, 0x9e, 0x88, 0x82, 0xf6, 0x8e, 0x28, 0x34, 0x9a, 0x59, 0xe8, 0xcc, 0xc6, 0x5d, 0x46,
	0x19, 0x14, 0x0d, 0x40, 0xee, 0xa4, 0x17, 0xdf, 0x45, 0xc7, 0x0d, 0xfb, 0xbf, 0x2b, 0x09, 0xdc,
	0x68, 0x0c, 0x77, 0xe6, 0x54, 0xdb, 0x52, 0xbe, 0x75, 0xca, 0xa9, 0x37, 0xa7, 0x82, 0x82, 0x32,
	0xfe, 0x76, 0xf0, 0x91, 0x92, 0xd7, 0x43, 0x63, 0x26, 0x75, 0x75, 0x25, 0x00, 0x0e, 0xf3, 0x0f,
	0x5a, 0x77, 0xe7, 0xb3, 0xc1, 0x78, 0xc5, 0x7c, 0x5c, 0x31, 0xd9, 0x34, 0xc6, 0xfe, 0x90, 0x24,
	0xc0, 0xc4, 0x8b, 0xdd, 0x6b, 0x46, 0xe6, 0xd5, 0xb4, 0x6c, 0x73, 0x1b, 0x6a, 0xe8, 0x0a, 0x70,
	0x59, 0x70, 0x5c, 0x80, 0x66, 0xe6, 0xeb, 0xa1, 0xcb, 0x7b, 0xb3, 0xa9, 0x62, 0x3c, 0xda, 0x2a,
	0x4f, 0x0c, 0x14, 0xa9, 0x6f, 0x02, 0xff, 0x0a, 0x6d, 0x16, 0xf4, 0x90, 0x6f, 0x3e, 0xde, 0xf5,
	0x32, 0xac, 0xd0, 0x23, 0x77, 0x55, 0x81, 0x19, 0xb6, 0x50, 0x25, 0x15, 0x86, 0x21, 0x5b, 0x28,
	0x0a, 0x43, 0x66, 0xff, 0x27, 0x25, 0xb0, 0x74, 0x13, 0x30, 0xb8, 0xe1, 0x7c, 0xed, 0xf8, 0x0e,
	0xac, 0xb0, 0xd1, 0xc8, 0x53, 0x11, 0x94, 0x6a, 0x5b, 0xb6, 0x9c, 0x00, 0xb9, 0x92, 0x36, 0x8d,
	0x6f, 0x47, 0x65, 0x69, 0x7d, 0x1f, 0x6a, 0xcf, 0x2c, 0x9c, 0xa2, 0xfd, 0x06, 0x9d, 0x9d, 0xc4,
	0xb7, 0x7c, 0x12, 0x39, 0x2d, 0xd0, 0xa4, 0xfd, 0x7d, 0xe4, 0xc8, 0xb7, 0x99, 0xdf, 0xf5, 0xb8,
	0xd9, 0x88, 0xa9, 0xd1, 0x29, 0x4f, 0xc3, 0xf2, 0x90, 0xc7, 0x83, 0x20, 0xf5, 0x3c, 0x8d, 0x5f,
	0x52, 0x2a, 0x24, 0x3e, 0x32, 0x4f, 0xe5, 0x0f, 0x91, 0xdd, 0xee, 0x71, 0x16, 0x76, 0x06, 0x6a,
	0x66, 0x1d, 0xdf, 0x67, 0x71, 0xcc, 0x43, 0x5f, 0xbe, 0xc8, 0x0b, 0x3b, 0x83, 0xb6, 0xcf, 0x1f,
	0xc7, 0x52, 0xdc, 0x05, 0x02, 0xdd, 0xe3, 0x8f, 0xa5, 0x97, 0x55, 0xc4, 0x55, 0x9c, 0x43, 0x7e,
	0xda, 0xbf, 0x8b, 0x7c, 0x3c, 0x9a, 0x58, 0xf0, 0xec, 0x3d, 0xda, 0x8d, 0xda, 0x74, 0x9f, 0xca,
	0xbb, 0x4a, 0xed, 0xe2, 0x46, 0x3b, 0x12, 0x62, 0x5d, 0x84, 0x26, 0x1d, 0x5f, 0xb5, 0xe1, 0x1e,
	0x19, 0xe7, 0x50, 0x0c, 0xd7, 0x6b, 0xca, 0x42, 0xef, 0x1c, 0x54, 0xbb, 0xbc, 0x93, 0x09, 0xe8,
	0x5a, 0x21, 0x00, 0x4a, 0xc4, 0xc6, 0x19, 0x17, 0x67, 0xd9, 0xbc, 0xcb, 0xb1, 0x63, 0x46, 0x93,
	0xa2, 0xd7, 0x89, 0xb3, 0xfb, 0xb4, 0x09, 0xcb, 0xf2, 0x69, 0x63, 0x79, 0xcc, 0x43, 0x86, 0xf9,
	0xe0, 0x55, 0x62, 0xd9, 0xef, 0xe2, 0xbc, 0xc8, 0x51, 0x70, 0x2c, 0xfa, 0xdb, 0x98, 0xb4, 0xde,
	0x41, 0x56, 0x31, 0x9e, 0x6d, 0x66, 0xfb, 0x5e, 0x83, 0x65, 0xe2, 0x03, 0x53, 0x42, 0x9e, 0x4a,
	0x0c, 0xfb, 0x36, 0x80, 0xc3, 0xa3, 0xeb, 0xac, 0x3f, 0xdf, 0x21, 0xe0, 0x2c, 0x45, 0x45, 0xa0,
	0x72, 0x57, 0x64, 0x54, 0x04, 0x8c, 0x87, 0x60, 0x5f, 0x42, 0x69, 0xf6, 0xb3, 0x88, 0x8b, 0xc2,
	0xa6, 0x79, 0x56, 0xb3, 0xdb, 0xc8, 0x40, 0x3f, 0x1d, 0x71, 0xff, 0x2e, 0xf3, 0x13, 0xe6, 0xcd,
	0xf4, 0xc3, 0x56, 0x20, 0x46, 0x12, 0xc3, 0x17, 0x72, 0x92, 0x76, 0xcb, 0x5e, 0x21, 0xc0, 0x6e,
	0xd7, 0xde, 0xc2, 0x13, 0x12, 0xba, 0x20, 0x43, 0x7d, 0x13, 0x59, 0x58, 0x4d, 0x6f, 0x54, 0x17,
	0x8f, 0x17, 0x85, 0x79, 0x66, 0x52, 0x05, 0x3d, 0x72, 0x45, 0x89, 0x17, 0x47, 0xa6, 0x60, 0x94,
	0xba, 0x40, 0x73, 0x54, 0xb2, 0xfd, 0x1a, 0x9d, 0xf5, 0x82, 0xe1, 0x28, 0x88, 0xf8, 0xde, 0x80,
	0x4d, 0x71, 0xa1, 0x67, 0xff, 0xab, 0xa8, 0x90, 0x8c, 0x32, 0xb7, 0x3c, 0x33, 0x9b, 0x32, 0x16,
	0xe6, 0xb4, 0xfc, 0x64, 0x61, 0x4e, 0x17, 0xd2, 0x30, 0xa7, 0x68, 0x6f, 0xcc, 0x99, 0x5c, 0x3e,
	0x64, 0x20, 0x5c, 0x11, 0x00, 0x5c, 0x39, 0xf7, 0xf0, 0x64, 0x7e, 0x97, 0xb9, 0xde, 0x7c, 0x33,
	0xe7, 0x79, 0x58, 0x1a, 0x32, 0xd7, 0x53, 0x0d, 0x4a, 0x63, 0xa4, 0x12, 0x58, 0x6a, 0x04, 0xc4,
	0xb9, 0x7c, 0xaa, 0x33, 0x32, 0x39, 0xcd, 0x8c, 0x48, 0xaa, 0x13, 0x31, 0xaf, 0xe0, 0x34, 0x7b,
	0x90, 0x75, 0x46, 0x36, 0x11, 0xfb, 0x4b, 0xa9, 0xf6, 0x4a, 0x23, 0x73, 0xcc, 0xec, 0x52, 0x36,
	0x3c, 0x43, 0x79, 0xee, 0xf0, 0x0c, 0xf6, 0x3d, 0xa8, 0x3b, 0x3c, 0xc2, 0xc0, 0x09, 0xf3, 0xed,
	0x89, 0xe8, 0xb8, 0x3a, 0xf6, 0x32, 0x31, 0x9f, 0xab, 0xb1, 0xca, 0x6f, 0xbf, 0x84, 0xb4, 0xfb,
	0x2c, 0xe2, 0x0f, 0x54, 0x78, 0x2b, 0xb2, 0xfc, 0x2d, 0x19, 0x96, 0xbf, 0xf6, 0x4b, 0x48, 0xb8,
	0xeb, 0xc9, 0xb1, 0xe1, 0x89, 0x62, 0x4c, 0x68, 0xfb, 0x2e, 0xb2, 0x2a, 0x3a, 0xa7, 0x92, 0x66,
	0x97, 0x3c, 0x3f, 0xcf, 0xfb, 0x76, 0xe9, 0x5f, 0x29, 0x21, 0x19, 0xcd, 0xac, 0x9b, 0xb0, 0x24,
	0x0e, 0x8f, 0xca, 0x78, 0x76, 0x43, 0xee, 0xe6, 0x06, 0xca, 0x26, 0xfe, 0x3a, 0x84, 0x46, 0x8f,
	0x9a, 0x55, 0x9c, 0x91, 0xcc, 0xab, 0x1d, 0x0d, 0x26, 0x23, 0xba, 0x37, 0x61, 0xe9, 0xc9, 0x1a,
	0xf7, 0x09, 0xde, 0xf4, 0x67, 0x63, 0x1f, 0x4f, 0xf7, 0x3e, 0xb0, 0x01, 0x2b, 0x43, 0x42, 0x54,
	0xdb, 0xa2, 0xfc, 0xb4, 0xb7, 0x48, 0x19, 0x8b, 0x0a, 0xe8, 0x18, 0xb5, 0xb1, 0xb8, 0x0c, 0xce,
	0x41, 0x15, 0x03, 0x49, 0x18, 0x3b, 0x4e, 0x45, 0x00, 0x70, 0x98, 0xfe, 0x01, 0x49, 0xc4, 0x63,
	0x99, 0x66, 0x0e, 0xff, 0x75, 0x31, 0x69, 0xe3, 0xce, 0x40, 0xcf, 0xb2, 0x4b, 0x8a, 0x88, 0xb9,
	0xa2, 0x36, 0xf3, 0x00, 0x47, 0x65, 0x6c, 0xdd, 0x87, 0xb5, 0xb1, 0x8a, 0x8d, 0xb0, 0x17, 0xa5,
	0x4c, 0xd8, 0x8b, 0x97, 0xa0, 0xa1, 0x02, 0x21, 0x98, 0x23, 0xa0, 0xa2, 0x23, 0x90, 0x80, 0xf7,
	0x5d, 0x24, 0x81, 0x93, 0xbf, 0x88, 0x7e, 0x15, 0x56, 0x4d, 0xd6, 0x92, 0x16, 0xde, 0x34, 0xc1,
	0xbb, 0x5d, 0x52, 0x25, 0x44, 0x69, 0x74, 0xe3, 0xf9, 0x68, 0x91, 0x0d, 0x7e, 0x5c, 0xce, 0x07,
	0x3f, 0xfe, 0xb3, 0x12, 0xae, 0x2d, 0x1d, 0xfd, 0x64, 0x76, 0x81, 0x6f, 0x15, 0xac, 0xe2, 0xe9,
	0x41, 0x91, 0x5f, 0x83, 0x75, 0xd1, 0x84, 0xf1, 0x38, 0xc7, 0xe8, 0x2d, 0x3a, 0xca, 0xbc, 0xdb,
	0x9d, 0x14, 0x40, 0x79, 0x71, 0xee, 0x00, 0xca, 0x4b, 0x05, 0x01, 0x94, 0x37, 0x25, 0xe9, 0x11,
	0x94, 0xf6, 0xf5, 0x0c, 0xac, 0x60, 0x15, 0xe9, 0x78, 0x8a, 0xcf, 0xdd, 0xae, 0xfd, 0xd7, 0x68,
	0xe6, 0x8d, 0x65, 0x98, 0xe3, 0xd4, 0x51, 0x51, 0x1d, 0x37, 0x8f, 0x45, 0x19, 0xd2, 0x68, 0x8c,
	0xf9, 0x82, 0x3f, 0xbf, 0x8c, 0xc2, 0xda, 0x67, 0x11, 0xbf, 0xe5, 0xf6, 0xe2, 0x6d, 0x69, 0x23,
	0x93, 0xbf, 0xd0, 0xb5, 0x7f, 0x1e, 0xf9, 0x88, 0x89, 0x35, 0xdf, 0x2e, 0x2c, 0x36, 0xed, 0x49,
	0x3e, 0x23, 0x55, 0xb2, 0xcd, 0xa4, 0x40, 0xe6, 0x77, 0xb3, 0xcc, 0x60, 0xaa, 0xa0, 0xfe, 0x64,
	0x91, 0xcf, 0x49, 0x7c, 0x57, 0xae, 0x3d, 0x14, 0x6f, 0x98, 0xac, 0xdd, 0xfb, 0x73, 0xda, 0xec,
	0x33, 0x19, 0xe6, 0x18, 0x1d, 0x0b, 0x23, 0x20, 0x90, 0x72, 0x24, 0xe2, 0x9d, 0x80, 0x4e, 0x6f,
	0x68, 0x86, 0x27, 0x52, 0x50, 0x81, 0xbd, 0x47, 0x70, 0xeb, 0x0d, 0xa8, 0x7a, 0x2e, 0xfa, 0x38,
	0xd7, 0x2a, 0xc1, 0x8c, 0xbf, 0x93, 0xdb, 0x9c, 0x75, 0x9d, 0x8a, 0xa7, 0x3c, 0x91, 0x6c, 0x41,
	0x45, 0x3a, 0x2a, 0x89, 0x4c, 0x4f, 0x70, 0xe3, 0x4e, 0x50, 0x1c, 0x8d, 0x27, 0xd6, 0xbe, 0x1f,
	0x1c, 0xb5, 0x87, 0xae, 0xe7, 0xb9, 0xd4, 0x1c, 0xf5, 0x5a, 0xc8, 0x0f, 0x8e, 0xee, 0xa6, 0x50,
	0xfb, 0x17, 0xd1, 0x06, 0x41, 0x95, 0x75, 0x47, 0x34, 0x55, 0xfa, 0x64, 0x99, 0x1a, 0x3a, 0xe7,
	0x15, 0xc0, 0x27, 0xe0, 0x6d, 0xc3, 0xe7, 0x8a, 0x72, 0x05, 0xcc, 0x22, 0x55, 0xc4, 0x6e, 0xd7,
	0xfe, 0x5f, 0x4b, 0x68, 0x97, 0x50, 0x54, 0xfe, 0x3c, 0x0c, 0x06, 0xc9, 0x64, 0xda, 0xc7, 0x22,
	0xe1, 0xc8, 0xb9, 0xc9, 0x4f, 0x92, 0x2c, 0xd6, 0x7b, 0x70, 0x46, 0x75, 0x0d, 0x8f, 0xd8, 0x46,
	0x06, 0xb2, 0x9c, 0x3f, 0x25, 0x93, 0x6f, 0xfa, 0x5d, 0x93, 0x9c, 0xd9, 0xd9, 0x86, 0x32, 0xc5,
	0x39, 0xa8, 0xf6, 0x5c, 0x2f, 0xe6, 0xe6, 0x15, 0x02, 0x01, 0x76, 0xbb, 0x36, 0xcb, 0x4c, 0xb6,
	0xf9, 0x64, 0x10, 0x35, 0x7d, 0x0c, 0xfd, 0xdf, 0x84, 0xe9, 0x83, 0x9b, 0xdd, 0xe7, 0xd2, 0x94,
	0x6f, 0x68, 0xbe, 0x7e, 0x9f, 0x59, 0x09, 0xbe, 0xc4, 0x25, 0x87, 0x2e, 0xcc, 0xf3, 0x82, 0x23,
	0xb5, 0xf1, 0x48, 0xe0, 0x35, 0x01, 0xb3, 0xbf, 0x8b, 0xe2, 0xbd, 0x14, 0x52, 0xb2, 0x15, 0x8c,
	0xe5, 0x2f, 0x15, 0xe4, 0xa7, 0xbd, 0x7b, 0x87, 0xc7, 0x9d, 0x81, 0xcc, 0xae, 0x28, 0x36, 0xf9,
	0x78, 0xfd, 0xfb, 0xc4, 0x41, 0xc7, 0x32, 0x3d, 0x93, 0x1e, 0x89, 0x79, 0x9d, 0xfa, 0xb1, 0x31,
	0x9f, 0xa8, 0x34, 0xb4, 0x33, 0x1b, 0xac, 0xed, 0x02, 0xd4, 0xa5, 0x6f, 0x04, 0xd6, 0x4d, 0x0f,
	0xc2, 0x40, 0x6e, 0x11, 0x58, 0x77, 0x57, 0x2d, 0x2c, 0xb3, 0x99, 0xdb, 0xd2, 0xcd, 0xcc, 0x54,
	0xe6, 0x56, 0xd0, 0x80, 0x72, 0x41, 0x03, 0xec, 0x1e, 0xae, 0xab, 0xa2, 0xe2, 0x67, 0x12, 0xe2,
	0x75, 0xa8, 0xc8, 0xb2, 0xd4, 0x2e, 0xbb, 0x8a, 0xf6, 0x03, 0xa9, 0x3b, 0x1f, 0x47, 0x23, 0xd8,
	0xb7, 0x71, 0x42, 0xdf, 0xe1, 0xec, 0x50, 0x8d, 0xf0, 0xf4, 0xf6, 0x4f, 0xf4, 0xae, 0x63, 0xdf,
	0x47, 0xa1, 0x8f, 0xce, 0x0b, 0x73, 0x15, 0x85, 0x2e, 0xd6, 0x04, 0xb6, 0x49, 0x06, 0x20, 0x10,
	0xd2, 0xe0, 0x4d, 0x43, 0x46, 0x16, 0x54, 0x57, 0xa5, 0x9e, 0x11, 0xfb, 0x0f, 0xeb, 0x9a, 0x97,
	0x98, 0x34, 0x26, 0x1f, 0x61, 0x13, 0xb2, 0xee, 0x81, 0x2e, 0xc3, 0xb2, 0x7c, 0x0c, 0x5a, 0x4a,
	0xaf, 0x89, 0x32, 0x28, 0x8e, 0x44, 0xa0, 0x1b, 0xc5, 0x88, 0xfc, 0x52, 0x28, 0x9b, 0xf5, 0x08,
	0xbf, 0x32, 0x1e, 0xd3, 0x23, 0x8d, 0x60, 0x7f, 0x08, 0x2d, 0x87, 0x3f, 0x52, 0x56, 0x11, 0x59,
	0xf7, 0x37, 0xa4, 0x4d, 0x1f, 0x70, 0xef, 0x90, 0x47, 0xa6, 0xcf, 0x2a, 0x82, 0xec, 0x76, 0xed,
	0x21, 0x5e, 0x81, 0x4c, 0xca, 0x3c, 0x87, 0x72, 0x44, 0xc8, 0x03, 0x88, 0x6c, 0x2a, 0x2a, 0xb3,
	0xe5, 0x38, 0x1a, 0xc7, 0xfe, 0xed, 0x12, 0x9c, 0xd2, 0x37, 0xda, 0x12, 0xeb, 0xd3, 0xb0, 0xcb,
	0xc3, 0x4c, 0xd8, 0xfd, 0x52, 0x26, 0xec, 0xbe, 0x75, 0x19, 0xd6, 0x94, 0x53, 0x86, 0x9c, 0x37,
	0x06, 0xe5, 0xad, 0x43, 0x7b, 0x86, 0x78, 0x01, 0x6a, 0xd2, 0xce, 0xc4, 0xb8, 0x76, 0x02, 0x02,
	0x3d, 0x18, 0xb7, 0x2d, 0x5f, 0xcc, 0x6b, 0x61, 0xf6, 0x44, 0xf3, 0xa2, 0x82, 0xe6, 0xcd, 0xa1,
	0x2b, 0xa9, 0x04, 0x02, 0x53, 0xed, 0x52, 0x55, 0x67, 0x05, 0xbf, 0x77, 0xbb, 0xf6, 0x3f, 0x83,
	0x1c, 0x6c, 0x2f, 0xf0, 0x0e, 0xf9, 0xad, 0x20, 0xe8, 0x7b, 0xfc, 0xbe, 0xc7, 0x8e, 0xa9, 0xd8,
	0x4d, 0x38, 0xe1, 0xfa, 0x6c, 0x34, 0x6a, 0x8f, 0xe4, 0x95, 0x63, 0x5b, 0x87, 0x65, 0xaf, 0x3a,
	0xeb, 0x98, 0xa4, 0x2e, 0x23, 0xf1, 0x56, 0xf5, 0x2d, 0x38, 0x49, 0xf8, 0x78, 0x63, 0x97, 0x86,
	0x61, 0x25, 0x79, 0xc4, 0xc2, 0x34, 0x81, 0xb8, 0xa7, 0x52, 0xec, 0x77, 0xc9, 0x8e, 0x10, 0xed,
	0x48, 0xf2, 0xb5, 0x9b, 0x6d, 0x2e, 0x65, 0xdb, 0xfc, 0x9b, 0x78, 0x37, 0x26, 0x07, 0x8a, 0x3c,
	0x7b, 0xdc, 0x63, 0xb1, 0x7b, 0xc8, 0x67, 0x8e, 0x56, 0x6e, 0x08, 0xca, 0x33, 0x86, 0x60, 0xa1,
	0x48, 0x4b, 0xab, 0x92, 0x47, 0x2a, 0xb0, 0xbd, 0x4a, 0x1e, 0xd9, 0x7f, 0x99, 0xee, 0xec, 0x26,
	0xb4, 0x6b, 0x1e, 0x06, 0xfd, 0x28, 0x44, 0xcd, 0xe2, 0x7e, 0xd2, 0xeb, 0x71, 0x6d, 0x46, 0x42,
	0xc0, 0xeb, 0x08, 0xcb, 0xd0, 0x65, 0x21, 0x4b, 0x97, 0x7f, 0x01, 0x2f, 0xd5, 0x33, 0x74, 0xb9,
	0x36, 0x1a, 0xfd, 0xd3, 0x26, 0xca, 0x9f, 0x97, 0x51, 0x9f, 0x55, 0xd8, 0xaa, 0x99, 0x24, 0x61,
	0x70, 0xaa, 0xc3, 0x3c, 0xaf, 0x4d, 0x1e, 0x60, 0xda, 0x38, 0x1b, 0xf1, 0xa5, 0x0e, 0x1d, 0x01,
	0x36, 0xd5, 0xe9, 0xb3, 0xa0, 0xf0, 0xcd, 0x6d, 0xe6, 0x79, 0x1a, 0x44, 0x6f, 0x76, 0xac, 0xce,
	0x18, 0xac, 0xf5, 0x0f, 0x4a, 0x60, 0x8d, 0xa3, 0x8a, 0x83, 0x3b, 0x1b, 0x8d, 0xf4, 0xe4, 0xa3,
	0x0f, 0x71, 0x48, 0x1f, 0xb1, 0x30, 0xf6, 0x79, 0xa8, 0x97, 0x52, 0x0a, 0x40, 0x7b, 0xcc, 0x90,
	0x8f, 0xd8, 0x71, 0x1a, 0xcd, 0x42, 0x7d, 0x93, 0x5e, 0xbb, 0x73, 0x20, 0x0e, 0xf0, 0x8b, 0x4a,
	0xaf, 0x8d, 0x9f, 0x68, 0x03, 0x14, 0xf8, 0x1d, 0x1e, 0xc5, 0xa1, 0xbc, 0xe3, 0xd6, 0xdf, 0x59,
	0xa5, 0x00, 0x99, 0xa5, 0x19, 0x4a, 0x01, 0x0b, 0x16, 0xc5, 0x32, 0x43, 0x23, 0xe3, 0xaa, 0x83,
	0xff, 0xed, 0xbf, 0x57, 0xc2, 0x4d, 0x81, 0x28, 0x42, 0x4e, 0x66, 0x7e, 0xe2, 0x33, 0xe0, 0x35,
	0x58, 0x27, 0x5f, 0x3b, 0xed, 0x38, 0x64, 0x5d, 0xde, 0x36, 0x1e, 0xe7, 0xae, 0x52, 0xc2, 0x03,
	0x01, 0x57, 0x45, 0x85, 0x3c, 0x4e, 0x42, 0xdf, 0xb8, 0xd3, 0xaf, 0x12, 0xe4, 0xb3, 0xd0, 0xb3,
	0x1f, 0xa2, 0xaa, 0x79, 0xbc, 0xf5, 0x73, 0x59, 0xc9, 0x53, 0x1b, 0x44, 0xb9, 0x72, 0x68, 0x08,
	0x22, 0xca, 0x4d, 0x0c, 0x93, 0x65, 0x2a, 0x77, 0xaf, 0xc3, 0xfc, 0x9f, 0x34, 0x65, 0xec, 0x7f,
	0xb1, 0x24, 0xea, 0x8d, 0x8a, 0xeb, 0xfd, 0x49, 0x33, 0x04, 0x21, 0x07, 0x3c, 0x0a, 0xc9, 0x63,
	0x1c, 0x8d, 0xc6, 0xf2, 0xa3, 0x50, 0x9c, 0x60, 0xed, 0xd8, 0x60, 0x14, 0xd4, 0xaa, 0x9f, 0x02,
	0xa3, 0xb0, 0x3f, 0x37, 0x18, 0x41, 0xae, 0xd6, 0xa7, 0x1d, 0xde, 0xff, 0xc0, 0xdc, 0x12, 0x3e,
	0xb9, 0x4f, 0x6e, 0x96, 0xb6, 0x59, 0xd8, 0xfd, 0x69, 0x70, 0x3f, 0x63, 0x3e, 0x2f, 0xe6, 0xe6,
	0xf3, 0x98, 0xa9, 0xeb, 0xd2, 0xb8, 0x09, 0xf1, 0xcf, 0x19, 0xbb, 0xc6, 0x78, 0xd3, 0x9f, 0x66,
	0x73, 0xff, 0xf7, 0xf0, 0xf0, 0xa9, 0xa9, 0x72, 0x9f, 0x1d, 0x8f, 0x98, 0xf7, 0x0d, 0xa0, 0xc8,
	0x03, 0x94, 0xed, 0x8b, 0x9a, 0xfd, 0x34, 0xd4, 0xf8, 0xbb, 0x78, 0x0d, 0xac, 0xa9, 0x71, 0x2d,
	0xf9, 0x06, 0x50, 0xe2, 0x3e, 0xde, 0x5c, 0xe7, 0x9b, 0xfc, 0x0c, 0xe7, 0xc4, 0x8d, 0xa0, 0x13,
	0x0c, 0x83, 0x6f, 0xdc, 0x9c, 0x30, 0x9b, 0xfd, 0x34, 0xd4, 0xf8, 0xf7, 0x4b, 0xc6, 0xbe, 0xf0,
	0xc9, 0xfd, 0x1f, 0xf2, 0xfd, 0xbb, 0x81, 0xcf, 0x8f, 0xbf, 0x01, 0xf4, 0x78, 0x68, 0x6c, 0x2c,
	0xf9, 0x86, 0x3f, 0x43, 0x8a, 0xec, 0x05, 0xbd, 0x78, 0x9f, 0xf9, 0x07, 0xdf, 0x38, 0x8a, 0x64,
	0x1b, 0xfe, 0xcc, 0x56, 0xcc, 0xcd, 0x7b, 0xdf, 0x48, 0x2e, 0x9a, 0x6d, 0xf6, 0xd3, 0x50, 0xe3,
	0xdf, 0x29, 0xd1, 0x7d, 0x93, 0x2c, 0xf6, 0x93, 0xed, 0xeb, 0xdf, 0x00, 0x52, 0xfc, 0x80, 0xae,
	0xbb, 0xf2, 0x6d, 0x7e, 0x1a, 0x3a, 0x64, 0x24, 0x8e, 0x9b, 0xf7, 0xee, 0xb2, 0x28, 0xe6, 0xe1,
	0x37, 0x50, 0xe2, 0x18, 0x6f, 0xfa, 0xd3, 0x50, 0xe5, 0x0f, 0xcd, 0xd3, 0xc7, 0xcd, 0x7b, 0x0f,
	0xdd, 0x88, 0x7d, 0x03, 0xe8, 0xe1, 0x18, 0x87, 0x0e, 0xb3, 0xd1, 0xcf, 0x90, 0x6b, 0xfc, 0x94,
	0x4e, 0x62, 0xcf, 0x9a, 0x6b, 0x3c, 0xd1, 0x11, 0x6c, 0x0a, 0x35, 0x7e, 0x84, 0x2f, 0x19, 0xd0,
	0xcf, 0xe5, 0x80, 0x47, 0xf1, 0x34, 0x47, 0x9d, 0x13, 0x9d, 0x6b, 0x27, 0x11, 0x6f, 0xc7, 0xe8,
	0x48, 0x58, 0x3d, 0x08, 0x4b, 0x22, 0x4e, 0x9e, 0x85, 0xed, 0x5f, 0xa1, 0xcb, 0xd6, 0xb4, 0x82,
	0x67, 0x67, 0x29, 0x53, 0xe8, 0xbd, 0x73, 0xa1, 0xc8, 0x7b, 0xa7, 0xbd, 0x83, 0xac, 0xf1, 0x7a,
	0x72, 0xbc, 0x13, 0x06, 0x43, 0x6c, 0x07, 0x7a, 0x80, 0x9e, 0x32, 0xde, 0xc5, 0x2e, 0xa8, 0x0e,
	0x91, 0x5d, 0x8d, 0x95, 0x33, 0xcf, 0x00, 0x68, 0xaa, 0x96, 0xb3, 0x54, 0x9d, 0xcb, 0xb1, 0xe8,
	0x0f, 0x51, 0xda, 0xc4, 0x4b, 0xd9, 0x3d, 0xb7, 0xef, 0xef, 0xce, 0x79, 0x11, 0x7e, 0x01, 0xea,
	0x91, 0xdb, 0xf7, 0xdb, 0xae, 0xdf, 0xee, 0xb2, 0x63, 0x75, 0xed, 0x07, 0x11, 0x16, 0x71, 0x83,
	0x1d, 0x47, 0xf6, 0x7b, 0x48, 0x98, 0x1b, 0x81, 0xf2, 0x68, 0x45, 0xa5, 0xe7, 0x3d, 0x69, 0x95,
	0xf3, 0x9e, 0xb4, 0xec, 0x7f, 0x48, 0x77, 0x1d, 0x05, 0x19, 0x67, 0x9b, 0x6e, 0xaa, 0x1b, 0xd8,
	0xac, 0xe9, 0x66, 0xbe, 0x28, 0x79, 0x2b, 0x8b, 0x56, 0xf0, 0x2a, 0x8b, 0x65, 0x43, 0x43, 0x75,
	0xc8, 0x24, 0x56, 0x8d, 0x7a, 0xa4, 0x1c, 0x27, 0x41, 0x9a, 0x35, 0xef, 0x79, 0xbe, 0x34, 0xe6,
	0x79, 0xbe, 0x78, 0xa0, 0xff, 0x0f, 0x0c, 0x1f, 0x19, 0xe5, 0xdf, 0x90, 0xcc, 0xbc, 0xff, 0x02,
	0xed, 0x5c, 0x2f, 0xe3, 0xc6, 0x3a, 0xf5, 0xbe, 0x67, 0x20, 0xe0, 0x9b, 0x88, 0x03, 0xd7, 0x57,
	0xe6, 0x8c, 0xf4, 0x61, 0xbd, 0x06, 0xeb, 0x43, 0x26, 0x3a, 0xa8, 0x10, 0x53, 0x9d, 0xf3, 0xaa,
	0x48, 0x48, 0xdb, 0x84, 0x77, 0x32, 0x11, 0xf7, 0xbb, 0xed, 0xbe, 0xab, 0x83, 0xdc, 0xd3, 0xad,
	0x61, 0x43, 0x80, 0xe9, 0x5e, 0x5c, 0x7a, 0xc2, 0x4a, 0xf1, 0xe8, 0xd5, 0xc0, 0x72, 0x16, 0x8f,
	0x1e, 0x0c, 0x7c, 0x48, 0xac, 0x11, 0x6d, 0xc0, 0xef, 0x9a, 0x75, 0xa1, 0xdb, 0x4e, 0xb3, 0x41,
	0xf2, 0x0d, 0x59, 0x27, 0x6d, 0x8c, 0xfd, 0xa9, 0x91, 0x59, 0x67, 0xdc, 0x3b, 0x70, 0xfd, 0x39,
	0x32, 0x6b, 0xef, 0xf2, 0xe5, 0xd4, 0xbb, 0xbc, 0x3d, 0x28, 0x2a, 0xf0, 0xa1, 0xcb, 0x8f, 0xe6,
	0x2d, 0xd0, 0x0b, 0x52, 0x17, 0x59, 0x39, 0x4f, 0xf2, 0x0b, 0x19, 0x3b, 0xba, 0x3f, 0xa0, 0x3d,
	0x61, 0x4f, 0x12, 0xe3, 0x41, 0xf0, 0x24, 0x1d, 0xb7, 0xde, 0x85, 0x25, 0x41, 0x58, 0x35, 0xe2,
	0x2f, 0xd0, 0x8c, 0x2e, 0x2a, 0x6d, 0x53, 0x7c, 0x3b, 0x84, 0xdd, 0x7a, 0x17, 0x16, 0xc5, 0xe7,
	0x93, 0x06, 0xc8, 0x65, 0xb8, 0x0f, 0x14, 0x35, 0x75, 0xe6, 0xfc, 0x9c, 0x33, 0x36, 0x80, 0x3d,
	0x42, 0x63, 0xb1, 0x3d, 0xee, 0x91, 0xdd, 0xe5, 0x6b, 0xb0, 0x14, 0x71, 0xcf, 0x53, 0xe6, 0x59,
	0x27, 0x75, 0xff, 0x28, 0x5d, 0x5a, 0xd9, 0x23, 0x4a, 0x6b, 0x9e, 0x98, 0xb9, 0x05, 0x9d, 0xfa,
	0x0d, 0x32, 0x46, 0xdf, 0x0e, 0x86, 0xc3, 0xc0, 0xc7, 0x21, 0x9e, 0xc3, 0xb2, 0x61, 0x49, 0x0c,
	0x6a, 0xc6, 0xc2, 0x36, 0x53, 0xc4, 0x26, 0x5a, 0x74, 0x10, 0x52, 0xeb, 0x2d, 0x58, 0xc4, 0xe8,
	0xb4, 0x45, 0x01, 0x06, 0x8a, 0x4d, 0xc1, 0x3e, 0x26, 0x71, 0x5a, 0xbe, 0x87, 0xd0, 0xed, 0x9a,
	0xbf, 0x80, 0xf7, 0xb1, 0x00, 0x19, 0x0a, 0xe1, 0x89, 0x56, 0x52, 0x07, 0x99, 0xeb, 0x58, 0xce,
	0x39, 0xee, 0x4f, 0x0d, 0xe7, 0x9f, 0xe5, 0xe9, 0xce, 0x3f, 0xed, 0x4b, 0xb8, 0xf3, 0xdf, 0xba,
	0x2b, 0xfa, 0xc6, 0x7c, 0x79, 0x3f, 0x8a, 0x7f, 0xd5, 0xb5, 0x8e, 0xfc, 0xb4, 0x3f, 0xa7, 0xe7,
	0xa9, 0xca, 0x99, 0xff, 0x1c, 0xef, 0xdb, 0xaa, 0xd1, 0x20, 0x18, 0x91, 0x47, 0x13, 0xe3, 0x45,
	0xa9, 0x2a, 0xc1, 0xa9, 0x44, 0xf2, 0x9f, 0xfd, 0x37, 0x4a, 0xe4, 0x41, 0x83, 0x76, 0xd4, 0xaf,
	0xb5, 0x29, 0x5b, 0xef, 0x41, 0x73, 0xdf, 0xf5, 0xbc, 0x76, 0x34, 0x08, 0xc2, 0xb8, 0xdd, 0x49,
	0xd4, 0x2b, 0x2e, 0x1d, 0xb5, 0x43, 0x85, 0x0b, 0x71, 0xea, 0xfb, 0xea, 0x6b, 0x3b, 0xc9, 0x87,
	0x05, 0x59, 0xcc, 0x87, 0x05, 0x21, 0xf3, 0x22, 0xb3, 0x65, 0x4f, 0x62, 0x5e, 0x54, 0x9e, 0x6e,
	0x5e, 0xf4, 0x3d, 0x65, 0x69, 0x29, 0x0a, 0xff, 0xe2, 0xf6, 0xfd, 0x27, 0x17, 0x45, 0xde, 0x42,
	0xd3, 0xd5, 0xfb, 0xec, 0xd8, 0x88, 0xe3, 0x80, 0xb7, 0xd6, 0xf8, 0xcf, 0xbc, 0xb5, 0xa6, 0x10,
	0x0f, 0xd2, 0xf1, 0x44, 0x94, 0xcb, 0x31, 0x8f, 0x75, 0xbe, 0xb9, 0x81, 0x96, 0xe7, 0x08, 0xdd,
	0xb2, 0x50, 0x1c, 0xba, 0x65, 0x3d, 0x35, 0x2f, 0x53, 0x21, 0x38, 0xe6, 0xd0, 0x2e, 0x63, 0xe0,
	0x88, 0x72, 0x71, 0xe0, 0x08, 0xfb, 0x33, 0x94, 0x8b, 0xf2, 0x91, 0x2c, 0x3e, 0x86, 0x75, 0x8a,
	0xbf, 0xa6, 0x68, 0x21, 0xe6, 0x61, 0x29, 0x75, 0x8e, 0x97, 0xc3, 0x77, 0x28, 0xe4, 0x5b, 0x0a,
	0xb0, 0x3f, 0xc4, 0x95, 0xab, 0xbc, 0x96, 0x6e, 0x4b, 0x17, 0x02, 0x73, 0x86, 0x18, 0xd9, 0xc6,
	0x8e, 0xe6, 0x62, 0x44, 0x6c, 0x42, 0x45, 0xc6, 0x86, 0x88, 0xcc, 0x58, 0x59, 0x59, 0x2c, 0x47,
	0xe3, 0xd8, 0x1c, 0x3b, 0x96, 0x8d, 0x0e, 0x30, 0xdf, 0xcd, 0xba, 0xae, 0xc6, 0xb8, 0x59, 0xcf,
	0x96, 0x63, 0x54, 0x73, 0x1b, 0x55, 0x4a, 0x64, 0xa7, 0x90, 0xaf, 0xec, 0x0a, 0xac, 0xa8, 0x70,
	0x16, 0x46, 0x8b, 0x73, 0x45, 0x29, 0x14, 0xfb, 0x7d, 0x39, 0x12, 0x5d, 0xf5, 0x82, 0x3e, 0x13,
	0x28, 0x64, 0x18, 0x64, 0x42, 0xb7, 0x63, 0xa0, 0x90, 0xbb, 0x01, 0xbd, 0xbf, 0x7b, 0x0c, 0x2b,
	0x22, 0xa7, 0x1b, 0x75, 0xe6, 0xf1, 0x22, 0x90, 0x5a, 0xf8, 0x66, 0x4c, 0x50, 0x34, 0x14, 0x6d,
	0x60, 0x2e, 0xc2, 0x32, 0x7a, 0xf8, 0x57, 0x2e, 0x11, 0x91, 0x09, 0xea, 0x80, 0x00, 0x8e, 0x4c,
	0xb4, 0xb7, 0x50, 0xed, 0x4c, 0xef, 0xb0, 0xf5, 0xdd, 0xb7, 0x75, 0x1e, 0xaa, 0xe9, 0x15, 0x39,
	0x71, 0xc2, 0x14, 0x60, 0xf7, 0x71, 0x9f, 0xda, 0xbd, 0x21, 0x4e, 0xe5, 0xf3, 0x71, 0x43, 0x8a,
	0xbd, 0xc6, 0x92, 0x38, 0x7d, 0xdc, 0x52, 0x71, 0xa3, 0x6b, 0xf8, 0xad, 0x43, 0xda, 0x49, 0x6f,
	0x8a, 0x55, 0x47, 0x7d, 0xda, 0x9f, 0xc8, 0xdd, 0x03, 0x83, 0xb6, 0xa7, 0xd5, 0xb5, 0xa0, 0xd2,
	0x4b, 0x3c, 0xcf, 0xf4, 0x4b, 0xa0, 0xbe, 0xc5, 0x9e, 0xdb, 0x61, 0x61, 0xb7, 0xed, 0xab, 0x18,
	0x26, 0xcb, 0xe2, 0xf3, 0x5e, 0x60, 0xff, 0x3c, 0x9e, 0xc1, 0x1e, 0xba, 0x23, 0xe9, 0x47, 0x76,
	0x8e, 0xe7, 0x21, 0xeb, 0xd2, 0x1b, 0xed, 0xa1, 0x3b, 0xa2, 0x48, 0x8e, 0x91, 0x24, 0xf5, 0x2a,
	0x25, 0x3c, 0x74, 0x47, 0xf8, 0xe2, 0x2d, 0xb2, 0xdf, 0x44, 0xd3, 0x95, 0x5b, 0xcc, 0xf5, 0xd3,
	0x0a, 0xce, 0x41, 0x55, 0x67, 0x54, 0x7c, 0xe8, 0x50, 0xe6, 0xb0, 0xbf, 0x0f, 0xcf, 0x69, 0xfb,
	0xa3, 0xbc, 0x87, 0xe4, 0x27, 0x7d, 0x2b, 0x6c, 0xff, 0x51, 0x49, 0x94, 0x16, 0x4d, 0x29, 0x6d,
	0x66, 0x67, 0xdf, 0x25, 0x27, 0x1c, 0x3c, 0xd2, 0xb2, 0xc4, 0xd9, 0x42, 0xef, 0xcd, 0xd7, 0x59,
	0xc4, 0x1d, 0x8d, 0x6a, 0x5d, 0x87, 0xd5, 0x5e, 0xe0, 0x79, 0xc1, 0x51, 0x5b, 0xe7, 0x5e, 0x98,
	0x95, 0xbb, 0x49, 0x39, 0x24, 0x48, 0x6c, 0x03, 0x2f, 0x4d, 0x24, 0x05, 0x45, 0x45, 0xc0, 0x41,
	0x3f, 0x0b, 0x95, 0x24, 0xfb, 0x46, 0x69, 0x45, 0xbd, 0xd6, 0xfd, 0xe7, 0x4a, 0xf8, 0x6c, 0x73,
	0x66, 0x11, 0x73, 0x1c, 0xcc, 0x6a, 0x1c, 0xd1, 0x4d, 0xeb, 0xbd, 0x73, 0x85, 0x5d, 0xa1, 0x62,
	0x31, 0x8c, 0x93, 0x7c, 0x3a, 0x68, 0xbf, 0x8f, 0x4f, 0xcb, 0x6e, 0xfa, 0x31, 0x0f, 0xc7, 0xd0,
	0xa7, 0x86, 0x0b, 0xb0, 0xff, 0x8c, 0x1e, 0x8f, 0x4d, 0xc8, 0x3a, 0x4f, 0xb3, 0xa5, 0xc7, 0x00,
	0x43, 0xda, 0x28, 0x6e, 0x36, 0xbd, 0x63, 0x56, 0x0e, 0x03, 0x90, 0x2a, 0x3b, 0x64, 0xc4, 0xce,
	0xc3, 0x76, 0x88, 0xfe, 0xf3, 0xa5, 0xcd, 0x6b, 0xb1, 0xf7, 0x6e, 0xd3, 0xd1, 0xbe, 0x23, 0x3d,
	0x6a, 0x48, 0xb7, 0xfb, 0xf2, 0x09, 0x1b, 0x0e, 0xae, 0x0e, 0x33, 0x09, 0x6e, 0xb4, 0x23, 0x21,
	0xf6, 0xf5, 0x29, 0x03, 0x4d, 0x61, 0x18, 0x95, 0xfd, 0xef, 0x64, 0x4a, 0x1d, 0x4c, 0x19, 0x69,
	0xa3, 0x8c, 0x79, 0x2e, 0xaf, 0x29, 0x12, 0x64, 0xdb, 0x78, 0x02, 0xd6, 0x70, 0xea, 0x04, 0xa4,
	0x5e, 0xda, 0x37, 0xe1, 0xe5, 0x89, 0x0d, 0xbe, 0x7e, 0xbc, 0xad, 0xc3, 0x39, 0x64, 0xa3, 0x3d,
	0x94, 0x72, 0xd1, 0x1e, 0xec, 0xbf, 0x56, 0x12, 0xe5, 0x44, 0xb3, 0xcb, 0x99, 0xd9, 0xea, 0xef,
	0xa5, 0x71, 0x23, 0x8c, 0x91, 0x7e, 0xae, 0x70, 0xa4, 0x54, 0xc8, 0x0f, 0x1d, 0x56, 0x02, 0x77,
	0x75, 0x9a, 0xa3, 0x68, 0xef, 0xfc, 0x84, 0x73, 0xf4, 0x63, 0xb8, 0x20, 0x5d, 0x91, 0x8c, 0x65,
	0xdc, 0x1e, 0xb0, 0x18, 0x7d, 0x78, 0x4c, 0x2d, 0xa0, 0x27, 0x0a, 0x88, 0xa6, 0x17, 0x30, 0x8f,
	0xf7, 0x2c, 0xb4, 0xb5, 0x19, 0xb8, 0x51, 0x4c, 0x41, 0x2e, 0x17, 0x2e, 0xd5, 0xf1, 0xe0, 0x10,
	0xdf, 0x26, 0x90, 0xfd, 0x06, 0x0a, 0x85, 0x7b, 0xec, 0x58, 0x94, 0xaa, 0x4c, 0xd6, 0x0d, 0xc3,
	0xc7, 0x52, 0xd6, 0xf0, 0xf1, 0x06, 0x5c, 0x9c, 0x38, 0xc8, 0x79, 0x4b, 0xe1, 0xc9, 0x9d, 0x3b,
	0x12, 0xa5, 0x44, 0x73, 0x94, 0xf2, 0xac, 0xed, 0x87, 0xf7, 0xa7, 0xcc, 0x51, 0xc3, 0x7f, 0xc1,
	0xcc, 0x70, 0x25, 0x28, 0xa2, 0xb8, 0x7e, 0x97, 0x3f, 0xd6, 0xb6, 0xdc, 0x4c, 0xcc, 0x99, 0x2e,
	0x7f, 0x6c, 0xff, 0xf5, 0x69, 0x13, 0xd8, 0xac, 0x64, 0x1e, 0x43, 0x09, 0x9f, 0x3f, 0xce, 0x55,
	0x24, 0x20, 0x58, 0xd1, 0x93, 0x3b, 0xa2, 0xf8, 0x36, 0x5e, 0x73, 0x3c, 0x40, 0x9b, 0xd4, 0x27,
	0x9c, 0xcf, 0xbf, 0x44, 0xaf, 0x06, 0xa5, 0xbe, 0x6d, 0xbe, 0xb1, 0xb9, 0x02, 0x4a, 0xff, 0x97,
	0x3e, 0xbb, 0xae, 0x93, 0x44, 0x28, 0x9d, 0xe1, 0x1b, 0xe9, 0xf6, 0x7f, 0xbe, 0x88, 0x5a, 0x0a,
	0xf3, 0xc5, 0xab, 0x1b, 0x1f, 0x4b, 0x8d, 0xdc, 0x8c, 0x9a, 0x3e, 0x82, 0x35, 0x1d, 0x1e, 0x20,
	0x1b, 0x12, 0x0e, 0x25, 0xd0, 0x6c, 0x30, 0x01, 0x67, 0x95, 0x67, 0xbe, 0x23, 0xeb, 0xbb, 0x60,
	0xe1, 0x0b, 0x17, 0xf5, 0xe4, 0xc4, 0xa4, 0xe7, 0xf8, 0xcb, 0x94, 0xb5, 0xd8, 0xf8, 0x42, 0x4a,
	0x3c, 0x84, 0xd3, 0x2c, 0x8d, 0x2e, 0x20, 0x3d, 0xe8, 0xea, 0xf7, 0x8d, 0xb5, 0xad, 0x0b, 0x66,
	0xa7, 0x8b, 0xe2, 0x10, 0x38, 0x27, 0x59, 0x0e, 0x8a, 0xe5, 0x7e, 0x2c, 0x43, 0xc1, 0xa7, 0x21,
	0xb9, 0x97, 0xcc, 0xb0, 0xfc, 0x05, 0x11, 0x05, 0x9c, 0x7a, 0x28, 0x43, 0x70, 0x63, 0x01, 0xb7,
	0xe0, 0x4c, 0xcf, 0x73, 0x47, 0xed, 0x82, 0xde, 0x2d, 0x4f, 0xe8, 0xdd, 0x49, 0x91, 0xe1, 0x41,
	0xbe, 0x87, 0x9f, 0x9a, 0x6a, 0xe1, 0x98, 0x61, 0x54, 0xc6, 0xda, 0xd6, 0x1b, 0x52, 0x81, 0x52,
	0x30, 0x66, 0x9b, 0x59, 0xd5, 0x2c, 0x79, 0x26, 0x89, 0xf4, 0xff, 0xd6, 0xe7, 0x60, 0x8d, 0x63,
	0xcc, 0x0e, 0xc7, 0x30, 0xa6, 0xcd, 0x2d, 0x8f, 0x69, 0x73, 0xc9, 0xa5, 0x8f, 0x3e, 0x8a, 0xa9,
	0x5a, 0xe4, 0x9b, 0xdb, 0xe9, 0x61, 0x24, 0xc8, 0x98, 0x2a, 0x9a, 0x90, 0x77, 0xa6, 0x9b, 0x96,
	0x26, 0x7f, 0xcc, 0x3b, 0x49, 0xcc, 0x55, 0x40, 0x06, 0x9a, 0x82, 0xeb, 0x34, 0x05, 0x31, 0x85,
	0x84, 0x5d, 0xa7, 0xc1, 0xcd, 0x4f, 0xf9, 0xb2, 0x78, 0x3b, 0x18, 0x8e, 0x3c, 0x1e, 0xeb, 0x5a,
	0xa7, 0x3f, 0xbe, 0x7a, 0x17, 0xd7, 0xb2, 0xc3, 0x3b, 0x2e, 0x3f, 0xd4, 0x59, 0x76, 0xe4, 0xd8,
	0x4d, 0xce, 0xb6, 0x85, 0xd7, 0x85, 0x93, 0xb2, 0x15, 0xc6, 0x83, 0xb4, 0x3f, 0xc4, 0x23, 0x1f,
	0xf2, 0x33, 0x33, 0x87, 0x72, 0x92, 0x34, 0x75, 0xc4, 0xec, 0x4f, 0xf0, 0x26, 0xbf, 0x38, 0xf3,
	0x46, 0xaa, 0xfc, 0x90, 0x32, 0xaa, 0xd2, 0xda, 0x17, 0x4b, 0xee, 0x1c, 0x37, 0x1f, 0x71, 0x6e,
	0xc8, 0x2f, 0x22, 0xbd, 0x18, 0xd4, 0x69, 0x65, 0xc6, 0x3c, 0xc2, 0x47, 0xc8, 0x47, 0x32, 0xe6,
	0x46, 0x59, 0x06, 0x3d, 0xa2, 0xb7, 0xd9, 0x5d, 0xfb, 0x26, 0x3a, 0x68, 0xc1, 0x26, 0xeb, 0xc5,
	0x65, 0xfa, 0x1a, 0x99, 0x2f, 0x6a, 0x87, 0xfd, 0xbb, 0x65, 0x74, 0xda, 0x32, 0xb9, 0x9c, 0x99,
	0x33, 0xea, 0xc3, 0xac, 0xcf, 0x92, 0x8b, 0xca, 0x65, 0xc5, 0xa4, 0x12, 0x33, 0xce, 0x4b, 0x9e,
	0x20, 0xe2, 0x65, 0xeb, 0x68, 0x3e, 0x5f, 0x26, 0x45, 0x61, 0x0b, 0x5e, 0x81, 0xc5, 0x43, 0x97,
	0x1f, 0x4d, 0x09, 0x75, 0x8c, 0xe9, 0x69, 0x0c, 0x13, 0x19, 0xa1, 0x8b, 0xdc, 0x64, 0xff, 0x92,
	0x7c, 0xb1, 0xe5, 0xfa, 0xba, 0x3f, 0x72, 0x08, 0xe7, 0x0c, 0x8d, 0x32, 0xf3, 0xda, 0x69, 0x15,
	0x1a, 0x14, 0xe6, 0xf9, 0xee, 0x27, 0xe4, 0x78, 0xed, 0xf7, 0x16, 0xa0, 0x49, 0x10, 0x15, 0x5f,
	0x1a, 0x67, 0x9b, 0x58, 0xf0, 0x7a, 0xda, 0x8b, 0x0f, 0x19, 0x48, 0xa1, 0x9c, 0x0f, 0xa4, 0xb0,
	0x90, 0x06, 0x52, 0xc0, 0x27, 0xd1, 0x1e, 0xa7, 0x27, 0x5b, 0x18, 0xad, 0xde, 0xe3, 0xf8, 0xe8,
	0xbd, 0x1b, 0x84, 0x4c, 0x5e, 0xc8, 0xe2, 0x7f, 0xeb, 0x34, 0x2c, 0xa3, 0xcb, 0x74, 0x7a, 0x44,
	0xb8, 0xe4, 0xc8, 0x2f, 0xeb, 0x5b, 0xa6, 0x1f, 0xdc, 0x95, 0x34, 0xee, 0xc3, 0xa7, 0x23, 0x01,
	0xc1, 0xfb, 0x48, 0x4a, 0x14, 0x5c, 0xd8, 0x70, 0x91, 0x2b, 0x0e, 0xf5, 0x9e, 0xfb, 0xc8, 0xdd,
	0x17, 0xad, 0xae, 0xa4, 0xe1, 0x30, 0xc4, 0xb7, 0xf5, 0x0e, 0x54, 0x63, 0xd7, 0xef, 0x8f, 0x98,
	0x1b, 0xbd, 0xb5, 0x51, 0x4d, 0x55, 0xdd, 0x0f, 0x5c, 0xbf, 0x7f, 0x9f, 0xb9, 0x37, 0xdc, 0xa8,
	0x23, 0x75, 0x03, 0x4e, 0x8a, 0x28, 0x24, 0x29, 0xf5, 0xf1, 0xb6, 0x0c, 0x4b, 0xb0, 0x6a, 0xe4,
	0xca, 0xa2, 0xbf, 0x2d, 0xa8, 0xc3, 0x3c, 0x0c, 0x68, 0x52, 0x71, 0xca, 0x0c, 0xaf, 0x04, 0x86,
	0xdd, 0x77, 0x65, 0x10, 0x32, 0xf1, 0x17, 0x9f, 0xd5, 0xf1, 0x5e, 0xdc, 0x16, 0x54, 0xc9, 0xc4,
	0x2d, 0x69, 0x08, 0xf0, 0x03, 0xd7, 0xe3, 0x3a, 0x08, 0xad, 0xa0, 0x51, 0xb4, 0xd1, 0x24, 0x2a,
	0xe2, 0x87, 0xfd, 0xd7, 0x17, 0xa1, 0x49, 0xfb, 0xf3, 0x53, 0x0f, 0x93, 0x1a, 0x90, 0xc5, 0xc2,
	0x01, 0x59, 0xca, 0x0c, 0x88, 0x49, 0xd7, 0xe5, 0x1c, 0x5d, 0x4f, 0xc3, 0x32, 0x8e, 0xf0, 0x5b,
	0xb8, 0xfd, 0x55, 0x1d, 0xf9, 0xa5, 0xe1, 0x6f, 0xa3, 0x07, 0x51, 0x05, 0x7f, 0x5b, 0xc3, 0xb7,
	0x70, 0x10, 0x14, 0x7c, 0x4b, 0xc3, 0xaf, 0x22, 0x99, 0x15, 0xfc, 0xaa, 0xf5, 0x0e, 0xac, 0x48,
	0xfa, 0x8e, 0x87, 0x19, 0x53, 0x44, 0x50, 0xc3, 0xe1, 0x28, 0xd4, 0xec, 0x14, 0xaa, 0x3f, 0xc1,
	0x14, 0x92, 0x23, 0xd6, 0x48, 0x47, 0x0c, 0xed, 0xda, 0xdd, 0x68, 0xc0, 0xfc, 0x8d, 0xa6, 0xb2,
	0x6b, 0xc7, 0xcf, 0xa2, 0xb1, 0x5c, 0x9d, 0x3a, 0x96, 0x6b, 0xc6, 0x58, 0xb6, 0xee, 0xc0, 0x8a,
	0x6c, 0x76, 0x61, 0xf0, 0x82, 0xcc, 0xcc, 0x2b, 0xcf, 0x9a, 0x79, 0xf6, 0xbf, 0xbd, 0x48, 0xd1,
	0xed, 0x75, 0x28, 0x92, 0xaf, 0x3b, 0x2f, 0x5e, 0x84, 0x3a, 0x4a, 0xd6, 0xea, 0x50, 0x4b, 0x9c,
	0xa9, 0x86, 0x30, 0x19, 0x6b, 0xa1, 0xa0, 0xdf, 0x4b, 0x13, 0xfa, 0x4d, 0x81, 0x6c, 0x96, 0xcd,
	0x40, 0x36, 0x9a, 0x1a, 0x2b, 0x06, 0x35, 0xa6, 0x2e, 0xdd, 0x6f, 0xa7, 0xfe, 0x98, 0xaa, 0xe9,
	0xcd, 0xa0, 0xd9, 0x5b, 0xc9, 0x5d, 0x75, 0xb0, 0x0f, 0x1d, 0x51, 0xbf, 0x05, 0x95, 0xaf, 0x06,
	0xdc, 0x47, 0xed, 0x2b, 0x90, 0xce, 0x50, 0x7d, 0xb7, 0xfe, 0x9f, 0x12, 0x34, 0xb3, 0xf9, 0x26,
	0x04, 0xa6, 0xb1, 0xa1, 0x2e, 0xda, 0x32, 0x0a, 0x22, 0x57, 0xbb, 0xe6, 0x5e, 0x72, 0x32, 0x30,
	0x31, 0x4b, 0x04, 0x39, 0xfc, 0x64, 0xa8, 0x62, 0x79, 0xc9, 0x4f, 0x31, 0xb1, 0x1f, 0xb9, 0x62,
	0x90, 0x24, 0x43, 0x94, 0x5f, 0xd6, 0x07, 0xb0, 0x34, 0x44, 0x05, 0x33, 0x89, 0xaf, 0x2f, 0xcf,
	0xe8, 0xd3, 0xe6, 0x4e, 0xe2, 0x25, 0x0e, 0x65, 0x69, 0x5d, 0x87, 0x45, 0x0c, 0xe5, 0x33, 0xc1,
	0xe9, 0x34, 0xc6, 0x39, 0xa2, 0xe8, 0x41, 0x3a, 0xce, 0x11, 0x06, 0x69, 0x96, 0x2e, 0x47, 0xc4,
	0x7f, 0xfb, 0x2e, 0xac, 0x12, 0xc7, 0xbf, 0x1f, 0x06, 0x71, 0xa0, 0xb2, 0x46, 0x31, 0x1f, 0xe9,
	0x79, 0x18, 0xf3, 0xd1, 0xc4, 0x70, 0xf5, 0xca, 0xaf, 0xa4, 0x74, 0x64, 0x28, 0x8e, 0xcc, 0xa2,
	0xf5, 0x52, 0x39, 0x24, 0xcf, 0x10, 0x28, 0xcb, 0xd0, 0xc9, 0xa3, 0x84, 0xa7, 0x6c, 0xf5, 0x69,
	0xef, 0xc2, 0xfa, 0xd8, 0x5a, 0x2c, 0xec, 0xce, 0x05, 0xa8, 0x75, 0x82, 0xe1, 0xbe, 0xeb, 0x2b,
	0xb7, 0xe8, 0x0b, 0x14, 0xe6, 0x52, 0x83, 0xec, 0x7f, 0xbd, 0x04, 0xa7, 0x0a, 0xd7, 0x75, 0xe1,
	0xba, 0xfa, 0x0e, 0x34, 0x53, 0x4f, 0xc3, 0xc6, 0x01, 0xf9, 0x54, 0x21, 0x7b, 0x70, 0x1a, 0x41,
	0xa6, 0x44, 0x0c, 0xbd, 0x35, 0xe4, 0x6d, 0xd6, 0x55, 0xb6, 0x04, 0x2b, 0xe2, 0xfb, 0x5a, 0xb7,
	0x4b, 0x8e, 0x43, 0x86, 0xbc, 0xdd, 0x73, 0x1f, 0x73, 0x1d, 0x57, 0x53, 0x40, 0x76, 0x04, 0xc0,
	0xde, 0x83, 0xda, 0x1d, 0xf7, 0x07, 0xee, 0x5e, 0x82, 0xa6, 0x48, 0x85, 0x4d, 0xd3, 0xb3, 0xaf,
	0x6c, 0xce, 0x3e, 0x73, 0x65, 0x2c, 0x64, 0x57, 0x86, 0xfd, 0x31, 0xac, 0xec, 0x30, 0x32, 0x62,
	0x51, 0xe3, 0x54, 0x32, 0xc6, 0x69, 0x0d, 0x16, 0x0e, 0x99, 0xba, 0xa5, 0x16, 0x7f, 0xe5, 0xd5,
	0xcb, 0x82, 0x76, 0xbb, 0xf9, 0x3f, 0x2d, 0x40, 0xe5, 0x76, 0xe2, 0x71, 0x55, 0xc4, 0x80, 0xae,
	0x2d, 0x71, 0xe6, 0x88, 0xff, 0x3a, 0xec, 0x54, 0xd9, 0x08, 0x3b, 0x75, 0x06, 0x56, 0x06, 0x09,
	0xae, 0x7e, 0xa9, 0x6c, 0x5f, 0x1e, 0x24, 0x0f, 0xcc, 0x70, 0x5a, 0x8b, 0xd9, 0x70, 0x5a, 0x5f,
	0xb9, 0xc3, 0x40, 0x46, 0x54, 0xc0, 0xff, 0xb4, 0x24, 0xfc, 0x2f, 0x5d, 0x26, 0x03, 0x4f, 0xc9,
	0x2f, 0x1d, 0x7a, 0x8b, 0x62, 0x0a, 0xe0, 0xff, 0x94, 0x5d, 0x54, 0x4c, 0x76, 0x71, 0x56, 0x10,
	0xa5, 0x4d, 0x09, 0xb4, 0x8f, 0xac, 0x50, 0xfc, 0x30, 0xe4, 0x2f, 0xc7, 0xee, 0x90, 0xf9, 0x72,
	0xbd, 0xd3, 0x47, 0x2a, 0x3b, 0xd7, 0xcc, 0x2b, 0xcf, 0x17, 0x64, 0x78, 0x36, 0x8a, 0x01, 0x54,
	0xa3, 0xeb, 0x0d, 0xa4, 0xa7, 0x0c, 0xc9, 0xd6, 0x84, 0x72, 0x2f, 0x91, 0x3b, 0x74, 0xb9, 0x97,
	0xa4, 0xfe, 0x5e, 0x68, 0x2b, 0x90, 0x91, 0x1e, 0x9f, 0x03, 0xa0, 0xe3, 0x6d, 0x18, 0xf8, 0x7d,
	0xb9, 0x07, 0x54, 0x29, 0x04, 0x4a, 0xe0, 0xf7, 0xad, 0x97, 0xa1, 0x49, 0xc9, 0xa2, 0xf3, 0xed,
	0x47, 0xae, 0xbf, 0xb1, 0x26, 0x7d, 0x7c, 0x08, 0xe8, 0x17, 0xee, 0x30, 0xf8, 0x81, 0x8b, 0xbb,
	0x89, 0x81, 0xf5, 0xd8, 0x65, 0xfe, 0xc6, 0x3a, 0x71, 0x55, 0x8d, 0xf6, 0x73, 0x2e, 0xcb, 0x46,
	0x7f, 0xb3, 0xb2, 0xd1, 0xdf, 0xce, 0x01, 0xd5, 0x8a, 0x71, 0xde, 0x4e, 0xd0, 0x5c, 0x41, 0xc0,
	0x5e, 0x32, 0xb4, 0x7f, 0xbb, 0x04, 0x35, 0x63, 0xf3, 0x28, 0x8c, 0x87, 0x76, 0x1a, 0x96, 0x07,
	0xec, 0x90, 0x1f, 0xbb, 0xf2, 0x82, 0x45, 0x7e, 0xa5, 0x34, 0x5d, 0x28, 0xa4, 0xe9, 0xa2, 0x49,
	0x53, 0x22, 0xd9, 0x92, 0x26, 0x59, 0x41, 0xf4, 0xb8, 0xe5, 0x82, 0xe8, 0x71, 0xf6, 0x01, 0x58,
	0xe3, 0xb2, 0x58, 0x61, 0x2b, 0x4d, 0xa6, 0x5e, 0xce, 0x32, 0x75, 0xeb, 0x22, 0x2c, 0xb9, 0x7e,
	0x2f, 0x50, 0x77, 0x08, 0x63, 0x5b, 0x26, 0xa5, 0xda, 0x2f, 0xc2, 0x8a, 0x8a, 0x39, 0x99, 0x0a,
	0x3d, 0x25, 0x53, 0xe8, 0xb1, 0x7f, 0xbb, 0x0c, 0xeb, 0xc4, 0x20, 0x65, 0x7b, 0x32, 0x53, 0xbc,
	0x94, 0x9d, 0xe2, 0x92, 0xe3, 0xa6, 0x6d, 0xa4, 0xe8, 0x6b, 0x3a, 0x90, 0x1c, 0x46, 0x5f, 0xbb,
	0x23, 0xe6, 0x73, 0x46, 0x32, 0x59, 0x7c, 0x02, 0xc9, 0xe4, 0x24, 0x2c, 0x0d, 0x83, 0x47, 0x2e,
	0x97, 0x2b, 0x89, 0x3e, 0x32, 0xb4, 0x58, 0xce, 0xd1, 0xe2, 0x75, 0x31, 0x53, 0x48, 0x40, 0x90,
	0xba, 0x89, 0x31, 0x72, 0x68, 0x84, 0xc9, 0xeb, 0xcc, 0x8d, 0xda, 0x47, 0xd8, 0x0f, 0x0a, 0xd8,
	0xbb, 0xe2, 0x46, 0x3f, 0x14, 0x9f, 0xf6, 0xef, 0x94, 0x61, 0x9d, 0xf8, 0xfc, 0x33, 0xa5, 0xcf,
	0x3c, 0xdd, 0x5c, 0xf8, 0xe9, 0x75, 0xd3, 0xfa, 0x36, 0x80, 0x1e, 0x03, 0x15, 0x99, 0x6c, 0xca,
	0x80, 0x19, 0xc8, 0xf6, 0xef, 0x95, 0xd5, 0xa1, 0xea, 0x06, 0x67, 0xde, 0x13, 0x91, 0xa7, 0x40,
	0xc4, 0x5a, 0x28, 0x12, 0xb1, 0xbe, 0xf6, 0x6c, 0x7a, 0x49, 0xb2, 0x5a, 0x8a, 0x20, 0x87, 0x04,
	0x33, 0xb6, 0xa7, 0x3c, 0xef, 0x5d, 0xce, 0x89, 0x6a, 0x7a, 0x2c, 0x56, 0x72, 0x53, 0x6e, 0xcb,
	0x18, 0x8b, 0xca, 0xd4, 0x43, 0x96, 0xc6, 0xb3, 0xff, 0x71, 0x49, 0x1d, 0x6a, 0x7e, 0x62, 0x64,
	0x7a, 0x66, 0xbd, 0xcd, 0xce, 0xbc, 0x0c, 0xf5, 0x2b, 0xf3, 0x53, 0xdf, 0xfe, 0x97, 0x34, 0x6f,
	0xd9, 0x1e, 0xb8, 0xf7, 0xb9, 0xdf, 0xbf, 0x25, 0xe4, 0xdc, 0x49, 0xbd, 0xce, 0xbb, 0xc2, 0xd1,
	0x27, 0xec, 0x05, 0xf3, 0x84, 0x7d, 0x12, 0x96, 0x84, 0x5c, 0xa7, 0xe2, 0x4b, 0xd3, 0xc7, 0x7c,
	0x3d, 0xcf, 0xf4, 0x63, 0xf9, 0xc9, 0x0e, 0xdc, 0xcf, 0x74, 0x2a, 0xfc, 0xa3, 0x92, 0xe2, 0x29,
	0x3f, 0x13, 0x74, 0xf9, 0x89, 0x8c, 0xfd, 0xff, 0x52, 0x82, 0x13, 0x34, 0xf6, 0xd7, 0x7c, 0xd1,
	0xbd, 0x6b, 0xdd, 0xee, 0xd7, 0xed, 0x65, 0x29, 0xed, 0xe5, 0xd3, 0x6c, 0x2b, 0x4f, 0xb8, 0xc6,
	0x5f, 0x1f, 0x1b, 0xd8, 0xc9, 0xfc, 0xd6, 0xfe, 0xbd, 0x92, 0x0a, 0x73, 0xf7, 0x2c, 0x7b, 0x5b,
	0xdc, 0xe8, 0x2c, 0xab, 0x5e, 0x79, 0x12, 0x56, 0xfd, 0x5f, 0x96, 0xa0, 0x46, 0x83, 0x72, 0x9d,
	0x5d, 0xe7, 0xc5, 0x27, 0xf2, 0x9f, 0x51, 0x12, 0xa7, 0x3b, 0x66, 0xd5, 0xd8, 0x31, 0xed, 0x1f,
	0x97, 0xa0, 0x46, 0x84, 0x9f, 0xdc, 0xa3, 0x67, 0x4d, 0xc6, 0xb4, 0x29, 0x15, 0xb3, 0x29, 0xff,
	0x73, 0x09, 0x80, 0x88, 0x2b, 0x8e, 0x1a, 0x96, 0x0d, 0x4b, 0x83, 0xc4, 0xe3, 0xca, 0x0c, 0x16,
	0x2f, 0xbf, 0xd4, 0x19, 0xc4, 0xa1, 0x24, 0x21, 0x51, 0x07, 0x5e, 0xb7, 0x2d, 0x05, 0xb3, 0x32,
	0x0a, 0x66, 0xd5, 0xc0, 0xeb, 0xee, 0x91, 0x42, 0xea, 0x45, 0xa8, 0x77, 0xb9, 0x17, 0x33, 0x85,
	0x40, 0x71, 0x2e, 0x6b, 0x08, 0x4b, 0x51, 0x8e, 0x98, 0x4b, 0x7e, 0xcc, 0x83, 0x44, 0xc9, 0xa8,
	0x35, 0x01, 0x7b, 0x40, 0xa0, 0x89, 0xea, 0xae, 0x8b, 0xb0, 0xd2, 0x67, 0x43, 0xce, 0xa5, 0x2b,
	0x28, 0x79, 0x30, 0x50, 0x31, 0xea, 0x55, 0x5a, 0xb1, 0x22, 0x03, 0x3b, 0x4b, 0x74, 0xff, 0xff,
	0x41, 0x67, 0xff, 0x58, 0x2f, 0x9b, 0x3b, 0x6e, 0xf2, 0x49, 0xb1, 0x3e, 0xc2, 0xa8, 0xa0, 0x3c,
	0xa5, 0x02, 0x35, 0x3f, 0x17, 0xb2, 0xf3, 0xb3, 0x40, 0x95, 0x3c, 0x17, 0xeb, 0x7e, 0x05, 0x9a,
	0xcc, 0xf3, 0x48, 0x0d, 0x44, 0x65, 0xd0, 0x1c, 0xcf, 0x41, 0xb1, 0x07, 0x2a, 0xec, 0xc0, 0x37,
	0xb3, 0x07, 0x7d, 0x58, 0xbb, 0x17, 0x08, 0x51, 0x87, 0xf4, 0x45, 0xea, 0x0e, 0x49, 0x29, 0x4d,
	0x49, 0xba, 0xd6, 0x8a, 0x51, 0x75, 0xc6, 0x5f, 0x34, 0xce, 0xf8, 0x17, 0x45, 0x23, 0x53, 0x4d,
	0xd4, 0xf8, 0x99, 0x89, 0x8c, 0x1c, 0xff, 0xa8, 0x04, 0xab, 0x54, 0x13, 0xce, 0x3a, 0x75, 0x3c,
	0x1b, 0xe3, 0x2a, 0x4f, 0x3f, 0x9d, 0x8b, 0x1a, 0xa9, 0x14, 0x11, 0x4b, 0x86, 0x22, 0xa2, 0x98,
	0x7f, 0x69, 0x35, 0xca, 0x8a, 0x11, 0x46, 0xdd, 0xfe, 0x83, 0x12, 0xd4, 0xe5, 0x0d, 0x07, 0xf6,
	0x81, 0xb4, 0x7a, 0x46, 0x0c, 0x6c, 0xf2, 0xd4, 0x9d, 0x81, 0x59, 0x9b, 0x79, 0x4f, 0xf0, 0x68,
	0xb3, 0x9f, 0x27, 0x77, 0xaa, 0x6e, 0x7c, 0x5d, 0x2f, 0x32, 0x23, 0x86, 0x74, 0x8e, 0x66, 0x7a,
	0xe5, 0x6d, 0xa4, 0xd3, 0x8a, 0x0c, 0x9d, 0xd4, 0x27, 0xb6, 0x55, 0x6a, 0xb8, 0x7f, 0xe6, 0xdb,
	0xda, 0xc6, 0x37, 0x0e, 0xd7, 0x92, 0x78, 0x20, 0x16, 0xc4, 0xac, 0xcb, 0x32, 0xb1, 0x1e, 0x8c,
	0x88, 0x68, 0xf4, 0x91, 0x75, 0x44, 0xb8, 0x90, 0x73, 0xd7, 0xf8, 0xbf, 0xe1, 0x0a, 0x8d, 0x74,
	0x0d, 0x4f, 0xe5, 0xbe, 0x5f, 0xc7, 0x76, 0xd6, 0x64, 0x40, 0xef, 0xd6, 0x2c, 0x36, 0x3d, 0xc1,
	0x55, 0x04, 0x00, 0xd5, 0x7d, 0x36, 0x34, 0xdc, 0xa8, 0x8d, 0x6d, 0x23, 0x4b, 0xca, 0x45, 0x15,
	0x89, 0x18, 0x35, 0xb5, 0x68, 0x4f, 0xf9, 0x26, 0xd4, 0x10, 0xa1, 0x13, 0xf8, 0x3d, 0xb7, 0x2f,
	0xd7, 0x74, 0xd3, 0x88, 0x3c, 0xda, 0x73, 0xfb, 0x0e, 0xf4, 0xf5, 0x7f, 0x51, 0x28, 0x46, 0x3f,
	0xd2, 0xee, 0xdf, 0x96, 0xb1, 0xd6, 0x1a, 0x02, 0xa5, 0xf3, 0xb7, 0x5f, 0x2d, 0x43, 0x8d, 0xac,
	0x62, 0xa2, 0x38, 0x08, 0xb9, 0x75, 0x05, 0x2a, 0x91, 0x54, 0x04, 0xcb, 0x7e, 0xaf, 0xe5, 0xf5,
	0xc5, 0x8e, 0xc6, 0xb0, 0xde, 0x80, 0x15, 0xd6, 0xa1, 0xed, 0xbb, 0x9c, 0x8e, 0x6d, 0x4e, 0xdb,
	0xeb, 0x28, 0x1c, 0x6b, 0x13, 0x4e, 0x8c, 0x58, 0x14, 0xf1, 0x6e, 0x5b, 0x6c, 0x18, 0xae, 0xdf,
	0x37, 0xaf, 0x45, 0xd7, 0x29, 0xe9, 0x87, 0x94, 0xa2, 0xe2, 0x7c, 0x2b, 0x92, 0xc4, 0xda, 0xe0,
	0xbf, 0x4f, 0x04, 0x89, 0xf3, 0x61, 0xc0, 0x97, 0xf2, 0x21, 0x44, 0x5e, 0x07, 0x0b, 0xaf, 0x60,
	0x47, 0x8c, 0xde, 0x3b, 0x0e, 0x79, 0x7b, 0x18, 0x49, 0x95, 0x10, 0xde, 0xc1, 0xde, 0x67, 0xf8,
	0xec, 0x71, 0xc8, 0xef, 0x46, 0xf6, 0xaf, 0xd3, 0xb3, 0x47, 0xb4, 0x6a, 0x9c, 0x6f, 0xf4, 0x4f,
	0xc1, 0xb2, 0x1b, 0xb5, 0x15, 0xaf, 0xae, 0x38, 0x4b, 0x6e, 0x74, 0x53, 0x32, 0xe7, 0x98, 0x8f,
	0x34, 0x73, 0x8e, 0xf9, 0xc8, 0xda, 0x82, 0x3a, 0xf6, 0x23, 0x24, 0x22, 0x4b, 0x99, 0x6e, 0x55,
	0xc7, 0x0f, 0x27, 0xb0, 0x83, 0xc3, 0x2b, 0x3f, 0xec, 0xef, 0xd0, 0x93, 0x9e, 0x63, 0xbf, 0x83,
	0xcd, 0x39, 0x0b, 0x15, 0x8c, 0x2b, 0x6e, 0x38, 0xf1, 0xc2, 0xef, 0xdd, 0xb4, 0xc6, 0x72, 0x5a,
	0xa3, 0xfd, 0x6b, 0x34, 0x97, 0x75, 0xf6, 0x7f, 0xda, 0xbd, 0xf9, 0xdb, 0x25, 0x8a, 0xc8, 0xcc,
	0xbd, 0xde, 0x74, 0x2d, 0xfc, 0x49, 0x58, 0x32, 0xed, 0xad, 0xe8, 0x43, 0x1f, 0xc9, 0x17, 0x8c,
	0x23, 0xf9, 0x65, 0x58, 0xeb, 0xa0, 0xbf, 0xb3, 0x76, 0x56, 0x58, 0xae, 0x38, 0xab, 0x04, 0xff,
	0x74, 0x86, 0x46, 0x0b, 0xf7, 0xae, 0x21, 0x4f, 0x22, 0x2e, 0x27, 0x85, 0xfa, 0xb4, 0xff, 0x59,
	0x7c, 0xe3, 0x92, 0x3b, 0x19, 0xce, 0xd9, 0xd4, 0xa2, 0x66, 0x2d, 0x14, 0x37, 0x6b, 0x72, 0x03,
	0x3e, 0xa5, 0x20, 0xa9, 0x61, 0xc0, 0xba, 0x1d, 0xb4, 0x6c, 0xc3, 0x41, 0x9c, 0x68, 0x17, 0x28,
	0x2d, 0x6b, 0xf8, 0x28, 0x6e, 0x47, 0xdc, 0xeb, 0xa9, 0x88, 0x0c, 0x04, 0x12, 0x34, 0x57, 0x81,
	0x85, 0xd4, 0xdb, 0x21, 0x2c, 0x50, 0x6c, 0x6c, 0xe7, 0xa0, 0xfa, 0x65, 0x14, 0x48, 0xb3, 0x22,
	0x69, 0x9e, 0x2e, 0x00, 0x18, 0x9d, 0xcb, 0xc5, 0x27, 0x02, 0xa2, 0x6a, 0x79, 0x43, 0x84, 0xab,
	0x6e, 0x8e, 0x58, 0x2f, 0x80, 0x0b, 0x36, 0xbd, 0xf4, 0x68, 0xa6, 0x01, 0x92, 0x8d, 0x92, 0x70,
	0xad, 0x4a, 0xff, 0x8b, 0x77, 0xa1, 0x71, 0x0f, 0x23, 0xb8, 0xdf, 0xe3, 0x47, 0xd8, 0xd7, 0xa9,
	0x2e, 0x63, 0x5f, 0x00, 0x19, 0x0b, 0x2f, 0xad, 0xa2, 0xea, 0x00, 0x81, 0xb0, 0xb8, 0x8f, 0xe1,
	0x2c, 0x15, 0x47, 0xd5, 0xdd, 0x09, 0x98, 0x0c, 0x8c, 0xc3, 0xba, 0xc7, 0xe3, 0x6c, 0xb1, 0x34,
	0xce, 0x16, 0xb7, 0xe1, 0x04, 0x15, 0x20, 0xb2, 0xe9, 0x71, 0x28, 0x94, 0x42, 0x26, 0xbb, 0xa9,
	0xfc, 0x9e, 0x59, 0x88, 0x90, 0xe0, 0xf0, 0x19, 0xb4, 0x75, 0x19, 0x96, 0xe9, 0x41, 0xb4, 0xe9,
	0x26, 0x32, 0x83, 0xe2, 0x48, 0x04, 0xfb, 0x0d, 0xb3, 0x84, 0x07, 0x3c, 0x1c, 0xba, 0xbe, 0x18,
	0x82, 0xd3, 0xa2, 0x04, 0x16, 0x05, 0xbe, 0xa4, 0x8c, 0xfc, 0xb2, 0x7f, 0x01, 0xce, 0x99, 0xdd,
	0x4e, 0x63, 0xae, 0xd3, 0xc8, 0x15, 0xb5, 0xfe, 0x32, 0x9a, 0xee, 0x4b, 0xa7, 0xb8, 0x13, 0xc6,
	0x89, 0x30, 0xec, 0xbf, 0x52, 0x82, 0x0d, 0x2a, 0xde, 0x8c, 0xa0, 0x43, 0xef, 0xed, 0xac, 0x4b,
	0xb0, 0x1c, 0x84, 0x6e, 0xdf, 0xf5, 0xcd, 0x5d, 0x23, 0x13, 0x69, 0x47, 0xa6, 0x5b, 0xaf, 0xc0,
	0x52, 0xcf, 0xf5, 0xd9, 0x94, 0x90, 0x3c, 0x98, 0x5c, 0x18, 0x54, 0xec, 0x0f, 0x97, 0xe1, 0x74,
	0x4a, 0x10, 0x8a, 0x37, 0x22, 0x2d, 0x56, 0x26, 0xfa, 0x3d, 0xdf, 0x85, 0x3a, 0x3e, 0x6b, 0x68,
	0x93, 0x55, 0x99, 0xac, 0xf6, 0x15, 0x12, 0x42, 0x8a, 0x8a, 0xda, 0x34, 0xfa, 0xe5, 0xd4, 0x3c,
	0xa3, 0x93, 0x3b, 0x50, 0xa3, 0xb8, 0x26, 0xf8, 0x16, 0x5c, 0x1a, 0xdd, 0x5c, 0x9c, 0x52, 0x12,
	0xba, 0x65, 0xc7, 0x67, 0xe7, 0x0e, 0x05, 0xf4, 0xa4, 0x27, 0xf5, 0x9f, 0x42, 0x33, 0xfb, 0x62,
	0x58, 0xf2, 0xd0, 0x4b, 0x53, 0x8b, 0x32, 0x5e, 0xf7, 0x3a, 0x8d, 0xcc, 0xc3, 0x62, 0x51, 0x60,
	0xfa, 0x44, 0xb1, 0xef, 0xf6, 0x62, 0x29, 0x1d, 0x4c, 0x2b, 0x50, 0xe7, 0xc6, 0x27, 0xae, 0x8d,
	0x8e, 0xf9, 0xd9, 0x8a, 0xa0, 0xf6, 0x53, 0x1f, 0xdd, 0xd6, 0x6f, 0x95, 0x00, 0x52, 0x8a, 0x4d,
	0xf3, 0x6c, 0x70, 0x5a, 0xb7, 0x47, 0x06, 0xd8, 0x91, 0xb5, 0x9f, 0x54, 0xb5, 0x53, 0xb1, 0xb2,
	0x2e, 0x7a, 0xd0, 0x83, 0x6f, 0x33, 0x95, 0x54, 0x59, 0x71, 0xa3, 0x5b, 0xf8, 0x6d, 0x3e, 0x01,
	0x5c, 0x9a, 0xfa, 0x04, 0xb0, 0xb5, 0x0b, 0x8d, 0xec, 0x13, 0x6b, 0xfd, 0x3a, 0xb7, 0x54, 0xf0,
	0x3a, 0xb7, 0xac, 0x5f, 0xe7, 0x0a, 0x08, 0xeb, 0xaa, 0xcb, 0x50, 0xf1, 0xb7, 0xe5, 0x41, 0x23,
	0x43, 0x7e, 0xa3, 0x43, 0xa5, 0xe2, 0x0e, 0x95, 0xcd, 0x0e, 0x8d, 0x15, 0x38, 0xb5, 0x8b, 0xf6,
	0x9f, 0x94, 0xe0, 0xa4, 0x5a, 0xb8, 0x19, 0x43, 0xbd, 0xfb, 0xb0, 0xaa, 0xcd, 0xb7, 0xa4, 0xd1,
	0x24, 0x69, 0x0f, 0x5e, 0x4d, 0xe7, 0x4d, 0x36, 0xcb, 0x66, 0xf6, 0xd3, 0x69, 0xb2, 0xcc, 0x77,
	0xeb, 0xe7, 0xe9, 0x22, 0xe2, 0x49, 0x8c, 0x01, 0xe7, 0x7f, 0x83, 0xf9, 0x77, 0x4a, 0x8a, 0x1d,
	0xaa, 0x3a, 0xd0, 0x64, 0xcd, 0xba, 0x67, 0x74, 0x03, 0x6f, 0x21, 0x95, 0x12, 0xe4, 0xe2, 0x78,
	0x37, 0x30, 0xc7, 0x66, 0xe6, 0x2b, 0xed, 0x04, 0x7e, 0x46, 0xad, 0x1d, 0x32, 0x5a, 0x4b, 0x2b,
	0x98, 0xd9, 0x07, 0x6d, 0x5e, 0x57, 0x36, 0xcd, 0xeb, 0xfe, 0xa4, 0xa4, 0xb8, 0x95, 0x61, 0x25,
	0x48, 0x25, 0x7e, 0x01, 0x96, 0x69, 0x5f, 0x97, 0x69, 0xf5, 0xeb, 0x69, 0xab, 0xf3, 0xf9, 0x36,
	0xf3, 0x00, 0x67, 0xdd, 0xcb, 0x41, 0xa2, 0xd6, 0xa7, 0xb0, 0x36, 0x56, 0xdf, 0x9c, 0xf6, 0x7c,
	0xc5, 0xfd, 0xb8, 0x2c, 0x8e, 0xe3, 0x8a, 0x87, 0xa0, 0xd0, 0x2c, 0xe6, 0x2b, 0x8a, 0xd5, 0x5d,
	0x79, 0x42, 0x94, 0x5f, 0xaf, 0x7d, 0x04, 0xab, 0x79, 0x79, 0xa1, 0x02, 0x8b, 0xf7, 0x3e, 0xbb,
	0x73, 0x67, 0xed, 0x2f, 0x89, 0x7f, 0xd7, 0x3e, 0x7b, 0x70, 0x7b, 0xad, 0x64, 0xd5, 0x60, 0x65,
	0xef, 0xf3, 0x7b, 0xdb, 0xbb, 0xf7, 0x6e, 0xad, 0x95, 0xad, 0x2a, 0x2c, 0x39, 0x37, 0xaf, 0xdd,
	0xf8, 0x7c, 0x6d, 0x61, 0xeb, 0x9f, 0x3c, 0x84, 0xa5, 0x3b, 0xc1, 0xfe, 0xfe, 0xb1, 0xf5, 0x21,
	0x9c, 0xe8, 0x91, 0x47, 0x6a, 0xb5, 0x87, 0xa1, 0x1a, 0xa0, 0x21, 0x9f, 0xb2, 0xd3, 0xfb, 0xee,
	0xd6, 0x29, 0xfd, 0x86, 0x3c, 0x83, 0xf5, 0x0e, 0x2c, 0x47, 0x14, 0x67, 0x5b, 0x3f, 0x7d, 0xc7,
	0x4f, 0xc9, 0x88, 0x5a, 0x12, 0x1a, 0x65, 0xa0, 0xd6, 0x4b, 0xb0, 0xe4, 0x61, 0xa0, 0xed, 0xba,
	0xcc, 0x84, 0x61, 0x9f, 0x5b, 0x75, 0x15, 0xab, 0x0e, 0xd3, 0xde, 0x00, 0xc0, 0xc8, 0xdf, 0xf4,
	0xb5, 0x2e, 0x31, 0x6f, 0x6a, 0x50, 0x0e, 0x7d, 0x0b, 0x20, 0x48, 0xe3, 0xad, 0x2b, 0xf4, 0x34,
	0x04, 0x7b, 0x4b, 0x82, 0xcc, 0xa8, 0xec, 0xef, 0x42, 0x2d, 0x30, 0xc3, 0xa9, 0x67, 0x32, 0x21,
	0xac, 0x65, 0x65, 0x72, 0x11, 0xde, 0xfb, 0x50, 0x0f, 0xcc, 0x10, 0xe3, 0x27, 0x32, 0xf9, 0x08,
	0xd8, 0x3a, 0x91, 0xc9, 0x28, 0x31, 0xdf, 0x54, 0x15, 0xca, 0x38, 0xe3, 0x99, 0x8c, 0x45, 0xbd,
	0xba, 0x01, 0xa7, 0x3a, 0xe8, 0xd6, 0x06, 0x43, 0xf8, 0x3f, 0xe4, 0xa1, 0xdb, 0x3b, 0xc6, 0x78,
	0x0e, 0xe7, 0xd5, 0xf0, 0x14, 0xa5, 0xb6, 0x1a, 0x99, 0x17, 0xff, 0x69, 0x29, 0x48, 0xbd, 0x89,
	0xa5, 0xe4, 0x52, 0xf3, 0xa5, 0xdc, 0x83, 0x93, 0x87, 0x3c, 0xec, 0xc9, 0xd4, 0x9d, 0x20, 0xdc,
	0xc3, 0xe0, 0xf9, 0x96, 0xb4, 0xde, 0x7b, 0x94, 0xe6, 0xd4, 0x69, 0x2d, 0x99, 0x16, 0x3d, 0x14,
	0x19, 0x73, 0xf9, 0xde, 0x87, 0xd5, 0x7d, 0xd7, 0xef, 0x62, 0xdb, 0xef, 0x25, 0xc3, 0x7d, 0x1e,
	0x5a, 0xd2, 0x53, 0xc1, 0xa3, 0xeb, 0x59, 0x78, 0xbe, 0x25, 0x57, 0xa0, 0x2a, 0x72, 0x62, 0x7b,
	0xad, 0x35, 0x23, 0x0f, 0x42, 0xf2, 0xd8, 0xef, 0x41, 0x73, 0x88, 0x0f, 0x59, 0xef, 0xb3, 0x28,
	0x3a, 0x0a, 0xc2, 0xae, 0x25, 0x27, 0xb3, 0x7c, 0xdf, 0xaa, 0xc0, 0xf9, 0x7c, 0x6f, 0x41, 0x4d,
	0xd4, 0xa2, 0x26, 0xad, 0x65, 0xd4, 0xa3, 0xa6, 0x77, 0x2e, 0xc7, 0x2b, 0xb0, 0xec, 0x51, 0xbc,
	0xf4, 0x46, 0x3a, 0xb1, 0x83, 0x24, 0xc5, 0x93, 0xd1, 0xd4, 0x5f, 0x83, 0xca, 0x80, 0xb3, 0x78,
	0x5f, 0x88, 0x85, 0xab, 0x12, 0x53, 0x85, 0x4e, 0x2f, 0xe8, 0xab, 0xa7, 0x83, 0xa2, 0xaf, 0x99,
	0xeb, 0xa5, 0x08, 0xfb, 0x3d, 0x68, 0x76, 0xb2, 0x31, 0xc0, 0x4f, 0x65, 0x86, 0x58, 0x81, 0x27,
	0xd2, 0x68, 0x2c, 0x5f, 0x36, 0xf8, 0xf7, 0xc4, 0x7c, 0x3a, 0x98, 0x77, 0x36, 0x9f, 0x02, 0xe7,
	0xf3, 0xbd, 0x0e, 0x55, 0x64, 0x3a, 0xf8, 0xbc, 0x2b, 0xc7, 0x6a, 0x56, 0x15, 0xcf, 0x50, 0x41,
	0xbf, 0xb7, 0x00, 0x3a, 0x69, 0xec, 0xec, 0xf5, 0x4c, 0x87, 0x04, 0x48, 0x2f, 0x6d, 0x23, 0xc2,
	0xf6, 0x15, 0xa8, 0x7c, 0xa9, 0xe2, 0x5e, 0x2b, 0x12, 0xab, 0x40, 0xd8, 0xba, 0x06, 0x1d, 0x19,
	0xfb, 0x32, 0x54, 0x3d, 0xce, 0x0e, 0x79, 0x51, 0x73, 0xc6, 0xc7, 0x03, 0x8f, 0x2f, 0x82, 0xf1,
	0xea, 0xf1, 0xd0, 0x41, 0xb1, 0x0b, 0xb0, 0x51, 0x4d, 0x82, 0x05, 0x9b, 0xd8, 0xa8, 0x68, 0x1a,
	0xc7, 0x86, 0x03, 0xb7, 0x73, 0x20, 0x6d, 0x32, 0x57, 0x0d, 0xf4, 0xef, 0xbb, 0x9d, 0x83, 0x3c,
	0xf6, 0x26, 0xc0, 0x30, 0x0d, 0x94, 0xbd, 0x9e, 0xa1, 0x3b, 0x76, 0x33, 0x87, 0xff, 0x36, 0x50,
	0x60, 0xfb, 0x5b, 0xe6, 0xf0, 0x66, 0x83, 0xe8, 0xe7, 0xb3, 0xbc, 0x0b, 0xb5, 0x4e, 0x1a, 0x31,
	0xdf, 0x3a, 0xa3, 0x28, 0x93, 0x8b, 0xa2, 0x9f, 0xcf, 0xf6, 0x01, 0xac, 0xf5, 0x78, 0x1a, 0x7f,
	0x90, 0xd4, 0xca, 0x32, 0xaf, 0x01, 0xd3, 0xcc, 0xd5, 0xc4, 0xdb, 0xc2, 0xa7, 0x7c, 0x69, 0x30,
	0x6f, 0xc5, 0x5c, 0xcd, 0x08, 0xdf, 0xf9, 0xfa, 0x3e, 0x83, 0xb3, 0x66, 0x7d, 0xd9, 0xd0, 0xdc,
	0xe7, 0xb2, 0x15, 0x67, 0x12, 0x5b, 0xe7, 0xb2, 0x2d, 0xc8, 0xe6, 0xbc, 0x95, 0x2d, 0x36, 0xeb,
	0xf1, 0x28, 0x37, 0x4b, 0x72, 0x05, 0x65, 0x71, 0xdf, 0x87, 0x7a, 0x64, 0x86, 0xc1, 0x56, 0x7d,
	0x32, 0x63, 0x63, 0xeb, 0x0d, 0x23, 0x13, 0x30, 0xfb, 0x5b, 0xb0, 0x8a, 0x4d, 0x30, 0x42, 0xe0,
	0xaa, 0x81, 0x4e, 0x41, 0x7a, 0xfe, 0x1b, 0x58, 0xdb, 0x72, 0x57, 0xcf, 0xc5, 0x60, 0x3e, 0x35,
	0x96, 0x59, 0x80, 0xf5, 0xee, 0x9e, 0xc3, 0xbe, 0x0b, 0xe7, 0xa5, 0x68, 0x50, 0x1c, 0xd1, 0x39,
	0x47, 0x83, 0xe7, 0xf5, 0xa8, 0x14, 0xa3, 0xdf, 0x81, 0xd3, 0xb9, 0x36, 0xa9, 0x00, 0xca, 0x1b,
	0x63, 0xcd, 0x92, 0x29, 0xad, 0x8d, 0xb1, 0x96, 0xa9, 0x3c, 0x0f, 0xe1, 0x34, 0x2b, 0x8e, 0x4c,
	0xfc, 0x9c, 0x1a, 0xf1, 0xc2, 0xe4, 0xd6, 0x73, 0x6a, 0xa8, 0x8a, 0x73, 0xb7, 0xe1, 0x6c, 0x38,
	0x31, 0xfe, 0xf0, 0x05, 0xb5, 0x26, 0x27, 0x61, 0xb4, 0x24, 0xc6, 0x94, 0x18, 0xc6, 0x31, 0x5c,
	0xe8, 0xcc, 0x0a, 0x25, 0xfc, 0x6a, 0x66, 0xd6, 0x4f, 0x46, 0x6c, 0xbd, 0xaa, 0x68, 0x3e, 0xab,
	0xc4, 0x5d, 0x38, 0x85, 0xc4, 0x1f, 0x8b, 0x28, 0xac, 0x16, 0x75, 0x3e, 0xa1, 0x75, 0x66, 0x42,
	0xe8, 0x60, 0x6b, 0x57, 0x8e, 0xe3, 0x78, 0x1c, 0x5e, 0xcd, 0xfc, 0x33, 0xe1, 0x7d, 0xf5, 0x20,
	0x8e, 0x67, 0xb8, 0x2a, 0xe7, 0xb7, 0x11, 0x6a, 0x37, 0x37, 0xa9, 0xd6, 0x33, 0xf1, 0x6b, 0x11,
	0xe3, 0x23, 0x38, 0x69, 0x64, 0x4a, 0x83, 0xe3, 0xe6, 0x72, 0x9e, 0x2e, 0x8e, 0x7c, 0x2b, 0xf6,
	0x75, 0x66, 0x04, 0xa5, 0xd5, 0x8c, 0x29, 0x85, 0xe5, 0xf9, 0xcb, 0x77, 0x60, 0x7d, 0x30, 0x16,
	0x97, 0x56, 0xcd, 0xd9, 0xb1, 0x88, 0xb5, 0xf9, 0xdc, 0x5b, 0x50, 0x0f, 0xcd, 0x40, 0xb4, 0x27,
	0x32, 0x73, 0xa8, 0xb8, 0xc6, 0x5b, 0xb0, 0x1e, 0x8d, 0x85, 0x2e, 0xdd, 0xd0, 0xde, 0xa5, 0x72,
	0x29, 0x9a, 0xc0, 0xe3, 0xe1, 0x4e, 0x1f, 0xc2, 0xe9, 0xa8, 0x38, 0xf8, 0xec, 0x73, 0xc5, 0xa5,
	0xc9, 0x64, 0xbd, 0x4a, 0x26, 0x84, 0xae, 0xfd, 0x08, 0xd6, 0xf3, 0x2c, 0x97, 0xe7, 0x79, 0x3c,
	0xb2, 0x96, 0x93, 0xe3, 0x1c, 0x96, 0x47, 0xd6, 0x1b, 0x50, 0xc7, 0xec, 0x2a, 0x74, 0x6a, 0x6e,
	0xe8, 0xe4, 0xc1, 0x54, 0x47, 0x56, 0xdd, 0x44, 0x4f, 0x8a, 0x2a, 0x34, 0xaa, 0xe2, 0x80, 0x69,
	0xb4, 0xd4, 0x02, 0xb1, 0x24, 0xc8, 0x06, 0x48, 0x55, 0x33, 0x33, 0x1b, 0x37, 0x35, 0x9f, 0xef,
	0x3e, 0x9c, 0x0c, 0x8a, 0x62, 0x98, 0x9e, 0x33, 0x72, 0xe7, 0x13, 0x35, 0xeb, 0x2f, 0x8c, 0x7e,
	0x2a, 0xb6, 0x33, 0x33, 0x5e, 0xe9, 0x89, 0xb4, 0xa3, 0x1a, 0x98, 0x6f, 0xc5, 0xb7, 0x14, 0x6d,
	0xcd, 0xc0, 0x80, 0x39, 0x0a, 0xa9, 0xdd, 0x22, 0x83, 0xf3, 0x01, 0xac, 0x85, 0xf9, 0x80, 0x82,
	0x67, 0xf4, 0x6c, 0xcb, 0x26, 0xe4, 0x2b, 0x7d, 0x13, 0x1a, 0xb4, 0xa8, 0x95, 0x03, 0x88, 0x09,
	0x52, 0x99, 0x4e, 0x7f, 0x0d, 0x30, 0x9c, 0x29, 0x46, 0x11, 0x5d, 0x35, 0x2a, 0xb9, 0x5b, 0x20,
	0x82, 0x6f, 0x82, 0x0c, 0x01, 0x84, 0xd8, 0x6a, 0xfc, 0xd2, 0x30, 0xa4, 0x79, 0xfc, 0xef, 0xc2,
	0xe9, 0x38, 0x13, 0x79, 0x74, 0x27, 0x0c, 0x86, 0x98, 0x57, 0x8d, 0x63, 0x36, 0x30, 0xe9, 0xb8,
	0xdc, 0xa2, 0x04, 0x90, 0x34, 0x20, 0x69, 0xae, 0x3f, 0xa9, 0xec, 0x91, 0xa2, 0x6c, 0x02, 0xec,
	0xa7, 0x11, 0x3e, 0x55, 0x33, 0xd3, 0xa0, 0x9f, 0xe3, 0xf2, 0x5a, 0x1d, 0x25, 0x2a, 0x95, 0x63,
	0xba, 0xe4, 0xf8, 0x06, 0x34, 0xfa, 0xc1, 0x3d, 0xfe, 0x38, 0x9e, 0x0f, 0xfd, 0x3b, 0xb0, 0x9e,
	0x8c, 0x45, 0x12, 0x55, 0x2c, 0x60, 0x2c, 0xc6, 0xe8, 0x24, 0x0a, 0x98, 0x99, 0x27, 0x50, 0xc0,
	0x44, 0x79, 0x07, 0x1a, 0x9d, 0x4c, 0x50, 0x3f, 0x75, 0xac, 0xcf, 0x84, 0xfa, 0xcb, 0x57, 0xa6,
	0xf6, 0x96, 0xf1, 0x10, 0x99, 0x2a, 0x77, 0x2e, 0x41, 0xef, 0x2d, 0x63, 0x39, 0x94, 0x36, 0x22,
	0x17, 0xd8, 0x72, 0x82, 0x36, 0x22, 0x87, 0xb5, 0x09, 0xcd, 0x3e, 0x73, 0xfd, 0x14, 0x3a, 0x83,
	0xc4, 0x6f, 0x43, 0x13, 0x2b, 0x4b, 0x43, 0x3a, 0xe6, 0xf0, 0xd7, 0x94, 0x07, 0x4e, 0x8d, 0x70,
	0x43, 0x2c, 0xb1, 0x7c, 0xe0, 0x48, 0x3d, 0xfb, 0xb3, 0x09, 0xba, 0x97, 0x63, 0x91, 0x23, 0xdf,
	0x85, 0x5a, 0x62, 0x86, 0x70, 0x4c, 0x19, 0x9a, 0x82, 0xe9, 0xd1, 0x31, 0x83, 0x38, 0xaa, 0xf6,
	0xa6, 0xb1, 0x6f, 0x27, 0xb4, 0x37, 0x45, 0x78, 0x0d, 0x2a, 0x89, 0x8a, 0x6c, 0xbb, 0x9a, 0x56,
	0x83, 0x80, 0x82, 0x19, 0x17, 0x8d, 0x45, 0x75, 0xdc, 0x30, 0x5c, 0x36, 0x4e, 0x9d, 0x04, 0x6a,
	0x47, 0xc8, 0x04, 0x61, 0x3c, 0x61, 0x08, 0x76, 0x0a, 0xa8, 0x79, 0x57, 0x06, 0xd3, 0x81, 0x8d,
	0x4c, 0x76, 0x33, 0xea, 0x60, 0x2b, 0x57, 0x8a, 0x91, 0xa6, 0x35, 0x0c, 0x45, 0xf9, 0xf2, 0x4d,
	0x42, 0x8a, 0xe4, 0x9b, 0x84, 0xbb, 0x54, 0xbe, 0x49, 0x88, 0x99, 0x6a, 0xc6, 0x32, 0x51, 0xf2,
	0x26, 0x6a, 0xc6, 0x32, 0x58, 0xd7, 0xe1, 0x64, 0x52, 0x14, 0x63, 0xef, 0x5c, 0x76, 0x05, 0x67,
	0x12, 0xc7, 0xf5, 0x36, 0x6b, 0xbd, 0x7c, 0xc8, 0x3c, 0x35, 0xd9, 0xf2, 0xb1, 0xf4, 0xf4, 0x64,
	0x1b, 0x0b, 0xb2, 0x77, 0x37, 0xdb, 0x0d, 0x15, 0x72, 0xae, 0x55, 0x50, 0x90, 0x4c, 0xd3, 0x44,
	0x2d, 0x0a, 0x55, 0xb7, 0x05, 0x75, 0xcf, 0x8c, 0x2c, 0x77, 0x42, 0xcb, 0x8f, 0x29, 0x30, 0xdf,
	0x91, 0x77, 0xa0, 0xd1, 0xcd, 0xc4, 0x90, 0x3b, 0x99, 0xd9, 0x02, 0x26, 0xe4, 0xd2, 0x1c, 0xd0,
	0x8c, 0x13, 0x97, 0xe5, 0x80, 0x46, 0x4a, 0x3e, 0xf7, 0xb7, 0xc1, 0x92, 0x2a, 0x06, 0x33, 0x72,
	0x5c, 0x6e, 0xf0, 0x4e, 0xea, 0x33, 0xb6, 0x89, 0xa4, 0xa4, 0x52, 0x23, 0x6a, 0xdc, 0x04, 0xa9,
	0xd4, 0xc0, 0xf8, 0xa1, 0x64, 0x82, 0x2a, 0x76, 0x9a, 0x0e, 0xfa, 0x26, 0x8f, 0x45, 0x93, 0x22,
	0xca, 0xe9, 0x63, 0xd3, 0xa4, 0xa0, 0x71, 0x9f, 0x80, 0xd5, 0x29, 0x88, 0xef, 0x96, 0x51, 0x83,
	0x98, 0x49, 0xad, 0xb3, 0x19, 0x75, 0x48, 0x26, 0xd7, 0x75, 0x38, 0x19, 0x15, 0xc5, 0x4d, 0x53,
	0xb3, 0xb2, 0x28, 0xa8, 0x5a, 0x91, 0x36, 0xb1, 0x30, 0xfc, 0xd9, 0xf9, 0x8c, 0x7a, 0x60, 0x46,
	0x29, 0x6f, 0xa2, 0xe9, 0xad, 0xf4, 0x7c, 0xbd, 0x66, 0xc8, 0x57, 0x08, 0xd1, 0x9c, 0x2c, 0xf5,
	0x8e, 0x7d, 0x03, 0xd6, 0xf6, 0xf3, 0xde, 0xa5, 0xcf, 0xa4, 0x5b, 0x74, 0x26, 0x41, 0x2f, 0x86,
	0x31, 0x7f, 0xd4, 0xea, 0xec, 0x90, 0x77, 0x18, 0x3d, 0xe1, 0xec, 0x90, 0x47, 0x7b, 0x03, 0x1a,
	0xdd, 0xc0, 0x00, 0xce, 0xd8, 0x60, 0x6e, 0xc0, 0x5a, 0x37, 0xef, 0x07, 0x5a, 0xb5, 0x39, 0xef,
	0xd5, 0x59, 0xb7, 0x79, 0xcc, 0x73, 0xb4, 0x9a, 0xc9, 0x53, 0x15, 0x10, 0x27, 0xd3, 0x83, 0xa0,
	0x81, 0xf4, 0x3d, 0x38, 0xd1, 0x29, 0x70, 0x59, 0xdc, 0xca, 0x1c, 0x2f, 0x33, 0x69, 0xf9, 0x2e,
	0xe8, 0x12, 0xb2, 0x7e, 0x8b, 0xb3, 0x25, 0x64, 0xd2, 0x66, 0x97, 0x80, 0xde, 0x62, 0x27, 0x94,
	0x20, 0xd2, 0xf2, 0x25, 0xdc, 0x85, 0x13, 0x51, 0x81, 0x53, 0xdf, 0xd6, 0x64, 0x6f, 0xc2, 0x9a,
	0x83, 0x15, 0x39, 0x03, 0x7e, 0x0d, 0x2a, 0x91, 0x72, 0xe0, 0xbb, 0x9a, 0xf3, 0xd8, 0x9b, 0xaf,
	0x5a, 0xb1, 0x02, 0xc3, 0xcd, 0xed, 0x04, 0x56, 0x60, 0x60, 0x7c, 0x00, 0x6b, 0x9d, 0xbc, 0x73,
	0xdc, 0x33, 0xb9, 0x13, 0xbd, 0x4a, 0x28, 0x98, 0x32, 0x49, 0xde, 0xbb, 0xed, 0x19, 0xcd, 0xf3,
	0xb2, 0x09, 0x7a, 0xca, 0x8c, 0xf9, 0xc3, 0x7d, 0x07, 0xd6, 0xfb, 0x6c, 0xc8, 0x65, 0x98, 0x04,
	0xe9, 0xc6, 0x56, 0xad, 0x32, 0x6d, 0x9c, 0x32, 0xe9, 0x0c, 0xa0, 0xfd, 0xd9, 0x4e, 0xd2, 0xcc,
	0xaa, 0xf4, 0x77, 0xa1, 0xb6, 0x6f, 0x78, 0x81, 0xb5, 0xb2, 0xcb, 0x11, 0x57, 0xa2, 0x95, 0x5d,
	0x89, 0x88, 0x47, 0x72, 0xb6, 0xf2, 0xef, 0xba, 0x9e, 0xcd, 0xf5, 0xc5, 0xed, 0xfb, 0x05, 0xc7,
	0xb9, 0x30, 0xeb, 0x1d, 0x75, 0xa2, 0x3c, 0x98, 0xc1, 0x52, 0x8b, 0x3d, 0xef, 0x05, 0x75, 0xc2,
	0x62, 0xcf, 0xa3, 0x7d, 0x17, 0x9a, 0xa3, 0xac, 0x4b, 0x58, 0x75, 0xfa, 0xc8, 0x7a, 0x8a, 0xd5,
	0xd5, 0xe7, 0x1c, 0xc8, 0x7e, 0x90, 0x7a, 0x6b, 0xd2, 0x8e, 0x52, 0xd5, 0x50, 0xe6, 0x3d, 0xa8,
	0x8e, 0xef, 0x7d, 0x96, 0xce, 0x8b, 0xcc, 0x2b, 0x0e, 0x7c, 0x3e, 0x77, 0x6e, 0x25, 0xb9, 0xe4,
	0x5c, 0xad, 0x4e, 0xa0, 0x5a, 0x0e, 0x4b, 0x51, 0x2d, 0xef, 0xf5, 0x74, 0x02, 0xd5, 0xf2, 0x68,
	0x37, 0xe0, 0x54, 0x52, 0xe8, 0x35, 0xf5, 0x7c, 0x66, 0xe7, 0xce, 0xa5, 0x8e, 0x4b, 0x93, 0x6a,
	0xe8, 0xb2, 0x6e, 0x53, 0x27, 0x0e, 0x5d, 0x16, 0xed, 0x73, 0x38, 0xd3, 0x99, 0x10, 0xd2, 0xf2,
	0xf9, 0xcc, 0xc6, 0x39, 0x96, 0x9e, 0x6a, 0x31, 0x27, 0xe4, 0xbf, 0x0f, 0x27, 0x3b, 0x45, 0x71,
	0x21, 0xcf, 0x15, 0x94, 0xab, 0x12, 0xb5, 0x8e, 0xa0, 0x30, 0xa2, 0xe4, 0x2d, 0x58, 0xef, 0x8c,
	0x05, 0x0f, 0xdc, 0xc8, 0x14, 0x67, 0xa4, 0x68, 0x65, 0xcf, 0x78, 0xc0, 0xc1, 0x3d, 0x75, 0xcf,
	0x97, 0x8f, 0xda, 0x77, 0xbe, 0xa0, 0x30, 0x9d, 0xda, 0x3a, 0x5f, 0x50, 0x60, 0x9a, 0x57, 0xf7,
	0x37, 0x17, 0xfe, 0xee, 0x5c, 0x41, 0x99, 0x13, 0xfa, 0x9b, 0xcb, 0xa9, 0x07, 0x67, 0x3c, 0x72,
	0x5c, 0x76, 0x70, 0xc6, 0xd2, 0x73, 0x83, 0x33, 0x9e, 0xff, 0x2e, 0x9c, 0xe8, 0x14, 0x84, 0x60,
	0x6b, 0xe5, 0x8a, 0x35, 0xd2, 0xf4, 0x4e, 0x51, 0x14, 0xba, 0xed, 0x1a, 0xac, 0x76, 0x72, 0x71,
	0xcc, 0x4e, 0xe7, 0x8a, 0x92, 0x70, 0x3d, 0x13, 0xf3, 0x71, 0xcf, 0x8c, 0x16, 0x99, 0x01, 0xc0,
	0xf2, 0x2d, 0x32, 0xd2, 0xc6, 0x5a, 0x64, 0xe6, 0xd3, 0x43, 0x9c, 0x8f, 0x9f, 0x75, 0x3e, 0x57,
	0x60, 0x26, 0x35, 0x37, 0xc4, 0xf9, 0xbc, 0x46, 0xa1, 0xd9, 0x10, 0x54, 0xf9, 0x42, 0x33, 0xa9,
	0x63, 0x85, 0x66, 0xf3, 0xea, 0x8e, 0x67, 0xe3, 0x38, 0x65, 0x3b, 0x9e, 0x49, 0xcb, 0x75, 0x3c,
	0x9b, 0x4f, 0x4f, 0x9a, 0xf1, 0xe0, 0x3f, 0xcf, 0xe7, 0x8a, 0xcc, 0xa5, 0xe7, 0x26, 0xcd, 0x78,
	0x7e, 0xbd, 0xfe, 0xcc, 0x38, 0x3a, 0x1b, 0xb9, 0x42, 0x75, 0x4a, 0x6e, 0xfd, 0x99, 0x79, 0x6e,
	0xc0, 0x5a, 0x27, 0x1f, 0xaf, 0xe9, 0x4c, 0xae, 0x1c, 0x95, 0x90, 0xaa, 0x40, 0xf2, 0x39, 0x0c,
	0xc2, 0x99, 0x8b, 0x3b, 0x4f, 0x38, 0x93, 0x25, 0xe4, 0x09, 0x67, 0xe6, 0x7b, 0x55, 0x5e, 0xb5,
	0xa2, 0x1b, 0xe9, 0x1c, 0xfb, 0xac, 0x29, 0xf6, 0x29, 0xd2, 0xde, 0x87, 0xd5, 0x61, 0xce, 0xe1,
	0xf3, 0xe9, 0xcc, 0xa5, 0xa2, 0x86, 0x4f, 0x12, 0x92, 0x0c, 0x67, 0xcc, 0x13, 0x84, 0x24, 0x03,
	0xe3, 0x03, 0x21, 0xe8, 0xe4, 0x5c, 0x38, 0x9f, 0xc9, 0x6c, 0x11, 0x69, 0xc2, 0x24, 0xc5, 0x4d,
	0xea, 0x56, 0x79, 0x82, 0x22, 0x24, 0x45, 0x78, 0x07, 0x1a, 0xfd, 0x8c, 0x23, 0xe6, 0x93, 0x5a,
	0x0f, 0x60, 0x40, 0xf3, 0x15, 0xed, 0x43, 0xab, 0x37, 0xd9, 0x7f, 0xf2, 0x8b, 0x99, 0x23, 0x74,
	0x11, 0x4a, 0xeb, 0xc5, 0xcc, 0x49, 0xba, 0xb0, 0x94, 0x18, 0x2e, 0xf4, 0x66, 0xf9, 0x28, 0x7e,
	0x75, 0x6a, 0x4d, 0x29, 0xa2, 0xbe, 0x0f, 0x9a, 0xe9, 0xf5, 0xf8, 0x21, 0x9c, 0xe6, 0xc5, 0x8e,
	0x85, 0xd5, 0xc5, 0x40, 0xb1, 0xdf, 0x61, 0x7d, 0x31, 0x30, 0xc1, 0x2d, 0xf1, 0x7b, 0x70, 0x9a,
	0xd4, 0x03, 0x63, 0x29, 0xd3, 0x8f, 0x4a, 0x13, 0xa9, 0x60, 0xf8, 0xef, 0x9d, 0x4e, 0x85, 0x14,
	0x71, 0x06, 0x15, 0x8c, 0x12, 0x8f, 0xe0, 0xc5, 0xde, 0x4c, 0x07, 0xbc, 0x97, 0xa6, 0x56, 0x6b,
	0x60, 0xb6, 0x2e, 0x4d, 0xad, 0xd7, 0x2c, 0x73, 0x07, 0x4e, 0x47, 0xc5, 0xee, 0x76, 0xf5, 0xbd,
	0x4c, 0x61, 0xf2, 0xb8, 0x9e, 0xf7, 0x54, 0x14, 0x07, 0xa3, 0x27, 0xa5, 0xf6, 0x01, 0x3c, 0xf7,
	0xe5, 0x54, 0x97, 0xbb, 0x2f, 0x1b, 0xf6, 0x01, 0x13, 0xb1, 0x5a, 0x2f, 0x1b, 0x86, 0x14, 0x93,
	0xcb, 0xfa, 0x2e, 0x3c, 0x5f, 0x3c, 0x25, 0x34, 0xc6, 0xf4, 0xc6, 0xbe, 0x07, 0xcd, 0x28, 0xeb,
	0xb7, 0x57, 0xc9, 0xe1, 0x59, 0x77, 0xbe, 0xf9, 0x7c, 0x13, 0x07, 0xd7, 0x74, 0x4e, 0x3b, 0x7d,
	0x70, 0x0d, 0xcc, 0x19, 0x83, 0x6b, 0x96, 0xf9, 0x15, 0xd8, 0xbd, 0xd9, 0x3e, 0x7f, 0x2f, 0xcf,
	0xac, 0x59, 0xab, 0x27, 0x2f, 0xcf, 0xac, 0x5a, 0x97, 0x7a, 0x1b, 0xce, 0x48, 0x4f, 0xea, 0x63,
	0x53, 0xe2, 0x79, 0x7d, 0x77, 0x52, 0xe8, 0x18, 0x37, 0x4f, 0xbe, 0x4f, 0xe0, 0x6c, 0xe2, 0x3f,
	0xa3, 0xb2, 0xf4, 0x95, 0x96, 0xe9, 0x58, 0x77, 0xd2, 0x95, 0x96, 0x89, 0x73, 0x53, 0xaa, 0x85,
	0x8b, 0xdc, 0xe5, 0xe6, 0xf2, 0xb7, 0x26, 0x7b, 0x69, 0x15, 0x42, 0x2c, 0x2f, 0x72, 0x76, 0x7a,
	0x2e, 0x77, 0xa0, 0x32, 0x13, 0xb5, 0x10, 0x5b, 0xe8, 0x26, 0xf5, 0x3a, 0x9c, 0xec, 0x14, 0x39,
	0x32, 0x3d, 0x67, 0x5c, 0xf0, 0xe5, 0x13, 0xf3, 0x54, 0xd9, 0x81, 0x8d, 0x7c, 0x19, 0xda, 0x45,
	0xe9, 0x93, 0x94, 0xf3, 0x39, 0x9c, 0x09, 0x27, 0x78, 0x3a, 0x7d, 0x5e, 0xdf, 0x4d, 0x14, 0xa6,
	0x6b, 0xd9, 0x68, 0x92, 0xa7, 0xd4, 0x3d, 0xa9, 0xd5, 0x1c, 0xf3, 0x69, 0x7a, 0xde, 0x9c, 0xbd,
	0xf9, 0x54, 0x2d, 0x1a, 0x16, 0xfb, 0x43, 0xfd, 0x11, 0xd8, 0xfd, 0xd9, 0xce, 0x4d, 0x2f, 0x1b,
	0x1b, 0xf4, 0x74, 0xd4, 0x3c, 0x3d, 0xda, 0xd2, 0x70, 0xa7, 0xd0, 0x1b, 0xe9, 0x05, 0xb3, 0xe1,
	0x45, 0x18, 0xda, 0x84, 0x63, 0xb2, 0x47, 0xd3, 0xef, 0xc1, 0x89, 0x7e, 0x81, 0x2f, 0xcf, 0x96,
	0xd1, 0xe2, 0x5c, 0x5a, 0xae, 0x89, 0x5b, 0xff, 0x64, 0x11, 0x2a, 0x3b, 0x2c, 0x8a, 0x1f, 0x88,
	0xc5, 0x74, 0x05, 0x2a, 0x4c, 0xbd, 0x85, 0x54, 0x0a, 0x29, 0xf5, 0x38, 0x52, 0x2b, 0x5d, 0xf4,
	0x6b, 0xc9, 0x2b, 0x50, 0xe5, 0xfa, 0xf1, 0xdc, 0x04, 0xb9, 0x27, 0x7d, 0x5d, 0x77, 0x05, 0x2a,
	0x91, 0x7a, 0x9b, 0xa6, 0x95, 0x5d, 0x12, 0x90, 0x2a, 0x74, 0x14, 0xc6, 0x26, 0x34, 0x7b, 0xf8,
	0x74, 0x41, 0x43, 0x66, 0xde, 0x69, 0xc6, 0xea, 0xb1, 0xcc, 0x1c, 0xe8, 0xef, 0x42, 0xd3, 0xf5,
	0x47, 0x49, 0x6c, 0x3c, 0x18, 0x4b, 0xf5, 0x6f, 0xe9, 0x7b, 0xb5, 0x82, 0xcb, 0x4c, 0xcc, 0x96,
	0x79, 0x27, 0xa6, 0xf5, 0x69, 0x1a, 0x36, 0xae, 0xce, 0x5a, 0xc5, 0x17, 0x9c, 0xe1, 0x50, 0xbb,
	0xd6, 0x9c, 0xde, 0xbc, 0xf7, 0x61, 0x75, 0x3f, 0xf7, 0x12, 0x4c, 0x5b, 0xa4, 0x66, 0xe1, 0xe3,
	0xea, 0x0a, 0x0b, 0x5b, 0x28, 0xd2, 0x8c, 0xb8, 0x51, 0x79, 0x85, 0x9b, 0x7a, 0x0d, 0x36, 0x49,
	0xdb, 0x91, 0xb7, 0xe8, 0x9e, 0xa0, 0xed, 0xc8, 0xa3, 0xbd, 0x0d, 0xeb, 0x9d, 0x01, 0xef, 0x1c,
	0xdc, 0xe3, 0xf1, 0x51, 0x10, 0x1e, 0xdc, 0xe0, 0x1e, 0x3b, 0x9e, 0xde, 0xd5, 0xeb, 0x6b, 0x7f,
	0xff, 0x4f, 0x9f, 0x2f, 0xfd, 0x57, 0x7f, 0xfa, 0x7c, 0xe9, 0x7f, 0xfc, 0xd3, 0xe7, 0x4b, 0x7f,
	0xe3, 0xcf, 0x9e, 0xff, 0x4b, 0xfb, 0xcb, 0xa3, 0x30, 0x88, 0x83, 0xab, 0xff, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8b, 0x1f, 0x15, 0x51, 0x18, 0x0f, 0x01, 0x00,
}

func (m *NotifyRoomGameStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRoomGameStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRoomGameStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectToken) > 0 {
		i -= len(m.ConnectToken)
		copy(dAtA[i:], m.ConnectToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ConnectToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameUrl) > 0 {
		i -= len(m.GameUrl)
		copy(dAtA[i:], m.GameUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyMatchGameStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyMatchGameStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyMatchGameStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MatchModeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MatchModeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectToken) > 0 {
		i -= len(m.ConnectToken)
		copy(dAtA[i:], m.ConnectToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ConnectToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameUrl) > 0 {
		i -= len(m.GameUrl)
		copy(dAtA[i:], m.GameUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyRoomPlayerReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRoomPlayerReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRoomPlayerReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyRoomPlayerUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRoomPlayerUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRoomPlayerUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RobotCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RobotCount))
		i--
		dAtA[i] = 0x20
	}
	if m.OwnerId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.OwnerId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RemoveList) > 0 {
		dAtA2 := make([]byte, len(m.RemoveList)*10)
		var j1 int
		for _, num := range m.RemoveList {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLiqi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UpdateList) > 0 {
		for iNdEx := len(m.UpdateList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyRoomKickOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRoomKickOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRoomKickOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NotifyMatchTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyMatchTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyMatchTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NotifyFriendStateChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyFriendStateChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyFriendStateChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActiveState != nil {
		{
			size, err := m.ActiveState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyFriendViewChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyFriendViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyFriendViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyFriendChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyFriendChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyFriendChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Friend != nil {
		{
			size, err := m.Friend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyNewFriendApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyNewFriendApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyNewFriendApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RemovedId))
		i--
		dAtA[i] = 0x18
	}
	if m.ApplyTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ApplyTime))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyClientMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyClientMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyAccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyAnotherLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAnotherLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAnotherLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NotifyAccountLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAccountLogout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAccountLogout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NotifyAnnouncementUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAnnouncementUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAnnouncementUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sort) > 0 {
		dAtA9 := make([]byte, len(m.Sort)*10)
		var j8 int
		for _, num := range m.Sort {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintLiqi(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Announcements) > 0 {
		for iNdEx := len(m.Announcements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Announcements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyNewMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyNewMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyNewMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mail != nil {
		{
			size, err := m.Mail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyDeleteMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyDeleteMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyDeleteMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailIdList) > 0 {
		dAtA12 := make([]byte, len(m.MailIdList)*10)
		var j11 int
		for _, num := range m.MailIdList {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintLiqi(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyReviveCoinUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyReviveCoinUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyReviveCoinUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasGained {
		i--
		if m.HasGained {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyDailyTaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyDailyTaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyDailyTaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefreshCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RefreshCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxDailyTaskCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MaxDailyTaskCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyActivityTaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyActivityTaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyActivityTaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyNewComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyNewComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyNewComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NotifyRollingNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRollingNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRollingNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Notice != nil {
		{
			size, err := m.Notice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGiftSendRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGiftSendRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGiftSendRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NotifyShopUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyShopUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyShopUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopInfo != nil {
		{
			size, err := m.ShopInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyVipLevelChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyVipLevelChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyVipLevelChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecordCollectLimit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RecordCollectLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.BuddyBonus != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuddyBonus))))
		i--
		dAtA[i] = 0x2d
	}
	if m.ZhpCostRefreshLimit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ZhpCostRefreshLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.ZhpFreeRefreshLimit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ZhpFreeRefreshLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.FriendMaxCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FriendMaxCount))
		i--
		dAtA[i] = 0x10
	}
	if m.GiftLimit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GiftLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyServerSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyServerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyServerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyPayResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyPayResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyPayResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.PayResult != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PayResult))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyCustomContestAccountMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyCustomContestAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyCustomContestAccountMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyCustomContestSystemMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyCustomContestSystemMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyCustomContestSystemMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameEnd != nil {
		{
			size, err := m.GameEnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GameStart != nil {
		{
			size, err := m.GameStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyCustomContestState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyCustomContestState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyCustomContestState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyActivityChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyActivityChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyActivityChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndActivities) > 0 {
		dAtA19 := make([]byte, len(m.EndActivities)*10)
		var j18 int
		for _, num := range m.EndActivities {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintLiqi(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewActivities) > 0 {
		for iNdEx := len(m.NewActivities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewActivities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JsonParam) > 0 {
		i -= len(m.JsonParam)
		copy(dAtA[i:], m.JsonParam)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.JsonParam)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StrParams) > 0 {
		for iNdEx := len(m.StrParams) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StrParams[iNdEx])
			copy(dAtA[i:], m.StrParams[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.StrParams[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.U32Params) > 0 {
		dAtA21 := make([]byte, len(m.U32Params)*10)
		var j20 int
		for _, num := range m.U32Params {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintLiqi(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Wrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Family) > 0 {
		i -= len(m.Family)
		copy(dAtA[i:], m.Family)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Family)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ResCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AntiAddiction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AntiAddiction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AntiAddiction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnlineDuration != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.OnlineDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Recent_10GameResult) > 0 {
		for iNdEx := len(m.Recent_10GameResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recent_10GameResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Recent_10HuSummary != nil {
		{
			size, err := m.Recent_10HuSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Recent_20HuSummary != nil {
		{
			size, err := m.Recent_20HuSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.HighestHu != nil {
		{
			size, err := m.HighestHu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RecentHu != nil {
		{
			size, err := m.RecentHu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RecentRound != nil {
		{
			size, err := m.RecentRound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalPositionCounts) > 0 {
		dAtA31 := make([]byte, len(m.FinalPositionCounts)*10)
		var j30 int
		for _, num := range m.FinalPositionCounts {
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintLiqi(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic_RoundSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic_RoundSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic_RoundSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FangchongCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FangchongCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ZimoCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ZimoCount))
		i--
		dAtA[i] = 0x18
	}
	if m.RongCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RongCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic_HuSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic_HuSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic_HuSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalFan != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalFan))
		i--
		dAtA[i] = 0x18
	}
	if m.DoraRoundCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.DoraRoundCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic_HighestHuRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic_HighestHuRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic_HighestHuRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TitleId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TitleId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Hupai) > 0 {
		i -= len(m.Hupai)
		copy(dAtA[i:], m.Hupai)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hupai)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Ming) > 0 {
		for iNdEx := len(m.Ming) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ming[iNdEx])
			copy(dAtA[i:], m.Ming[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Ming[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Hands) > 0 {
		for iNdEx := len(m.Hands) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hands[iNdEx])
			copy(dAtA[i:], m.Hands[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hands[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Doranum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Doranum))
		i--
		dAtA[i] = 0x10
	}
	if m.Fanshu != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Fanshu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic_Liqi20Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic_Liqi20Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic_Liqi20Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AverageHuPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AverageHuPoint))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalLidoraCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalLidoraCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic_LiQi10Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic_LiQi10Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic_LiQi10Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalFanshu != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalFanshu))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalXuanshang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalXuanshang))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountMahjongStatistic_GameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMahjongStatistic_GameResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMahjongStatistic_GameResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FinalPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FinalPoint))
		i--
		dAtA[i] = 0x10
	}
	if m.Rank != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountStatisticData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStatisticData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountStatisticData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Statistic != nil {
		{
			size, err := m.Statistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GameCategory != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GameCategory))
		i--
		dAtA[i] = 0x10
	}
	if m.MahjongCategory != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MahjongCategory))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Level3 != nil {
		{
			size, err := m.Level3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.PlatformDiamond) > 0 {
		for iNdEx := len(m.PlatformDiamond) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlatformDiamond[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.PhoneVerify != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PhoneVerify))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Birthday != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x78
	}
	if m.Vip != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Vip))
		i--
		dAtA[i] = 0x70
	}
	if m.AvatarId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x68
	}
	if m.Diamond != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x60
	}
	if m.Gold != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x58
	}
	if m.EmailVerify != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EmailVerify))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x42
	}
	if m.Title != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x38
	}
	if m.AntiAddiction != nil {
		{
			size, err := m.AntiAddiction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RoomId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x28
	}
	if m.LogoutTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LogoutTime))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LoginTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Account_PlatformDiamond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account_PlatformDiamond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account_PlatformDiamond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountOwnerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountOwnerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountOwnerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UnlockCharacters) > 0 {
		dAtA37 := make([]byte, len(m.UnlockCharacters)*10)
		var j36 int
		for _, num := range m.UnlockCharacters {
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		i -= j36
		copy(dAtA[i:], dAtA37[:j36])
		i = encodeVarintLiqi(dAtA, i, uint64(j36))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityFlipTask != nil {
		{
			size, err := m.ActivityFlipTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ActivityTask != nil {
		{
			size, err := m.ActivityTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NewRechargedList) > 0 {
		dAtA41 := make([]byte, len(m.NewRechargedList)*10)
		var j40 int
		for _, num := range m.NewRechargedList {
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintLiqi(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0x42
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DailyTask != nil {
		{
			size, err := m.DailyTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Shilian != nil {
		{
			size, err := m.Shilian.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Achievement != nil {
		{
			size, err := m.Achievement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Bag != nil {
		{
			size, err := m.Bag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Character != nil {
		{
			size, err := m.Character.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Numerical) > 0 {
		for iNdEx := len(m.Numerical) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Numerical[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_NumericalUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_NumericalUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_NumericalUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Final != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Final))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_CharacterUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_CharacterUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_CharacterUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Skins) > 0 {
		dAtA49 := make([]byte, len(m.Skins)*10)
		var j48 int
		for _, num := range m.Skins {
			for num >= 1<<7 {
				dAtA49[j48] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j48++
			}
			dAtA49[j48] = uint8(num)
			j48++
		}
		i -= j48
		copy(dAtA[i:], dAtA49[:j48])
		i = encodeVarintLiqi(dAtA, i, uint64(j48))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Characters) > 0 {
		for iNdEx := len(m.Characters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Characters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_AchievementUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_AchievementUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_AchievementUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_DailyTaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_DailyTaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_DailyTaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_TitleUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_TitleUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_TitleUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewTitles) > 0 {
		dAtA51 := make([]byte, len(m.NewTitles)*10)
		var j50 int
		for _, num := range m.NewTitles {
			for num >= 1<<7 {
				dAtA51[j50] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j50++
			}
			dAtA51[j50] = uint8(num)
			j50++
		}
		i -= j50
		copy(dAtA[i:], dAtA51[:j50])
		i = encodeVarintLiqi(dAtA, i, uint64(j50))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_ActivityTaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_ActivityTaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_ActivityTaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_ActivityFlipTaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_ActivityFlipTaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_ActivityFlipTaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestUid != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ContestUid))
		i--
		dAtA[i] = 0x18
	}
	if m.ModeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ModeId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountPlayingGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPlayingGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountPlayingGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Category != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountCacheView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountCacheView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountCacheView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x70
	}
	if m.Level3 != nil {
		{
			size, err := m.Level3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.PlayingGame != nil {
		{
			size, err := m.PlayingGame.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Vip != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Vip))
		i--
		dAtA[i] = 0x50
	}
	if m.AvatarId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x48
	}
	if m.Title != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x40
	}
	if m.RoomId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x38
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.LogoutTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LogoutTime))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LoginTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x10
	}
	if m.CacheVersion != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CacheVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerBaseView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBaseView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerBaseView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x38
	}
	if m.Level3 != nil {
		{
			size, err := m.Level3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if m.Title != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x18
	}
	if m.AvatarId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerGameView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerGameView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerGameView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x40
	}
	if m.Level3 != nil {
		{
			size, err := m.Level3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Character != nil {
		{
			size, err := m.Character.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if m.Title != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x18
	}
	if m.AvatarId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TestingEnvironment != nil {
		{
			size, err := m.TestingEnvironment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DetailRule != nil {
		{
			size, err := m.DetailRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Extendinfo) > 0 {
		i -= len(m.Extendinfo)
		copy(dAtA[i:], m.Extendinfo)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Extendinfo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ai {
		i--
		if m.Ai {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Mode != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameTestingEnvironmentSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameTestingEnvironmentSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameTestingEnvironmentSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Paixing != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Paixing))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameDetailRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameDetailRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameDetailRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dora3Mode != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Dora3Mode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.GuyiMode != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GuyiMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.Fanfu != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Fanfu))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.DisableMultiYukaman {
		i--
		if m.DisableMultiYukaman {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.HaveZimosun {
		i--
		if m.HaveZimosun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.AiLevel != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AiLevel))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.Bianjietishi {
		i--
		if m.Bianjietishi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.Shunweima_4 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Shunweima_4))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.Shunweima_3 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Shunweima_3))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.Shunweima_2 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Shunweima_2))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.Jingsuanyuandian != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Jingsuanyuandian))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.HaveNanruxiru {
		i--
		if m.HaveNanruxiru {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.HaveYifa {
		i--
		if m.HaveYifa {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.HaveTingpaizhongju {
		i--
		if m.HaveTingpaizhongju {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.HaveTingpailianzhuang {
		i--
		if m.HaveTingpailianzhuang {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.HaveHelezhongju {
		i--
		if m.HaveHelezhongju {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.HaveHelelianzhuang {
		i--
		if m.HaveHelelianzhuang {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.HaveToutiao {
		i--
		if m.HaveToutiao {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.HaveSanjiahele {
		i--
		if m.HaveSanjiahele {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.HaveJiuzhongjiupai {
		i--
		if m.HaveJiuzhongjiupai {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.HaveSijializhi {
		i--
		if m.HaveSijializhi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.HaveSigangsanle {
		i--
		if m.HaveSigangsanle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.HaveSifenglianda {
		i--
		if m.HaveSifenglianda {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.HaveGangLiDora {
		i--
		if m.HaveGangLiDora {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.HaveLiDora {
		i--
		if m.HaveLiDora {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MingDoraImmediatelyOpen {
		i--
		if m.MingDoraImmediatelyOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.HaveGangBiaoDora {
		i--
		if m.HaveGangBiaoDora {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HaveBiaoDora {
		i--
		if m.HaveBiaoDora {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.HaveQieshangmanguan {
		i--
		if m.HaveQieshangmanguan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.HaveLiujumanguan {
		i--
		if m.HaveLiujumanguan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.NotingFafu_3 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NotingFafu_3))
		i--
		dAtA[i] = 0x68
	}
	if m.NotingFafu_2 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NotingFafu_2))
		i--
		dAtA[i] = 0x60
	}
	if m.NotingFafu_1 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NotingFafu_1))
		i--
		dAtA[i] = 0x58
	}
	if m.ChangbangValue != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ChangbangValue))
		i--
		dAtA[i] = 0x50
	}
	if m.LiqibangValue != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LiqibangValue))
		i--
		dAtA[i] = 0x48
	}
	if m.TianbianValue != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TianbianValue))
		i--
		dAtA[i] = 0x40
	}
	if m.CanJifei {
		i--
		if m.CanJifei {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Fandian != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Fandian))
		i--
		dAtA[i] = 0x30
	}
	if m.InitPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.InitPoint))
		i--
		dAtA[i] = 0x28
	}
	if m.Shiduan != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Shiduan))
		i--
		dAtA[i] = 0x20
	}
	if m.DoraCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.DoraCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeAdd != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TimeAdd))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeFixed != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TimeFixed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TournamentId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TournamentId))
		i--
		dAtA[i] = 0x50
	}
	if m.RobotCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RobotCount))
		i--
		dAtA[i] = 0x48
	}
	if m.PublicLive {
		i--
		if m.PublicLive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsPlaying {
		i--
		if m.IsPlaying {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ReadyList) > 0 {
		dAtA64 := make([]byte, len(m.ReadyList)*10)
		var j63 int
		for _, num := range m.ReadyList {
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		i -= j63
		copy(dAtA[i:], dAtA64[:j63])
		i = encodeVarintLiqi(dAtA, i, uint64(j63))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Persons) > 0 {
		for iNdEx := len(m.Persons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Persons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaxPlayerCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MaxPlayerCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Mode != nil {
		{
			size, err := m.Mode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OwnerId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.OwnerId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameEndResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEndResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameEndResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameEndResult_PlayerItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEndResult_PlayerItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameEndResult_PlayerItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gold != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x30
	}
	if m.GradingScore != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GradingScore))
		i--
		dAtA[i] = 0x28
	}
	if m.PartPoint_2 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PartPoint_2))
		i--
		dAtA[i] = 0x20
	}
	if m.PartPoint_1 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PartPoint_1))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalPoint))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameConnectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameConnectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameConnectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectToken) > 0 {
		i -= len(m.ConnectToken)
		copy(dAtA[i:], m.ConnectToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ConnectToken)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ItemGainRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemGainRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemGainRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemGainRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemGainRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemGainRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LimitSourceId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LimitSourceId))
		i--
		dAtA[i] = 0x10
	}
	if m.RecordTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RecordTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stack != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Stack))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DailyGainRecord) > 0 {
		for iNdEx := len(m.DailyGainRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DailyGainRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BagUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BagUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateDailyGainRecord) > 0 {
		for iNdEx := len(m.UpdateDailyGainRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateDailyGainRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UpdateItems) > 0 {
		for iNdEx := len(m.UpdateItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardSlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardSlot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardSlot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Replace != nil {
		{
			size, err := m.Replace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardPlusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPlusResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPlusResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exchange != nil {
		{
			size, err := m.Exchange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardPlusResult_Exchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPlusResult_Exchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPlusResult_Exchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exchange != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Exchange))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplaceCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ReplaceCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Replace != nil {
		{
			size, err := m.Replace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReferenceId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ReferenceId))
		i--
		dAtA[i] = 0x48
	}
	if m.ExpireTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.TakeAttachment {
		i--
		if m.TakeAttachment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.MailId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AchievementProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievementProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AchievementProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Date != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x20
	}
	if m.Achieved {
		i--
		if m.Achieved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Counter != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountStatisticByGameMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStatisticByGameMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountStatisticByGameMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankScore) > 0 {
		for iNdEx := len(m.RankScore) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankScore[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.ScoreEarnSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ScoreEarnSum))
		i--
		dAtA[i] = 0x68
	}
	if m.HighestLianzhuang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.HighestLianzhuang))
		i--
		dAtA[i] = 0x60
	}
	if m.XunCountSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.XunCountSum))
		i--
		dAtA[i] = 0x58
	}
	if m.LiqiCountSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LiqiCountSum))
		i--
		dAtA[i] = 0x50
	}
	if m.MingCountSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MingCountSum))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RoundEnd) > 0 {
		for iNdEx := len(m.RoundEnd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoundEnd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.DadianSum != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DadianSum))))
		i--
		dAtA[i] = 0x3d
	}
	if m.RoundCountSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RoundCountSum))
		i--
		dAtA[i] = 0x30
	}
	if m.GoldEarnSum != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GoldEarnSum))))
		i--
		dAtA[i] = 0x2d
	}
	if m.FlyCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FlyCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GameFinalPosition) > 0 {
		dAtA72 := make([]byte, len(m.GameFinalPosition)*10)
		var j71 int
		for _, num := range m.GameFinalPosition {
			for num >= 1<<7 {
				dAtA72[j71] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j71++
			}
			dAtA72[j71] = uint8(num)
			j71++
		}
		i -= j71
		copy(dAtA[i:], dAtA72[:j71])
		i = encodeVarintLiqi(dAtA, i, uint64(j71))
		i--
		dAtA[i] = 0x1a
	}
	if m.GameCountSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GameCountSum))
		i--
		dAtA[i] = 0x10
	}
	if m.Mode != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountStatisticByGameMode_RoundEndData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStatisticByGameMode_RoundEndData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountStatisticByGameMode_RoundEndData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Sum))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountStatisticByGameMode_RankScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStatisticByGameMode_RankScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountStatisticByGameMode_RankScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.ScoreSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ScoreSum))
		i--
		dAtA[i] = 0x10
	}
	if m.Rank != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountStatisticByFan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStatisticByFan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountStatisticByFan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Sum))
		i--
		dAtA[i] = 0x10
	}
	if m.FanId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountFanAchieved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountFanAchieved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountFanAchieved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Liujumanguan != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liujumanguan))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Fan) > 0 {
		for iNdEx := len(m.Fan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MahjongCategory != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MahjongCategory))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FanAchieved) > 0 {
		for iNdEx := len(m.FanAchieved) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FanAchieved[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Liujumanguan != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liujumanguan))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Fan) > 0 {
		for iNdEx := len(m.Fan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GameMode) > 0 {
		for iNdEx := len(m.GameMode) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GameMode[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatisticByCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatisticByCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatisticByCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DetailStatistic != nil {
		{
			size, err := m.DetailStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Category != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatisticV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatisticV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatisticV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeisureMatchStatistic != nil {
		{
			size, err := m.LeisureMatchStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CustomizedContestStatistic != nil {
		{
			size, err := m.CustomizedContestStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RankStatistic != nil {
		{
			size, err := m.RankStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FriendRoomStatistic != nil {
		{
			size, err := m.FriendRoomStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatisticV2_RankStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatisticV2_RankStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatisticV2_RankStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MonthRefreshTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MonthRefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if m.MonthStatistic != nil {
		{
			size, err := m.MonthStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalStatistic != nil {
		{
			size, err := m.TotalStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LevelDataList) > 0 {
		for iNdEx := len(m.LevelDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AllLevelStatistic != nil {
		{
			size, err := m.AllLevelStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Statistic != nil {
		{
			size, err := m.Statistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RankLevel != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RankLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MonthRefreshTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MonthRefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if m.MonthStatistic != nil {
		{
			size, err := m.MonthStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalStatistic != nil {
		{
			size, err := m.TotalStatistic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountShiLian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountShiLian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountShiLian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Step != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientDeviceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDeviceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientDeviceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Browser) > 0 {
		i -= len(m.Browser)
		copy(dAtA[i:], m.Browser)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Browser)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OsVersion) > 0 {
		i -= len(m.OsVersion)
		copy(dAtA[i:], m.OsVersion)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OsVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Os) > 0 {
		i -= len(m.Os)
		copy(dAtA[i:], m.Os)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Os)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Announcement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Announcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Announcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rewarded {
		i--
		if m.Rewarded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Achieved {
		i--
		if m.Achieved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Counter != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Mode != nil {
		{
			size, err := m.Mode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Category != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountActiveState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountActiveState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountActiveState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Playing != nil {
		{
			size, err := m.Playing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LogoutTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LogoutTime))
		i--
		dAtA[i] = 0x18
	}
	if m.LoginTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LoginTime))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameLiveUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLiveUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameLiveUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActionData) > 0 {
		i -= len(m.ActionData)
		copy(dAtA[i:], m.ActionData)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ActionData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActionCategory != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActionCategory))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameLiveSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLiveSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameLiveSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameLiveSegmentUri) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLiveSegmentUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameLiveSegmentUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SegmentUri) > 0 {
		i -= len(m.SegmentUri)
		copy(dAtA[i:], m.SegmentUri)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.SegmentUri)))
		i--
		dAtA[i] = 0x12
	}
	if m.SegmentId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SegmentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameLiveHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLiveHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameLiveHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SeatList) > 0 {
		dAtA90 := make([]byte, len(m.SeatList)*10)
		var j89 int
		for _, num := range m.SeatList {
			for num >= 1<<7 {
				dAtA90[j89] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j89++
			}
			dAtA90[j89] = uint8(num)
			j89++
		}
		i -= j89
		copy(dAtA[i:], dAtA90[:j89])
		i = encodeVarintLiqi(dAtA, i, uint64(j89))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GameConfig != nil {
		{
			size, err := m.GameConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameNewRoundState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNewRoundState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNewRoundState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SeatStates) > 0 {
		dAtA93 := make([]byte, len(m.SeatStates)*10)
		var j92 int
		for _, num := range m.SeatStates {
			for num >= 1<<7 {
				dAtA93[j92] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j92++
			}
			dAtA93[j92] = uint8(num)
			j92++
		}
		i -= j92
		copy(dAtA[i:], dAtA93[:j92])
		i = encodeVarintLiqi(dAtA, i, uint64(j92))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameEndAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEndAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameEndAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameNoopAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameNoopAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameNoopAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CommentItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.Commenter != nil {
		{
			size, err := m.Commenter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.CommentId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RollingNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollingNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollingNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RepeatInterval != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RepeatInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BillingGoods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingGoods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingGoods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResourceCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ResourceCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ResourceId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BillShortcut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillShortcut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillShortcut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DealPrice != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.DealPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BillingProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingProduct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingProduct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SortWeight != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SortWeight))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrencyPrice != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CurrencyPrice))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurrencyCode) > 0 {
		i -= len(m.CurrencyCode)
		copy(dAtA[i:], m.CurrencyCode)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.CurrencyCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Goods != nil {
		{
			size, err := m.Goods.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Character) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Character) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Character) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtraEmoji) > 0 {
		dAtA97 := make([]byte, len(m.ExtraEmoji)*10)
		var j96 int
		for _, num := range m.ExtraEmoji {
			for num >= 1<<7 {
				dAtA97[j96] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j96++
			}
			dAtA97[j96] = uint8(num)
			j96++
		}
		i -= j96
		copy(dAtA[i:], dAtA97[:j96])
		i = encodeVarintLiqi(dAtA, i, uint64(j96))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsUpgraded {
		i--
		if m.IsUpgraded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Skin != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Skin))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Views) > 0 {
		for iNdEx := len(m.Views) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Views[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Exp != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Charid != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Charid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Character_ViewSlotSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Character_ViewSlotSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Character_ViewSlotSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuyRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ZHPShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZHPShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZHPShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CostRefresh != nil {
		{
			size, err := m.CostRefresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FreeRefresh != nil {
		{
			size, err := m.FreeRefresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyRecords) > 0 {
		for iNdEx := len(m.BuyRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Goods) > 0 {
		dAtA101 := make([]byte, len(m.Goods)*10)
		var j100 int
		for _, num := range m.Goods {
			for num >= 1<<7 {
				dAtA101[j100] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j100++
			}
			dAtA101[j100] = uint8(num)
			j100++
		}
		i -= j100
		copy(dAtA[i:], dAtA101[:j100])
		i = encodeVarintLiqi(dAtA, i, uint64(j100))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZHPShop_RefreshCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZHPShop_RefreshCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZHPShop_RefreshCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MonthTicketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthTicketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonthTicketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastPayTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastPayTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastRefreshTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastRefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BuyRecords) > 0 {
		for iNdEx := len(m.BuyRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Zhp != nil {
		{
			size, err := m.Zhp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeNicknameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeNicknameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeNicknameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaymentSetting != nil {
		{
			size, err := m.PaymentSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *PaymentSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Alipay != nil {
		{
			size, err := m.Alipay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Wechat != nil {
		{
			size, err := m.Wechat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PaymentInfo) > 0 {
		i -= len(m.PaymentInfo)
		copy(dAtA[i:], m.PaymentInfo)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.PaymentInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PaymentInfoShowType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PaymentInfoShowType))
		i--
		dAtA[i] = 0x10
	}
	if m.OpenPayment != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.OpenPayment))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaymentSetting_WechatData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentSetting_WechatData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSetting_WechatData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EnableCredit {
		i--
		if m.EnableCredit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PaymentSourcePlatform != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PaymentSourcePlatform))
		i--
		dAtA[i] = 0x10
	}
	if m.DisableCreate {
		i--
		if m.DisableCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaymentSetting_AlipayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentSetting_AlipayData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSetting_AlipayData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaymentSourcePlatform != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PaymentSourcePlatform))
		i--
		dAtA[i] = 0x10
	}
	if m.DisableCreate {
		i--
		if m.DisableCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChestData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChestData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceBlackCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FaceBlackCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ConsumeCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ConsumeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalOpenCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalOpenCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ChestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ChestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChestDataV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChestDataV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChestDataV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceBlackCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FaceBlackCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalOpenCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalOpenCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ChestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ChestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FaithData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaithData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaithData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConsumeCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ConsumeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalOpenCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalOpenCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FaithId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FaithId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.FinishTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x40
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatorId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreatorId))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContestName) > 0 {
		i -= len(m.ContestName)
		copy(dAtA[i:], m.ContestName)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ContestName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestExtend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestExtend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestExtend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicNotice) > 0 {
		i -= len(m.PublicNotice)
		copy(dAtA[i:], m.PublicNotice)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.PublicNotice)))
		i--
		dAtA[i] = 0x12
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestAbstract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestAbstract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestAbstract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicNotice) > 0 {
		i -= len(m.PublicNotice)
		copy(dAtA[i:], m.PublicNotice)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.PublicNotice)))
		i--
		dAtA[i] = 0x52
	}
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.FinishTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x40
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatorId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreatorId))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContestName) > 0 {
		i -= len(m.ContestName)
		copy(dAtA[i:], m.ContestName)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ContestName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateNotice) > 0 {
		i -= len(m.PrivateNotice)
		copy(dAtA[i:], m.PrivateNotice)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.PrivateNotice)))
		i--
		dAtA[i] = 0x62
	}
	if m.GameMode != nil {
		{
			size, err := m.GameMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.RankRule != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RankRule))
		i--
		dAtA[i] = 0x50
	}
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.FinishTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x40
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatorId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreatorId))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContestName) > 0 {
		i -= len(m.ContestName)
		copy(dAtA[i:], m.ContestName)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ContestName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestPlayerReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestPlayerReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestPlayerReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalGameCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalGameCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RecentGameRanks) > 0 {
		dAtA108 := make([]byte, len(m.RecentGameRanks)*10)
		var j107 int
		for _, num := range m.RecentGameRanks {
			for num >= 1<<7 {
				dAtA108[j107] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j107++
			}
			dAtA108[j107] = uint8(num)
			j107++
		}
		i -= j107
		copy(dAtA[i:], dAtA108[:j107])
		i = encodeVarintLiqi(dAtA, i, uint64(j107))
		i--
		dAtA[i] = 0x22
	}
	if m.Point != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x18
	}
	if m.Rank != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x10
	}
	if m.RankRule != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RankRule))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EndTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordGame_AccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordGame_AccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordGame_AccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x48
	}
	if m.Level3 != nil {
		{
			size, err := m.Level3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Title != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x30
	}
	if m.Character != nil {
		{
			size, err := m.Character.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AvatarId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestGameStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestGameStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestGameStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestGameStart_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestGameStart_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestGameStart_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestGameEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestGameEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestGameEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomizedContestGameEnd_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomizedContestGameEnd_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomizedContestGameEnd_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalPoint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Activity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ExchangeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ExchangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityAccumulatedPointData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityAccumulatedPointData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityAccumulatedPointData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GainedRewardList) > 0 {
		dAtA115 := make([]byte, len(m.GainedRewardList)*10)
		var j114 int
		for _, num := range m.GainedRewardList {
			for num >= 1<<7 {
				dAtA115[j114] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j114++
			}
			dAtA115[j114] = uint8(num)
			j114++
		}
		i -= j114
		copy(dAtA[i:], dAtA115[:j114])
		i = encodeVarintLiqi(dAtA, i, uint64(j114))
		i--
		dAtA[i] = 0x1a
	}
	if m.Point != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityRankPointData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRankPointData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRankPointData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GainableTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GainableTime))
		i--
		dAtA[i] = 0x20
	}
	if m.GainedReward {
		i--
		if m.GainedReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Point != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if m.LeaderboardId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeaderboardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRoundHuData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoundHuData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRoundHuData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XuanShangCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.XuanShangCount))
		i--
		dAtA[i] = 0x68
	}
	if m.BabeiCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.BabeiCount))
		i--
		dAtA[i] = 0x60
	}
	if m.LiDoraCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LiDoraCount))
		i--
		dAtA[i] = 0x58
	}
	if m.RedDoraCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RedDoraCount))
		i--
		dAtA[i] = 0x50
	}
	if m.BiaoDoraCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.BiaoDoraCount))
		i--
		dAtA[i] = 0x48
	}
	if m.YakumanCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.YakumanCount))
		i--
		dAtA[i] = 0x40
	}
	if m.FuSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FuSum))
		i--
		dAtA[i] = 0x38
	}
	if m.FanSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FanSum))
		i--
		dAtA[i] = 0x30
	}
	if m.TitleId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TitleId))
		i--
		dAtA[i] = 0x28
	}
	if m.Xun != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Xun))
		i--
		dAtA[i] = 0x20
	}
	if m.Score != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Fans) > 0 {
		for iNdEx := len(m.Fans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Hupai != nil {
		{
			size, err := m.Hupai.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameRoundHuData_HuPai) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoundHuData_HuPai) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRoundHuData_HuPai) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Liqi != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liqi))
		i--
		dAtA[i] = 0x18
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameRoundHuData_Fan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoundHuData_Fan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRoundHuData_Fan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fan != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Fan))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRoundPlayerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoundPlayerResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRoundPlayerResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hu != nil {
		{
			size, err := m.Hu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.LianZhuang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LianZhuang))
		i--
		dAtA[i] = 0x38
	}
	if m.IsLiujumanguan {
		i--
		if m.IsLiujumanguan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsFulu {
		i--
		if m.IsFulu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LiqiType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LiqiType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ming) > 0 {
		for iNdEx := len(m.Ming) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ming[iNdEx])
			copy(dAtA[i:], m.Ming[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Ming[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hands) > 0 {
		for iNdEx := len(m.Hands) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hands[iNdEx])
			copy(dAtA[i:], m.Hands[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hands[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRoundPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoundPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRoundPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Rank != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x10
	}
	if m.Score != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRoundSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoundSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRoundSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ben != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ben))
		i--
		dAtA[i] = 0x10
	}
	if m.Ju != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ju))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameFinalSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameFinalSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameFinalSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FinalPlayers) > 0 {
		for iNdEx := len(m.FinalPlayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalPlayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.AccountViews) > 0 {
		for iNdEx := len(m.AccountViews) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountViews[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Rounds) > 0 {
		for iNdEx := len(m.Rounds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rounds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Seats) > 0 {
		for iNdEx := len(m.Seats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.FinishTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x48
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CalculateParam != nil {
		{
			size, err := m.CalculateParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Mode != nil {
		{
			size, err := m.Mode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Category != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameFinalSnapshot_CalculateParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameFinalSnapshot_CalculateParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameFinalSnapshot_CalculateParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankPoints) > 0 {
		dAtA123 := make([]byte, len(m.RankPoints)*10)
		var j122 int
		for _, num1 := range m.RankPoints {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA123[j122] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j122++
			}
			dAtA123[j122] = uint8(num)
			j122++
		}
		i -= j122
		copy(dAtA[i:], dAtA123[:j122])
		i = encodeVarintLiqi(dAtA, i, uint64(j122))
		i--
		dAtA[i] = 0x1a
	}
	if m.Jingsuanyuandian != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Jingsuanyuandian))
		i--
		dAtA[i] = 0x10
	}
	if m.InitPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.InitPoint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameFinalSnapshot_GameSeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameFinalSnapshot_GameSeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameFinalSnapshot_GameSeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsConnected {
		i--
		if m.IsConnected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ClientAddress) > 0 {
		i -= len(m.ClientAddress)
		copy(dAtA[i:], m.ClientAddress)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ClientAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.NotifyEndpoint != nil {
		{
			size, err := m.NotifyEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameFinalSnapshot_FinalPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameFinalSnapshot_FinalPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameFinalSnapshot_FinalPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gold != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x30
	}
	if m.GradingScore != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GradingScore))
		i--
		dAtA[i] = 0x28
	}
	if m.PartPoint_2 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PartPoint_2))
		i--
		dAtA[i] = 0x20
	}
	if m.PartPoint_1 != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PartPoint_1))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalPoint != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalPoint))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordCollectedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordCollectedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordCollectedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Remarks) > 0 {
		i -= len(m.Remarks)
		copy(dAtA[i:], m.Remarks)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Remarks)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClientEndpoint != nil {
		{
			size, err := m.ClientEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSignupAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSignupAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSignupAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResSignupAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResSignupAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResSignupAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CurrencyPlatforms) > 0 {
		dAtA129 := make([]byte, len(m.CurrencyPlatforms)*10)
		var j128 int
		for _, num := range m.CurrencyPlatforms {
			for num >= 1<<7 {
				dAtA129[j128] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j128++
			}
			dAtA129[j128] = uint8(num)
			j128++
		}
		i -= j128
		copy(dAtA[i:], dAtA129[:j128])
		i = encodeVarintLiqi(dAtA, i, uint64(j128))
		i--
		dAtA[i] = 0x42
	}
	if m.GenAccessToken {
		i--
		if m.GenAccessToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reconnect {
		i--
		if m.Reconnect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x32
	}
	if m.HasUnreadAnnouncement {
		i--
		if m.HasUnreadAnnouncement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.GameInfo != nil {
		{
			size, err := m.GameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqEmailLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEmailLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqEmailLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CurrencyPlatforms) > 0 {
		dAtA135 := make([]byte, len(m.CurrencyPlatforms)*10)
		var j134 int
		for _, num := range m.CurrencyPlatforms {
			for num >= 1<<7 {
				dAtA135[j134] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j134++
			}
			dAtA135[j134] = uint8(num)
			j134++
		}
		i -= j134
		copy(dAtA[i:], dAtA135[:j134])
		i = encodeVarintLiqi(dAtA, i, uint64(j134))
		i--
		dAtA[i] = 0x42
	}
	if m.GenAccessToken {
		i--
		if m.GenAccessToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reconnect {
		i--
		if m.Reconnect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBindAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBindAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBindAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreatePhoneVerifyCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreatePhoneVerifyCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreatePhoneVerifyCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Usage != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateEmailVerifyCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateEmailVerifyCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateEmailVerifyCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Usage != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqVerifyCodeForSecure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqVerifyCodeForSecure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqVerifyCodeForSecure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operation != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResVerfiyCodeForSecure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResVerfiyCodeForSecure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResVerfiyCodeForSecure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SecureToken) > 0 {
		i -= len(m.SecureToken)
		copy(dAtA[i:], m.SecureToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.SecureToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBindPhoneNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBindPhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBindPhoneNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBindEmail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBindEmail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBindEmail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqModifyPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqModifyPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqModifyPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SecureToken) > 0 {
		i -= len(m.SecureToken)
		copy(dAtA[i:], m.SecureToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.SecureToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldPassword) > 0 {
		i -= len(m.OldPassword)
		copy(dAtA[i:], m.OldPassword)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OldPassword)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewPassword) > 0 {
		i -= len(m.NewPassword)
		copy(dAtA[i:], m.NewPassword)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.NewPassword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqOauth2Auth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOauth2Auth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOauth2Auth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResOauth2Auth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResOauth2Auth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResOauth2Auth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqOauth2Check) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOauth2Check) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOauth2Check) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResOauth2Check) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResOauth2Check) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResOauth2Check) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasAccount {
		i--
		if m.HasAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqOauth2Signup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOauth2Signup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOauth2Signup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdvertiseStr) > 0 {
		i -= len(m.AdvertiseStr)
		copy(dAtA[i:], m.AdvertiseStr)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AdvertiseStr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResOauth2Signup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResOauth2Signup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResOauth2Signup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqOauth2Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOauth2Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOauth2Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CurrencyPlatforms) > 0 {
		dAtA142 := make([]byte, len(m.CurrencyPlatforms)*10)
		var j141 int
		for _, num := range m.CurrencyPlatforms {
			for num >= 1<<7 {
				dAtA142[j141] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j141++
			}
			dAtA142[j141] = uint8(num)
			j141++
		}
		i -= j141
		copy(dAtA[i:], dAtA142[:j141])
		i = encodeVarintLiqi(dAtA, i, uint64(j141))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reconnect {
		i--
		if m.Reconnect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLogout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLogout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ResLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResLogout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResLogout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqHeatBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHeatBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqHeatBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoOperationCounter != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NoOperationCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqLoginBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLoginBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLoginBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqJoinMatchQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinMatchQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqJoinMatchQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchMode != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MatchMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqCancelMatchQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCancelMatchQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCancelMatchQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchMode != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MatchMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqAccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqAccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateNickname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateNickname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateNickname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdvertiseStr) > 0 {
		i -= len(m.AdvertiseStr)
		copy(dAtA[i:], m.AdvertiseStr)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AdvertiseStr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqModifyNickname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqModifyNickname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqModifyNickname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UseItemId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqModifyBirthday) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqModifyBirthday) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqModifyBirthday) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Birthday != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResSelfRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResSelfRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResSelfRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PublicLive {
		i--
		if m.PublicLive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Mode != nil {
		{
			size, err := m.Mode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PlayerCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqJoinRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqJoinRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResJoinRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResJoinRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResJoinRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqRoomReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRoomReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRoomReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqRoomStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRoomStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRoomStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ReqRoomKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRoomKick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRoomKick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqModifyRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqModifyRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqModifyRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RobotCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RobotCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvatarId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqAccountStatisticInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAccountStatisticInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqAccountStatisticInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountStatisticInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountStatisticInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountStatisticInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DetailData != nil {
		{
			size, err := m.DetailData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StatisticData) > 0 {
		for iNdEx := len(m.StatisticData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatisticData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountCharacterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountCharacterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountCharacterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UnlockList) > 0 {
		dAtA158 := make([]byte, len(m.UnlockList)*10)
		var j157 int
		for _, num := range m.UnlockList {
			for num >= 1<<7 {
				dAtA158[j157] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j157++
			}
			dAtA158[j157] = uint8(num)
			j157++
		}
		i -= j157
		copy(dAtA[i:], dAtA158[:j157])
		i = encodeVarintLiqi(dAtA, i, uint64(j157))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqShopPurchase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqShopPurchase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqShopPurchase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResShopPurchase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResShopPurchase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResShopPurchase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataUrl) > 0 {
		i -= len(m.DataUrl)
		copy(dAtA[i:], m.DataUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.DataUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGameRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGameRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGameRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResGameRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGameRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGameRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecordList) > 0 {
		for iNdEx := len(m.RecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCollectedGameRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCollectedGameRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCollectedGameRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecordCollectLimit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RecordCollectLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RecordList) > 0 {
		for iNdEx := len(m.RecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGameRecordsDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGameRecordsDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGameRecordsDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UuidList) > 0 {
		for iNdEx := len(m.UuidList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UuidList[iNdEx])
			copy(dAtA[i:], m.UuidList[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.UuidList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResGameRecordsDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGameRecordsDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGameRecordsDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecordList) > 0 {
		for iNdEx := len(m.RecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqAddCollectedGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAddCollectedGameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqAddCollectedGameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Remarks) > 0 {
		i -= len(m.Remarks)
		copy(dAtA[i:], m.Remarks)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Remarks)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAddCollectedGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAddCollectedGameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAddCollectedGameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqRemoveCollectedGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRemoveCollectedGameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRemoveCollectedGameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResRemoveCollectedGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResRemoveCollectedGameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResRemoveCollectedGameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeCollectedGameRecordRemarks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeCollectedGameRecordRemarks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeCollectedGameRecordRemarks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Remarks) > 0 {
		i -= len(m.Remarks)
		copy(dAtA[i:], m.Remarks)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Remarks)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResChangeCollectedGameRecordRemarks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResChangeCollectedGameRecordRemarks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResChangeCollectedGameRecordRemarks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqLevelLeaderboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLevelLeaderboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLevelLeaderboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResLevelLeaderboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResLevelLeaderboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResLevelLeaderboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SelfRank != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SelfRank))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResLevelLeaderboard_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResLevelLeaderboard_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResLevelLeaderboard_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != nil {
		{
			size, err := m.Level.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqMultiAccountId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMultiAccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqMultiAccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccountIdList) > 0 {
		dAtA172 := make([]byte, len(m.AccountIdList)*10)
		var j171 int
		for _, num := range m.AccountIdList {
			for num >= 1<<7 {
				dAtA172[j171] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j171++
			}
			dAtA172[j171] = uint8(num)
			j171++
		}
		i -= j171
		copy(dAtA[i:], dAtA172[:j171])
		i = encodeVarintLiqi(dAtA, i, uint64(j171))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResMultiAccountBrief) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMultiAccountBrief) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMultiAccountBrief) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResFriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFriendList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFriendList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FriendMaxCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FriendMaxCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Friends) > 0 {
		for iNdEx := len(m.Friends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Friends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResFriendApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFriendApplyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFriendApplyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Applies) > 0 {
		for iNdEx := len(m.Applies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResFriendApplyList_FriendApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFriendApplyList_FriendApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFriendApplyList_FriendApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApplyTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ApplyTime))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqApplyFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqApplyFriend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqApplyFriend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqHandleFriendApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHandleFriendApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqHandleFriendApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Method != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqRemoveFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRemoveFriend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRemoveFriend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSearchAccountByPattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSearchAccountByPattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSearchAccountByPattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x12
	}
	if m.SearchNext {
		i--
		if m.SearchNext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResSearchAccountByPattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResSearchAccountByPattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResSearchAccountByPattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DecodeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.DecodeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MatchAccounts) > 0 {
		dAtA177 := make([]byte, len(m.MatchAccounts)*10)
		var j176 int
		for _, num := range m.MatchAccounts {
			for num >= 1<<7 {
				dAtA177[j176] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j176++
			}
			dAtA177[j176] = uint8(num)
			j176++
		}
		i -= j176
		copy(dAtA[i:], dAtA177[:j176])
		i = encodeVarintLiqi(dAtA, i, uint64(j176))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsFinished {
		i--
		if m.IsFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqAccountList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAccountList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqAccountList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccountIdList) > 0 {
		dAtA180 := make([]byte, len(m.AccountIdList)*10)
		var j179 int
		for _, num := range m.AccountIdList {
			for num >= 1<<7 {
				dAtA180[j179] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j179++
			}
			dAtA180[j179] = uint8(num)
			j179++
		}
		i -= j179
		copy(dAtA[i:], dAtA180[:j179])
		i = encodeVarintLiqi(dAtA, i, uint64(j179))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountStates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountStates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountStates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSearchAccountById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSearchAccountById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSearchAccountById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResSearchAccountById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResSearchAccountById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResSearchAccountById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResBagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResBagInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResBagInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bag != nil {
		{
			size, err := m.Bag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUseBagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUseBagItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUseBagItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqOpenManualItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOpenManualItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOpenManualItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SelectId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SelectId))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqOpenRandomRewardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOpenRandomRewardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOpenRandomRewardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResOpenRandomRewardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResOpenRandomRewardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResOpenRandomRewardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqComposeShard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqComposeShard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqComposeShard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReadList) > 0 {
		dAtA188 := make([]byte, len(m.ReadList)*10)
		var j187 int
		for _, num := range m.ReadList {
			for num >= 1<<7 {
				dAtA188[j187] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j187++
			}
			dAtA188[j187] = uint8(num)
			j187++
		}
		i -= j187
		copy(dAtA[i:], dAtA188[:j187])
		i = encodeVarintLiqi(dAtA, i, uint64(j187))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sort) > 0 {
		dAtA190 := make([]byte, len(m.Sort)*10)
		var j189 int
		for _, num := range m.Sort {
			for num >= 1<<7 {
				dAtA190[j189] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j189++
			}
			dAtA190[j189] = uint8(num)
			j189++
		}
		i -= j189
		copy(dAtA[i:], dAtA190[:j189])
		i = encodeVarintLiqi(dAtA, i, uint64(j189))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Announcements) > 0 {
		for iNdEx := len(m.Announcements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Announcements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResMailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMailInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMailInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mails) > 0 {
		for iNdEx := len(m.Mails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqReadMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqReadMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MailId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqDeleteMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDeleteMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MailId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqTakeAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTakeAttachment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqTakeAttachment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MailId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResAchievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAchievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAchievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResTitleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTitleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResTitleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TitleList) > 0 {
		dAtA195 := make([]byte, len(m.TitleList)*10)
		var j194 int
		for _, num := range m.TitleList {
			for num >= 1<<7 {
				dAtA195[j194] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j194++
			}
			dAtA195[j194] = uint8(num)
			j194++
		}
		i -= j194
		copy(dAtA[i:], dAtA195[:j194])
		i = encodeVarintLiqi(dAtA, i, uint64(j194))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUseTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUseTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUseTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Title != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqBuyShiLian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBuyShiLian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBuyShiLian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdateClientValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateClientValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdateClientValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResClientValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResClientValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResClientValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RechargedCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RechargedCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResClientValue_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResClientValue_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResClientValue_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqClientMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqClientMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqCurrentMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCurrentMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCurrentMatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ModeList) > 0 {
		dAtA198 := make([]byte, len(m.ModeList)*10)
		var j197 int
		for _, num := range m.ModeList {
			for num >= 1<<7 {
				dAtA198[j197] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j197++
			}
			dAtA198[j197] = uint8(num)
			j197++
		}
		i -= j197
		copy(dAtA[i:], dAtA198[:j197])
		i = encodeVarintLiqi(dAtA, i, uint64(j197))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCurrentMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCurrentMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCurrentMatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Matches) > 0 {
		for iNdEx := len(m.Matches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Matches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCurrentMatchInfo_CurrentMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCurrentMatchInfo_CurrentMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCurrentMatchInfo_CurrentMatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayingCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PlayingCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ModeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ModeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqReadAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqReadAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AnnouncementId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AnnouncementId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResReviveCoinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResReviveCoinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResReviveCoinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasGained {
		i--
		if m.HasGained {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResDailyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResDailyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResDailyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefreshCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RefreshCount))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxDailyTaskCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MaxDailyTaskCount))
		i--
		dAtA[i] = 0x20
	}
	if m.HasRefreshCount {
		i--
		if m.HasRefreshCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqRefreshDailyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRefreshDailyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRefreshDailyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResRefreshDailyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResRefreshDailyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResRefreshDailyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefreshCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RefreshCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUseGiftCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUseGiftCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUseGiftCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResUseGiftCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResUseGiftCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResUseGiftCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSendClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendClientMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSendClientMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGameLiveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGameLiveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGameLiveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResGameLiveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGameLiveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGameLiveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NowMillisecond != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NowMillisecond))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LiveHead != nil {
		{
			size, err := m.LiveHead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LeftStartSeconds != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftStartSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGameLiveLeftSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGameLiveLeftSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGameLiveLeftSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastSegmentId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastSegmentId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResGameLiveLeftSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGameLiveLeftSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGameLiveLeftSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SegmentEndMillisecond != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SegmentEndMillisecond))
		i--
		dAtA[i] = 0x30
	}
	if m.NowMillisecond != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NowMillisecond))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LiveState != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LiveState))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGameLiveList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGameLiveList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGameLiveList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FilterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.FilterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResGameLiveList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGameLiveList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGameLiveList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LiveList) > 0 {
		for iNdEx := len(m.LiveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCommentSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCommentSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCommentSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentAllow != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CommentAllow))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdateCommentSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateCommentSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdateCommentSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentAllow != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CommentAllow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCommentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCommentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCommentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCommentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCommentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCommentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastReadId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastReadId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CommentIdList) > 0 {
		dAtA211 := make([]byte, len(m.CommentIdList)*10)
		var j210 int
		for _, num := range m.CommentIdList {
			for num >= 1<<7 {
				dAtA211[j210] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j210++
			}
			dAtA211[j210] = uint8(num)
			j210++
		}
		i -= j210
		copy(dAtA[i:], dAtA211[:j210])
		i = encodeVarintLiqi(dAtA, i, uint64(j210))
		i--
		dAtA[i] = 0x1a
	}
	if m.CommentAllow != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CommentAllow))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCommentContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCommentContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCommentContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CommentIdList) > 0 {
		dAtA214 := make([]byte, len(m.CommentIdList)*10)
		var j213 int
		for _, num := range m.CommentIdList {
			for num >= 1<<7 {
				dAtA214[j213] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j213++
			}
			dAtA214[j213] = uint8(num)
			j213++
		}
		i -= j213
		copy(dAtA[i:], dAtA214[:j213])
		i = encodeVarintLiqi(dAtA, i, uint64(j213))
		i--
		dAtA[i] = 0x12
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCommentContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCommentContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCommentContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqLeaveComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLeaveComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLeaveComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqDeleteComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDeleteComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeleteList) > 0 {
		dAtA217 := make([]byte, len(m.DeleteList)*10)
		var j216 int
		for _, num := range m.DeleteList {
			for num >= 1<<7 {
				dAtA217[j216] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j216++
			}
			dAtA217[j216] = uint8(num)
			j216++
		}
		i -= j216
		copy(dAtA[i:], dAtA217[:j216])
		i = encodeVarintLiqi(dAtA, i, uint64(j216))
		i--
		dAtA[i] = 0x12
	}
	if m.TargetId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdateReadComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReadComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdateReadComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ReadId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqRollingNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRollingNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRollingNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Notice != nil {
		{
			size, err := m.Notice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResServerTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResServerTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResServerTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqPlatformBillingProducts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPlatformBillingProducts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqPlatformBillingProducts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShelvesId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ShelvesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResPlatformBillingProducts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResPlatformBillingProducts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResPlatformBillingProducts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Products) > 0 {
		for iNdEx := len(m.Products) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Products[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateBillingOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateBillingOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateBillingOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x20
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x18
	}
	if m.PaymentPlatform != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PaymentPlatform))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateBillingOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateBillingOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateBillingOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSolveGooglePlayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSolveGooglePlayOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSolveGooglePlayOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InappDataSignature) > 0 {
		i -= len(m.InappDataSignature)
		copy(dAtA[i:], m.InappDataSignature)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.InappDataSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InappPurchaseData) > 0 {
		i -= len(m.InappPurchaseData)
		copy(dAtA[i:], m.InappPurchaseData)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.InappPurchaseData)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ReqCancelGooglePlayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCancelGooglePlayOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCancelGooglePlayOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateWechatNativeOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateWechatNativeOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateWechatNativeOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccountIp) > 0 {
		i -= len(m.AccountIp)
		copy(dAtA[i:], m.AccountIp)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccountIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateWechatNativeOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateWechatNativeOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateWechatNativeOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QrcodeBuffer) > 0 {
		i -= len(m.QrcodeBuffer)
		copy(dAtA[i:], m.QrcodeBuffer)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.QrcodeBuffer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateWechatAppOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateWechatAppOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateWechatAppOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccountIp) > 0 {
		i -= len(m.AccountIp)
		copy(dAtA[i:], m.AccountIp)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccountIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateWechatAppOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateWechatAppOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateWechatAppOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CallWechatAppParam != nil {
		{
			size, err := m.CallWechatAppParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Noncestr) > 0 {
		i -= len(m.Noncestr)
		copy(dAtA[i:], m.Noncestr)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Noncestr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prepayid) > 0 {
		i -= len(m.Prepayid)
		copy(dAtA[i:], m.Prepayid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Prepayid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Partnerid) > 0 {
		i -= len(m.Partnerid)
		copy(dAtA[i:], m.Partnerid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Partnerid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Appid) > 0 {
		i -= len(m.Appid)
		copy(dAtA[i:], m.Appid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Appid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateAlipayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateAlipayOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateAlipayOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AlipayTradeType) > 0 {
		i -= len(m.AlipayTradeType)
		copy(dAtA[i:], m.AlipayTradeType)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AlipayTradeType)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateAlipayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateAlipayOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateAlipayOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlipayUrl) > 0 {
		i -= len(m.AlipayUrl)
		copy(dAtA[i:], m.AlipayUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AlipayUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateAlipayScanOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateAlipayScanOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateAlipayScanOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateAlipayScanOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateAlipayScanOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateAlipayScanOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QrCode) > 0 {
		i -= len(m.QrCode)
		copy(dAtA[i:], m.QrCode)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.QrCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QrcodeBuffer) > 0 {
		i -= len(m.QrcodeBuffer)
		copy(dAtA[i:], m.QrcodeBuffer)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.QrcodeBuffer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateAlipayAppOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateAlipayAppOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateAlipayAppOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateAlipayAppOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateAlipayAppOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateAlipayAppOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlipayUrl) > 0 {
		i -= len(m.AlipayUrl)
		copy(dAtA[i:], m.AlipayUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AlipayUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateJPCreditCardOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateJPCreditCardOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateJPCreditCardOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateJPCreditCardOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateJPCreditCardOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateJPCreditCardOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateJPPaypalOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateJPPaypalOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateJPPaypalOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateJPPaypalOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateJPPaypalOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateJPPaypalOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateJPAuOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateJPAuOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateJPAuOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateJPAuOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateJPAuOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateJPAuOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateJPDocomoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateJPDocomoOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateJPDocomoOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateJPDocomoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateJPDocomoOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateJPDocomoOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateJPWebMoneyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateJPWebMoneyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateJPWebMoneyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateJPWebMoneyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateJPWebMoneyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateJPWebMoneyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateJPSoftbankOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateJPSoftbankOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateJPSoftbankOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateJPSoftbankOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateJPSoftbankOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateJPSoftbankOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateENPaypalOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateENPaypalOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateENPaypalOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateENPaypalOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateENPaypalOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateENPaypalOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateENJCBOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateENJCBOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateENJCBOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateENJCBOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateENJCBOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateENJCBOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateENMasterCardOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateENMasterCardOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateENMasterCardOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateENMasterCardOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateENMasterCardOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateENMasterCardOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateENVisaOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateENVisaOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateENVisaOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateENVisaOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateENVisaOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateENVisaOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCreateENAlipayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateENAlipayOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCreateENAlipayOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnUrl) > 0 {
		i -= len(m.ReturnUrl)
		copy(dAtA[i:], m.ReturnUrl)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.ReturnUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientType != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCreateENAlipayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCreateENAlipayOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCreateENAlipayOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqOpenChest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqOpenChest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqOpenChest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseTicket {
		i--
		if m.UseTicket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ChestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ChestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResOpenChest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResOpenChest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResOpenChest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalOpenCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TotalOpenCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBuyFromChestShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBuyFromChestShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBuyFromChestShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResBuyFromChestShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResBuyFromChestShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResBuyFromChestShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConsumeCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ConsumeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ChestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ChestId))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResDailySignInInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResDailySignInInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResDailySignInInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignInDays != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SignInDays))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqDoActivitySignIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDoActivitySignIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqDoActivitySignIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ResDoActivitySignIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResDoActivitySignIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResDoActivitySignIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignInCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SignInCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResDoActivitySignIn_RewardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResDoActivitySignIn_RewardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResDoActivitySignIn_RewardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ResourceId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SendGiftLimit != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SendGiftLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.SendGiftCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SendGiftCount))
		i--
		dAtA[i] = 0x28
	}
	if m.MainCharacterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.MainCharacterId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Skins) > 0 {
		dAtA243 := make([]byte, len(m.Skins)*10)
		var j242 int
		for _, num := range m.Skins {
			for num >= 1<<7 {
				dAtA243[j242] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j242++
			}
			dAtA243[j242] = uint8(num)
			j242++
		}
		i -= j242
		copy(dAtA[i:], dAtA243[:j242])
		i = encodeVarintLiqi(dAtA, i, uint64(j242))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Characters) > 0 {
		for iNdEx := len(m.Characters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Characters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeMainCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeMainCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeMainCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CharacterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CharacterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeCharacterSkin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeCharacterSkin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeCharacterSkin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Skin != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Skin))
		i--
		dAtA[i] = 0x10
	}
	if m.CharacterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CharacterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeCharacterView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeCharacterView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeCharacterView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.Slot != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x10
	}
	if m.CharacterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CharacterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSendGiftToCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendGiftToCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSendGiftToCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gifts) > 0 {
		for iNdEx := len(m.Gifts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gifts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CharacterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CharacterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSendGiftToCharacter_Gift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendGiftToCharacter_Gift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSendGiftToCharacter_Gift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResSendGiftToCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResSendGiftToCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResSendGiftToCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exp != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSellItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSellItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSellItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sells) > 0 {
		for iNdEx := len(m.Sells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqSellItem_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSellItem_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSellItem_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResCommonView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCommonView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCommonView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Slots) > 0 {
		for iNdEx := len(m.Slots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Slots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCommonView_Slot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCommonView_Slot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCommonView_Slot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqChangeCommonView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeCommonView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChangeCommonView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpgradeCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpgradeCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpgradeCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CharacterId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.CharacterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResUpgradeCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResUpgradeCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResUpgradeCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Character != nil {
		{
			size, err := m.Character.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGMCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGMCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGMCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResShopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResShopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopInfo != nil {
		{
			size, err := m.ShopInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBuyFromShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBuyFromShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBuyFromShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DealPrice != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.DealPrice))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BillShortCut) > 0 {
		for iNdEx := len(m.BillShortCut) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BillShortCut[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResBuyFromShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResBuyFromShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResBuyFromShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqBuyFromZHP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBuyFromZHP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBuyFromZHP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqPayMonthTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPayMonthTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqPayMonthTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TicketId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TicketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResPayMonthTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResPayMonthTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResPayMonthTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResourceCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ResourceCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ResourceId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResRefreshZHPShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResRefreshZHPShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResRefreshZHPShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Zhp != nil {
		{
			size, err := m.Zhp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResMonthTicketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMonthTicketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMonthTicketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MonthTicketInfo) > 0 {
		for iNdEx := len(m.MonthTicketInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonthTicketInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqExchangeCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqExchangeCurrency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqExchangeCurrency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResServerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResServerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResServerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdateAccountSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateAccountSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdateAccountSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Setting != nil {
		{
			size, err := m.Setting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResModNicknameTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResModNicknameTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResModNicknameTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastModTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastModTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResMisc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMisc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMisc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Faiths) > 0 {
		for iNdEx := len(m.Faiths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Faiths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RechargedList) > 0 {
		dAtA259 := make([]byte, len(m.RechargedList)*10)
		var j258 int
		for _, num := range m.RechargedList {
			for num >= 1<<7 {
				dAtA259[j258] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j258++
			}
			dAtA259[j258] = uint8(num)
			j258++
		}
		i -= j258
		copy(dAtA[i:], dAtA259[:j258])
		i = encodeVarintLiqi(dAtA, i, uint64(j258))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqModifySignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqModifySignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqModifySignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResIDCardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResIDCardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResIDCardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsAuthed {
		i--
		if m.IsAuthed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUpdateIDCardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateIDCardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUpdateIDCardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CardNo) > 0 {
		i -= len(m.CardNo)
		copy(dAtA[i:], m.CardNo)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.CardNo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fullname) > 0 {
		i -= len(m.Fullname)
		copy(dAtA[i:], m.Fullname)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Fullname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResVipReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResVipReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResVipReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GainedVipLevels) > 0 {
		dAtA263 := make([]byte, len(m.GainedVipLevels)*10)
		var j262 int
		for _, num := range m.GainedVipLevels {
			for num >= 1<<7 {
				dAtA263[j262] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j262++
			}
			dAtA263[j262] = uint8(num)
			j262++
		}
		i -= j262
		copy(dAtA[i:], dAtA263[:j262])
		i = encodeVarintLiqi(dAtA, i, uint64(j262))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGainVipReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGainVipReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGainVipReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipLevel != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCustomizedContestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCustomizedContestList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCustomizedContestList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCustomizedContestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCustomizedContestList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCustomizedContestList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FollowContests) > 0 {
		for iNdEx := len(m.FollowContests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FollowContests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCustomizedContestExtendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCustomizedContestExtendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCustomizedContestExtendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UidList) > 0 {
		dAtA267 := make([]byte, len(m.UidList)*10)
		var j266 int
		for _, num := range m.UidList {
			for num >= 1<<7 {
				dAtA267[j266] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j266++
			}
			dAtA267[j266] = uint8(num)
			j266++
		}
		i -= j266
		copy(dAtA[i:], dAtA267[:j266])
		i = encodeVarintLiqi(dAtA, i, uint64(j266))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCustomizedContestExtendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCustomizedContestExtendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCustomizedContestExtendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtendList) > 0 {
		for iNdEx := len(m.ExtendList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqEnterCustomizedContest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEnterCustomizedContest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqEnterCustomizedContest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResEnterCustomizedContest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResEnterCustomizedContest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResEnterCustomizedContest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollowed {
		i--
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerReport != nil {
		{
			size, err := m.PlayerReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DetailInfo != nil {
		{
			size, err := m.DetailInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCustomizedContestOnlineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCustomizedContestOnlineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCustomizedContestOnlineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCustomizedContestOnlineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCustomizedContestOnlineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCustomizedContestOnlineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnlinePlayer != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.OnlinePlayer))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCustomizedContestByContestId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCustomizedContestByContestId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCustomizedContestByContestId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCustomizedContestByContestId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCustomizedContestByContestId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCustomizedContestByContestId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestInfo != nil {
		{
			size, err := m.ContestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqStartCustomizedContest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStartCustomizedContest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqStartCustomizedContest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqJoinCustomizedContestChatRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinCustomizedContestChatRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqJoinCustomizedContestChatRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResJoinCustomizedContestChatRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResJoinCustomizedContestChatRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResJoinCustomizedContestChatRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChatHistory) > 0 {
		for iNdEx := len(m.ChatHistory) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChatHistory[iNdEx])
			copy(dAtA[i:], m.ChatHistory[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.ChatHistory[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSayChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSayChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSayChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCustomizedContestGameLiveList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCustomizedContestGameLiveList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCustomizedContestGameLiveList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCustomizedContestGameLiveList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCustomizedContestGameLiveList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCustomizedContestGameLiveList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LiveList) > 0 {
		for iNdEx := len(m.LiveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchCustomizedContestGameRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchCustomizedContestGameRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchCustomizedContestGameRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastIndex != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchCustomizedContestGameRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchCustomizedContestGameRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchCustomizedContestGameRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecordList) > 0 {
		for iNdEx := len(m.RecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextIndex != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.NextIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqTargetCustomizedContest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTargetCustomizedContest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqTargetCustomizedContest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResActivityList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResActivityList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResActivityList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountActivityData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountActivityData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountActivityData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SignInData) > 0 {
		for iNdEx := len(m.SignInData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignInData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FlipTaskProgressList) > 0 {
		for iNdEx := len(m.FlipTaskProgressList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlipTaskProgressList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RankDataList) > 0 {
		for iNdEx := len(m.RankDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AccumulatedPointList) > 0 {
		for iNdEx := len(m.AccumulatedPointList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulatedPointList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TaskProgressList) > 0 {
		for iNdEx := len(m.TaskProgressList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskProgressList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExchangeRecords) > 0 {
		for iNdEx := len(m.ExchangeRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResAccountActivityData_ActivitySignInData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAccountActivityData_ActivitySignInData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAccountActivityData_ActivitySignInData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignInCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.SignInCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqExchangeActivityItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqExchangeActivityItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqExchangeActivityItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExchangeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ExchangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResExchangeActivityItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResExchangeActivityItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResExchangeActivityItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExecuteReward) > 0 {
		for iNdEx := len(m.ExecuteReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecuteReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqCompleteActivityTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCompleteActivityTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCompleteActivityTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqRecieveActivityFlipTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRecieveActivityFlipTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRecieveActivityFlipTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResRecieveActivityFlipTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResRecieveActivityFlipTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResRecieveActivityFlipTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchActivityFlipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchActivityFlipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchActivityFlipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchActivityFlipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchActivityFlipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchActivityFlipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		dAtA282 := make([]byte, len(m.Rewards)*10)
		var j281 int
		for _, num := range m.Rewards {
			for num >= 1<<7 {
				dAtA282[j281] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j281++
			}
			dAtA282[j281] = uint8(num)
			j281++
		}
		i -= j281
		copy(dAtA[i:], dAtA282[:j281])
		i = encodeVarintLiqi(dAtA, i, uint64(j281))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGainAccumulatedPointActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGainAccumulatedPointActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGainAccumulatedPointActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RewardId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.RewardId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqFetchRankPointLeaderboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFetchRankPointLeaderboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFetchRankPointLeaderboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaderboardId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeaderboardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchRankPointLeaderboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchRankPointLeaderboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchRankPointLeaderboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastRefreshTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastRefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResFetchRankPointLeaderboard_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResFetchRankPointLeaderboard_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResFetchRankPointLeaderboard_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Point != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x20
	}
	if m.View != nil {
		{
			size, err := m.View.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Rank != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqGainRankPointReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGainRankPointReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGainRankPointReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.LeaderboardId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeaderboardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionMJStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionMJStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionMJStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ActionNewRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionNewRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionNewRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.LeftTileCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftTileCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x62
	}
	if m.Al {
		i--
		if m.Al {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Tingpais1) > 0 {
		for iNdEx := len(m.Tingpais1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Tingpais0) > 0 {
		for iNdEx := len(m.Tingpais0) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais0[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Liqibang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liqibang))
		i--
		dAtA[i] = 0x40
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Scores) > 0 {
		dAtA287 := make([]byte, len(m.Scores)*10)
		var j286 int
		for _, num1 := range m.Scores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA287[j286] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j286++
			}
			dAtA287[j286] = uint8(num)
			j286++
		}
		i -= j286
		copy(dAtA[i:], dAtA287[:j286])
		i = encodeVarintLiqi(dAtA, i, uint64(j286))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Dora) > 0 {
		i -= len(m.Dora)
		copy(dAtA[i:], m.Dora)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Dora)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tiles) > 0 {
		for iNdEx := len(m.Tiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles[iNdEx])
			copy(dAtA[i:], m.Tiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Ben != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ben))
		i--
		dAtA[i] = 0x18
	}
	if m.Ju != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ju))
		i--
		dAtA[i] = 0x10
	}
	if m.Chang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Chang))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordNewRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordNewRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordNewRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.LeftTileCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftTileCount))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Paishan) > 0 {
		i -= len(m.Paishan)
		copy(dAtA[i:], m.Paishan)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Paishan)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tingpai) > 0 {
		for iNdEx := len(m.Tingpai) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpai[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Tiles3) > 0 {
		for iNdEx := len(m.Tiles3) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles3[iNdEx])
			copy(dAtA[i:], m.Tiles3[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles3[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Tiles2) > 0 {
		for iNdEx := len(m.Tiles2) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles2[iNdEx])
			copy(dAtA[i:], m.Tiles2[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles2[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Tiles1) > 0 {
		for iNdEx := len(m.Tiles1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles1[iNdEx])
			copy(dAtA[i:], m.Tiles1[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles1[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Tiles0) > 0 {
		for iNdEx := len(m.Tiles0) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles0[iNdEx])
			copy(dAtA[i:], m.Tiles0[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles0[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Liqibang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liqibang))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Scores) > 0 {
		dAtA290 := make([]byte, len(m.Scores)*10)
		var j289 int
		for _, num1 := range m.Scores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA290[j289] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j289++
			}
			dAtA290[j289] = uint8(num)
			j289++
		}
		i -= j289
		copy(dAtA[i:], dAtA290[:j289])
		i = encodeVarintLiqi(dAtA, i, uint64(j289))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Dora) > 0 {
		i -= len(m.Dora)
		copy(dAtA[i:], m.Dora)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Dora)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ben != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ben))
		i--
		dAtA[i] = 0x18
	}
	if m.Ju != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ju))
		i--
		dAtA[i] = 0x10
	}
	if m.Chang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Chang))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordNewRound_TingPai) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordNewRound_TingPai) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordNewRound_TingPai) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tingpais1) > 0 {
		for iNdEx := len(m.Tingpais1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Liqibang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liqibang))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Hands) > 0 {
		for iNdEx := len(m.Hands) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hands[iNdEx])
			copy(dAtA[i:], m.Hands[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hands[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.LeftTileCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftTileCount))
		i--
		dAtA[i] = 0x28
	}
	if m.IndexPlayer != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.IndexPlayer))
		i--
		dAtA[i] = 0x20
	}
	if m.Ben != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ben))
		i--
		dAtA[i] = 0x18
	}
	if m.Ju != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Ju))
		i--
		dAtA[i] = 0x10
	}
	if m.Chang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Chang))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameSnapshot_PlayerSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSnapshot_PlayerSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameSnapshot_PlayerSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mings) > 0 {
		for iNdEx := len(m.Mings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Qipais) > 0 {
		for iNdEx := len(m.Qipais) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Qipais[iNdEx])
			copy(dAtA[i:], m.Qipais[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Qipais[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Tilenum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Tilenum))
		i--
		dAtA[i] = 0x18
	}
	if m.Liqiposition != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liqiposition))
		i--
		dAtA[i] = 0x10
	}
	if m.Score != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		dAtA292 := make([]byte, len(m.From)*10)
		var j291 int
		for _, num := range m.From {
			for num >= 1<<7 {
				dAtA292[j291] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j291++
			}
			dAtA292[j291] = uint8(num)
			j291++
		}
		i -= j291
		copy(dAtA[i:], dAtA292[:j291])
		i = encodeVarintLiqi(dAtA, i, uint64(j291))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tile) > 0 {
		for iNdEx := len(m.Tile) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tile[iNdEx])
			copy(dAtA[i:], m.Tile[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionPrototype) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionPrototype) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionPrototype) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Step != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameDetailRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameDetailRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameDetailRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Records[iNdEx])
			copy(dAtA[i:], m.Records[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Records[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OptionalOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionalOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionalOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Combination) > 0 {
		for iNdEx := len(m.Combination) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Combination[iNdEx])
			copy(dAtA[i:], m.Combination[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Combination[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OptionalOperationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionalOperationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionalOperationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeFixed != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TimeFixed))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeAdd != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TimeAdd))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OperationList) > 0 {
		for iNdEx := len(m.OperationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiQiSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiQiSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiQiSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Liqibang != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Liqibang))
		i--
		dAtA[i] = 0x18
	}
	if m.Score != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FanInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FanInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Val != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Val))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PointSum != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PointSum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.TitleId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.TitleId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PointZimoXian != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PointZimoXian))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PointZimoQin != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PointZimoQin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PointRong != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PointRong))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x72
	}
	if m.Fu != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Fu))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Fans) > 0 {
		for iNdEx := len(m.Fans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x58
	}
	if m.Yiman {
		i--
		if m.Yiman {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.LiDoras) > 0 {
		for iNdEx := len(m.LiDoras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LiDoras[iNdEx])
			copy(dAtA[i:], m.LiDoras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.LiDoras[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Liqi {
		i--
		if m.Liqi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Qinjia {
		i--
		if m.Qinjia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Zimo {
		i--
		if m.Zimo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HuTile) > 0 {
		i -= len(m.HuTile)
		copy(dAtA[i:], m.HuTile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.HuTile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ming) > 0 {
		for iNdEx := len(m.Ming) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ming[iNdEx])
			copy(dAtA[i:], m.Ming[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Ming[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hand) > 0 {
		for iNdEx := len(m.Hand) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hand[iNdEx])
			copy(dAtA[i:], m.Hand[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hand[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TingPaiInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TingPaiInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TingPaiInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BiaoDoraCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.BiaoDoraCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Fu != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Fu))
		i--
		dAtA[i] = 0x28
	}
	if m.Count != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.Yiman {
		i--
		if m.Yiman {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Haveyi {
		i--
		if m.Haveyi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TingPaiDiscardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TingPaiDiscardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TingPaiDiscardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Scores) > 0 {
		dAtA294 := make([]byte, len(m.Scores)*10)
		var j293 int
		for _, num1 := range m.Scores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA294[j293] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j293++
			}
			dAtA294[j293] = uint8(num)
			j293++
		}
		i -= j293
		copy(dAtA[i:], dAtA294[:j293])
		i = encodeVarintLiqi(dAtA, i, uint64(j293))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionDiscardTile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDiscardTile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDiscardTile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsWliqi {
		i--
		if m.IsWliqi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Tingpais) > 0 {
		for iNdEx := len(m.Tingpais) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Moqie {
		i--
		if m.Moqie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsLiqi {
		i--
		if m.IsLiqi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordDiscardTile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordDiscardTile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordDiscardTile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.IsWliqi {
		i--
		if m.IsWliqi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Tingpais) > 0 {
		for iNdEx := len(m.Tingpais) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Zhenting) > 0 {
		for iNdEx := len(m.Zhenting) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Zhenting[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Zhenting)))
		i--
		dAtA[i] = 0x32
	}
	if m.Moqie {
		i--
		if m.Moqie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsLiqi {
		i--
		if m.IsLiqi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionDealTile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDealTile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDealTile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tingpais) > 0 {
		for iNdEx := len(m.Tingpais) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Liqi != nil {
		{
			size, err := m.Liqi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LeftTileCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftTileCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordDealTile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordDealTile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordDealTile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Zhenting) > 0 {
		for iNdEx := len(m.Zhenting) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Zhenting[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Zhenting)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Liqi != nil {
		{
			size, err := m.Liqi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LeftTileCount != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeftTileCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionChiPengGang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionChiPengGang) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionChiPengGang) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tingpais) > 0 {
		for iNdEx := len(m.Tingpais) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Liqi != nil {
		{
			size, err := m.Liqi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Froms) > 0 {
		dAtA303 := make([]byte, len(m.Froms)*10)
		var j302 int
		for _, num := range m.Froms {
			for num >= 1<<7 {
				dAtA303[j302] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j302++
			}
			dAtA303[j302] = uint8(num)
			j302++
		}
		i -= j302
		copy(dAtA[i:], dAtA303[:j302])
		i = encodeVarintLiqi(dAtA, i, uint64(j302))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tiles) > 0 {
		for iNdEx := len(m.Tiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles[iNdEx])
			copy(dAtA[i:], m.Tiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordChiPengGang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordChiPengGang) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordChiPengGang) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Zhenting) > 0 {
		for iNdEx := len(m.Zhenting) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Zhenting[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Zhenting)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Liqi != nil {
		{
			size, err := m.Liqi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Froms) > 0 {
		dAtA307 := make([]byte, len(m.Froms)*10)
		var j306 int
		for _, num := range m.Froms {
			for num >= 1<<7 {
				dAtA307[j306] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j306++
			}
			dAtA307[j306] = uint8(num)
			j306++
		}
		i -= j306
		copy(dAtA[i:], dAtA307[:j306])
		i = encodeVarintLiqi(dAtA, i, uint64(j306))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tiles) > 0 {
		for iNdEx := len(m.Tiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles[iNdEx])
			copy(dAtA[i:], m.Tiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionAnGangAddGang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionAnGangAddGang) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionAnGangAddGang) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tingpais) > 0 {
		for iNdEx := len(m.Tingpais) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tiles) > 0 {
		i -= len(m.Tiles)
		copy(dAtA[i:], m.Tiles)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordAnGangAddGang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordAnGangAddGang) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordAnGangAddGang) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Tiles) > 0 {
		i -= len(m.Tiles)
		copy(dAtA[i:], m.Tiles)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionBaBei) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionBaBei) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionBaBei) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Moqie {
		i--
		if m.Moqie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Tingpais) > 0 {
		for iNdEx := len(m.Tingpais) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tingpais[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Zhenting {
		i--
		if m.Zhenting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordBaBei) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordBaBei) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordBaBei) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Moqie {
		i--
		if m.Moqie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionHule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionHule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionHule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Gameend != nil {
		{
			size, err := m.Gameend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Scores) > 0 {
		dAtA312 := make([]byte, len(m.Scores)*10)
		var j311 int
		for _, num1 := range m.Scores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA312[j311] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j311++
			}
			dAtA312[j311] = uint8(num)
			j311++
		}
		i -= j311
		copy(dAtA[i:], dAtA312[:j311])
		i = encodeVarintLiqi(dAtA, i, uint64(j311))
		i--
		dAtA[i] = 0x2a
	}
	if m.WaitTimeout != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.WaitTimeout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DeltaScores) > 0 {
		dAtA314 := make([]byte, len(m.DeltaScores)*10)
		var j313 int
		for _, num1 := range m.DeltaScores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA314[j313] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j313++
			}
			dAtA314[j313] = uint8(num)
			j313++
		}
		i -= j313
		copy(dAtA[i:], dAtA314[:j313])
		i = encodeVarintLiqi(dAtA, i, uint64(j313))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldScores) > 0 {
		dAtA316 := make([]byte, len(m.OldScores)*10)
		var j315 int
		for _, num1 := range m.OldScores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA316[j315] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j315++
			}
			dAtA316[j315] = uint8(num)
			j315++
		}
		i -= j315
		copy(dAtA[i:], dAtA316[:j315])
		i = encodeVarintLiqi(dAtA, i, uint64(j315))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hules) > 0 {
		for iNdEx := len(m.Hules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordHule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordHule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordHule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Gameend != nil {
		{
			size, err := m.Gameend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Scores) > 0 {
		dAtA319 := make([]byte, len(m.Scores)*10)
		var j318 int
		for _, num1 := range m.Scores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA319[j318] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j318++
			}
			dAtA319[j318] = uint8(num)
			j318++
		}
		i -= j318
		copy(dAtA[i:], dAtA319[:j318])
		i = encodeVarintLiqi(dAtA, i, uint64(j318))
		i--
		dAtA[i] = 0x2a
	}
	if m.WaitTimeout != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.WaitTimeout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DeltaScores) > 0 {
		dAtA321 := make([]byte, len(m.DeltaScores)*10)
		var j320 int
		for _, num1 := range m.DeltaScores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA321[j320] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j320++
			}
			dAtA321[j320] = uint8(num)
			j320++
		}
		i -= j320
		copy(dAtA[i:], dAtA321[:j320])
		i = encodeVarintLiqi(dAtA, i, uint64(j320))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldScores) > 0 {
		dAtA323 := make([]byte, len(m.OldScores)*10)
		var j322 int
		for _, num1 := range m.OldScores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA323[j322] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j322++
			}
			dAtA323[j322] = uint8(num)
			j322++
		}
		i -= j322
		copy(dAtA[i:], dAtA323[:j322])
		i = encodeVarintLiqi(dAtA, i, uint64(j322))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hules) > 0 {
		for iNdEx := len(m.Hules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionLiuJu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionLiuJu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionLiuJu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Allplayertiles) > 0 {
		for iNdEx := len(m.Allplayertiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Allplayertiles[iNdEx])
			copy(dAtA[i:], m.Allplayertiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Allplayertiles[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Liqi != nil {
		{
			size, err := m.Liqi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tiles) > 0 {
		for iNdEx := len(m.Tiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles[iNdEx])
			copy(dAtA[i:], m.Tiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x18
	}
	if m.Gameend != nil {
		{
			size, err := m.Gameend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordLiuJu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordLiuJu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordLiuJu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Allplayertiles) > 0 {
		for iNdEx := len(m.Allplayertiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Allplayertiles[iNdEx])
			copy(dAtA[i:], m.Allplayertiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Allplayertiles[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Liqi != nil {
		{
			size, err := m.Liqi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tiles) > 0 {
		for iNdEx := len(m.Tiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tiles[iNdEx])
			copy(dAtA[i:], m.Tiles[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tiles[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x18
	}
	if m.Gameend != nil {
		{
			size, err := m.Gameend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoTilePlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoTilePlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoTilePlayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tings) > 0 {
		for iNdEx := len(m.Tings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Hand) > 0 {
		for iNdEx := len(m.Hand) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hand[iNdEx])
			copy(dAtA[i:], m.Hand[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hand[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Tingpai {
		i--
		if m.Tingpai {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *NoTileScoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoTileScoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoTileScoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Doras) > 0 {
		for iNdEx := len(m.Doras) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Doras[iNdEx])
			copy(dAtA[i:], m.Doras[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Doras[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Ming) > 0 {
		for iNdEx := len(m.Ming) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ming[iNdEx])
			copy(dAtA[i:], m.Ming[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Ming[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Hand) > 0 {
		for iNdEx := len(m.Hand) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hand[iNdEx])
			copy(dAtA[i:], m.Hand[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.Hand[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DeltaScores) > 0 {
		dAtA329 := make([]byte, len(m.DeltaScores)*10)
		var j328 int
		for _, num1 := range m.DeltaScores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA329[j328] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j328++
			}
			dAtA329[j328] = uint8(num)
			j328++
		}
		i -= j328
		copy(dAtA[i:], dAtA329[:j328])
		i = encodeVarintLiqi(dAtA, i, uint64(j328))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldScores) > 0 {
		dAtA331 := make([]byte, len(m.OldScores)*10)
		var j330 int
		for _, num1 := range m.OldScores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA331[j330] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j330++
			}
			dAtA331[j330] = uint8(num)
			j330++
		}
		i -= j330
		copy(dAtA[i:], dAtA331[:j330])
		i = encodeVarintLiqi(dAtA, i, uint64(j330))
		i--
		dAtA[i] = 0x12
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionNoTile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionNoTile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionNoTile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gameend {
		i--
		if m.Gameend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Liujumanguan {
		i--
		if m.Liujumanguan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordNoTile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordNoTile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordNoTile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gameend {
		i--
		if m.Gameend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Liujumanguan {
		i--
		if m.Liujumanguan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqAuthGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAuthGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqAuthGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResAuthGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResAuthGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResAuthGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReadyIdList) > 0 {
		dAtA333 := make([]byte, len(m.ReadyIdList)*10)
		var j332 int
		for _, num := range m.ReadyIdList {
			for num >= 1<<7 {
				dAtA333[j332] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j332++
			}
			dAtA333[j332] = uint8(num)
			j332++
		}
		i -= j332
		copy(dAtA[i:], dAtA333[:j332])
		i = encodeVarintLiqi(dAtA, i, uint64(j332))
		i--
		dAtA[i] = 0x32
	}
	if m.GameConfig != nil {
		{
			size, err := m.GameConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsGameStart {
		i--
		if m.IsGameStart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.SeatList) > 0 {
		dAtA336 := make([]byte, len(m.SeatList)*10)
		var j335 int
		for _, num := range m.SeatList {
			for num >= 1<<7 {
				dAtA336[j335] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j335++
			}
			dAtA336[j335] = uint8(num)
			j335++
		}
		i -= j335
		copy(dAtA[i:], dAtA336[:j335])
		i = encodeVarintLiqi(dAtA, i, uint64(j335))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameRestore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRestore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRestore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastPauseTimeMs != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LastPauseTimeMs))
		i--
		dAtA[i] = 0x30
	}
	if m.StartTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.GameState != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.GameState))
		i--
		dAtA[i] = 0x20
	}
	if m.PassedWaitingTime != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.PassedWaitingTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResEnterGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResEnterGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResEnterGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameRestore != nil {
		{
			size, err := m.GameRestore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Step != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSyncGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSyncGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSyncGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Step != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoundId) > 0 {
		i -= len(m.RoundId)
		copy(dAtA[i:], m.RoundId)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.RoundId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResSyncGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResSyncGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResSyncGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameRestore != nil {
		{
			size, err := m.GameRestore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Step != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqSelfOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSelfOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSelfOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeuse != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Timeuse))
		i--
		dAtA[i] = 0x30
	}
	if m.Moqie {
		i--
		if m.Moqie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CancelOperation {
		i--
		if m.CancelOperation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Tile) > 0 {
		i -= len(m.Tile)
		copy(dAtA[i:], m.Tile)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Tile)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqChiPengGang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChiPengGang) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqChiPengGang) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeuse != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Timeuse))
		i--
		dAtA[i] = 0x30
	}
	if m.CancelOperation {
		i--
		if m.CancelOperation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqBroadcastInGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBroadcastInGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqBroadcastInGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExceptSelf {
		i--
		if m.ExceptSelf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqGMCommandInGaming) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGMCommandInGaming) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGMCommandInGaming) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JsonData) > 0 {
		i -= len(m.JsonData)
		copy(dAtA[i:], m.JsonData)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.JsonData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResGamePlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResGamePlayerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResGamePlayerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StateList) > 0 {
		dAtA344 := make([]byte, len(m.StateList)*10)
		var j343 int
		for _, num := range m.StateList {
			for num >= 1<<7 {
				dAtA344[j343] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j343++
			}
			dAtA344[j343] = uint8(num)
			j343++
		}
		i -= j343
		copy(dAtA[i:], dAtA344[:j343])
		i = encodeVarintLiqi(dAtA, i, uint64(j343))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyNewGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyNewGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyNewGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerList) > 0 {
		for iNdEx := len(m.PlayerList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayerList[iNdEx])
			copy(dAtA[i:], m.PlayerList[iNdEx])
			i = encodeVarintLiqi(dAtA, i, uint64(len(m.PlayerList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GameUuid) > 0 {
		i -= len(m.GameUuid)
		copy(dAtA[i:], m.GameUuid)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.GameUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyPlayerLoadGameReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyPlayerLoadGameReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyPlayerLoadGameReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReadyIdList) > 0 {
		dAtA347 := make([]byte, len(m.ReadyIdList)*10)
		var j346 int
		for _, num := range m.ReadyIdList {
			for num >= 1<<7 {
				dAtA347[j346] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j346++
			}
			dAtA347[j346] = uint8(num)
			j346++
		}
		i -= j346
		copy(dAtA[i:], dAtA347[:j346])
		i = encodeVarintLiqi(dAtA, i, uint64(j346))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameBroadcast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameBroadcast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameBroadcast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameEndResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameEndResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameEndResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameTerminate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameTerminate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameTerminate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintLiqi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyPlayerConnectionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyPlayerConnectionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyPlayerConnectionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Seat != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyAccountLevelChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAccountLevelChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAccountLevelChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Final != nil {
		{
			size, err := m.Final.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameFinishReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameFinishReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameFinishReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CharacterGift != nil {
		{
			size, err := m.CharacterGift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MainCharacter != nil {
		{
			size, err := m.MainCharacter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MatchChest != nil {
		{
			size, err := m.MatchChest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LevelChange != nil {
		{
			size, err := m.LevelChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ModeId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ModeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameFinishReward_LevelChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameFinishReward_LevelChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameFinishReward_LevelChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Final != nil {
		{
			size, err := m.Final.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiqi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameFinishReward_MatchChest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameFinishReward_MatchChest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameFinishReward_MatchChest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsGraded {
		i--
		if m.IsGraded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Final != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Final))
		i--
		dAtA[i] = 0x18
	}
	if m.Origin != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Origin))
		i--
		dAtA[i] = 0x10
	}
	if m.ChestId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ChestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameFinishReward_MainCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameFinishReward_MainCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameFinishReward_MainCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Add != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Add))
		i--
		dAtA[i] = 0x18
	}
	if m.Exp != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGameFinishReward_CharacterGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGameFinishReward_CharacterGift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGameFinishReward_CharacterGift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsGraded {
		i--
		if m.IsGraded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Add != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Add))
		i--
		dAtA[i] = 0x18
	}
	if m.Final != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Final))
		i--
		dAtA[i] = 0x10
	}
	if m.Origin != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Origin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActivityReward) > 0 {
		for iNdEx := len(m.ActivityReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActivityReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyActivityReward_ActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyActivityReward_ActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyActivityReward_ActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyActivityPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyActivityPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyActivityPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActivityPoints) > 0 {
		for iNdEx := len(m.ActivityPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActivityPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyActivityPoint_ActivityPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyActivityPoint_ActivityPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyActivityPoint_ActivityPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Point != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyLeaderboardPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyLeaderboardPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyLeaderboardPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LeaderboardPoints) > 0 {
		for iNdEx := len(m.LeaderboardPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeaderboardPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiqi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyLeaderboardPoint_LeaderboardPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyLeaderboardPoint_LeaderboardPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyLeaderboardPoint_LeaderboardPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Point != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if m.LeaderboardId != 0 {
		i = encodeVarintLiqi(dAtA, i, uint64(m.LeaderboardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyGamePause) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyGamePause) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyGamePause) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiqi(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiqi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotifyRoomGameStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ConnectToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyMatchGameStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ConnectToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MatchModeId != 0 {
		n += 1 + sovLiqi(uint64(m.MatchModeId))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyRoomPlayerReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.Ready {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyRoomPlayerUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateList) > 0 {
		for _, e := range m.UpdateList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.RemoveList) > 0 {
		l = 0
		for _, e := range m.RemoveList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.OwnerId != 0 {
		n += 1 + sovLiqi(uint64(m.OwnerId))
	}
	if m.RobotCount != 0 {
		n += 1 + sovLiqi(uint64(m.RobotCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyRoomKickOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyMatchTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyFriendStateChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.ActiveState != nil {
		l = m.ActiveState.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyFriendViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyFriendChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.Friend != nil {
		l = m.Friend.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyNewFriendApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.ApplyTime != 0 {
		n += 1 + sovLiqi(uint64(m.ApplyTime))
	}
	if m.RemovedId != 0 {
		n += 1 + sovLiqi(uint64(m.RemovedId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyAccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyAnotherLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyAccountLogout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyAnnouncementUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Announcements) > 0 {
		for _, e := range m.Announcements {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Sort) > 0 {
		l = 0
		for _, e := range m.Sort {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyNewMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyDeleteMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MailIdList) > 0 {
		l = 0
		for _, e := range m.MailIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyReviveCoinUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasGained {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyDailyTaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.MaxDailyTaskCount != 0 {
		n += 1 + sovLiqi(uint64(m.MaxDailyTaskCount))
	}
	if m.RefreshCount != 0 {
		n += 1 + sovLiqi(uint64(m.RefreshCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyActivityTaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyNewComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyRollingNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notice != nil {
		l = m.Notice.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGiftSendRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyShopUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShopInfo != nil {
		l = m.ShopInfo.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyVipLevelChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GiftLimit != 0 {
		n += 1 + sovLiqi(uint64(m.GiftLimit))
	}
	if m.FriendMaxCount != 0 {
		n += 1 + sovLiqi(uint64(m.FriendMaxCount))
	}
	if m.ZhpFreeRefreshLimit != 0 {
		n += 1 + sovLiqi(uint64(m.ZhpFreeRefreshLimit))
	}
	if m.ZhpCostRefreshLimit != 0 {
		n += 1 + sovLiqi(uint64(m.ZhpCostRefreshLimit))
	}
	if m.BuddyBonus != 0 {
		n += 5
	}
	if m.RecordCollectLimit != 0 {
		n += 1 + sovLiqi(uint64(m.RecordCollectLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyServerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyPayResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayResult != 0 {
		n += 1 + sovLiqi(uint64(m.PayResult))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyCustomContestAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyCustomContestSystemMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.GameStart != nil {
		l = m.GameStart.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.GameEnd != nil {
		l = m.GameEnd.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyCustomContestState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyActivityChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewActivities) > 0 {
		for _, e := range m.NewActivities {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.EndActivities) > 0 {
		l = 0
		for _, e := range m.EndActivities {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLiqi(uint64(m.Code))
	}
	if len(m.U32Params) > 0 {
		l = 0
		for _, e := range m.U32Params {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.StrParams) > 0 {
		for _, s := range m.StrParams {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	l = len(m.JsonParam)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovLiqi(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AntiAddiction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnlineDuration != 0 {
		n += 1 + sovLiqi(uint64(m.OnlineDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalPositionCounts) > 0 {
		l = 0
		for _, e := range m.FinalPositionCounts {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.RecentRound != nil {
		l = m.RecentRound.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.RecentHu != nil {
		l = m.RecentHu.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.HighestHu != nil {
		l = m.HighestHu.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Recent_20HuSummary != nil {
		l = m.Recent_20HuSummary.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Recent_10HuSummary != nil {
		l = m.Recent_10HuSummary.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Recent_10GameResult) > 0 {
		for _, e := range m.Recent_10GameResult {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic_RoundSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalCount))
	}
	if m.RongCount != 0 {
		n += 1 + sovLiqi(uint64(m.RongCount))
	}
	if m.ZimoCount != 0 {
		n += 1 + sovLiqi(uint64(m.ZimoCount))
	}
	if m.FangchongCount != 0 {
		n += 1 + sovLiqi(uint64(m.FangchongCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic_HuSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalCount))
	}
	if m.DoraRoundCount != 0 {
		n += 1 + sovLiqi(uint64(m.DoraRoundCount))
	}
	if m.TotalFan != 0 {
		n += 1 + sovLiqi(uint64(m.TotalFan))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic_HighestHuRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fanshu != 0 {
		n += 1 + sovLiqi(uint64(m.Fanshu))
	}
	if m.Doranum != 0 {
		n += 1 + sovLiqi(uint64(m.Doranum))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Hands) > 0 {
		for _, s := range m.Hands {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Ming) > 0 {
		for _, s := range m.Ming {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	l = len(m.Hupai)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.TitleId != 0 {
		n += 1 + sovLiqi(uint64(m.TitleId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic_Liqi20Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalCount))
	}
	if m.TotalLidoraCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalLidoraCount))
	}
	if m.AverageHuPoint != 0 {
		n += 1 + sovLiqi(uint64(m.AverageHuPoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic_LiQi10Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalXuanshang != 0 {
		n += 1 + sovLiqi(uint64(m.TotalXuanshang))
	}
	if m.TotalFanshu != 0 {
		n += 1 + sovLiqi(uint64(m.TotalFanshu))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountMahjongStatistic_GameResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovLiqi(uint64(m.Rank))
	}
	if m.FinalPoint != 0 {
		n += 1 + sovLiqi(uint64(m.FinalPoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountStatisticData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MahjongCategory != 0 {
		n += 1 + sovLiqi(uint64(m.MahjongCategory))
	}
	if m.GameCategory != 0 {
		n += 1 + sovLiqi(uint64(m.GameCategory))
	}
	if m.Statistic != nil {
		l = m.Statistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Score != 0 {
		n += 1 + sovLiqi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LoginTime != 0 {
		n += 1 + sovLiqi(uint64(m.LoginTime))
	}
	if m.LogoutTime != 0 {
		n += 1 + sovLiqi(uint64(m.LogoutTime))
	}
	if m.RoomId != 0 {
		n += 1 + sovLiqi(uint64(m.RoomId))
	}
	if m.AntiAddiction != nil {
		l = m.AntiAddiction.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Title != 0 {
		n += 1 + sovLiqi(uint64(m.Title))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.EmailVerify != 0 {
		n += 1 + sovLiqi(uint64(m.EmailVerify))
	}
	if m.Gold != 0 {
		n += 1 + sovLiqi(uint64(m.Gold))
	}
	if m.Diamond != 0 {
		n += 1 + sovLiqi(uint64(m.Diamond))
	}
	if m.AvatarId != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarId))
	}
	if m.Vip != 0 {
		n += 1 + sovLiqi(uint64(m.Vip))
	}
	if m.Birthday != 0 {
		n += 1 + sovLiqi(uint64(m.Birthday))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 2 + l + sovLiqi(uint64(l))
	}
	if m.PhoneVerify != 0 {
		n += 2 + sovLiqi(uint64(m.PhoneVerify))
	}
	if len(m.PlatformDiamond) > 0 {
		for _, e := range m.PlatformDiamond {
			l = e.Size()
			n += 2 + l + sovLiqi(uint64(l))
		}
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 2 + l + sovLiqi(uint64(l))
	}
	if m.Level3 != nil {
		l = m.Level3.Size()
		n += 2 + l + sovLiqi(uint64(l))
	}
	if m.AvatarFrame != 0 {
		n += 2 + sovLiqi(uint64(m.AvatarFrame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account_PlatformDiamond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountOwnerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnlockCharacters) > 0 {
		l = 0
		for _, e := range m.UnlockCharacters {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Numerical) > 0 {
		for _, e := range m.Numerical {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Character != nil {
		l = m.Character.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Bag != nil {
		l = m.Bag.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Achievement != nil {
		l = m.Achievement.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Shilian != nil {
		l = m.Shilian.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.DailyTask != nil {
		l = m.DailyTask.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.NewRechargedList) > 0 {
		l = 0
		for _, e := range m.NewRechargedList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.ActivityTask != nil {
		l = m.ActivityTask.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ActivityFlipTask != nil {
		l = m.ActivityFlipTask.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_NumericalUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Final != 0 {
		n += 1 + sovLiqi(uint64(m.Final))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_CharacterUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Characters) > 0 {
		for _, e := range m.Characters {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Skins) > 0 {
		l = 0
		for _, e := range m.Skins {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_AchievementUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_DailyTaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_TitleUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewTitles) > 0 {
		l = 0
		for _, e := range m.NewTitles {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_ActivityTaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountUpdate_ActivityFlipTaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovLiqi(uint64(m.RoomId))
	}
	if m.ModeId != 0 {
		n += 1 + sovLiqi(uint64(m.ModeId))
	}
	if m.ContestUid != 0 {
		n += 1 + sovLiqi(uint64(m.ContestUid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountPlayingGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovLiqi(uint64(m.Category))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountCacheView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheVersion != 0 {
		n += 1 + sovLiqi(uint64(m.CacheVersion))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LoginTime != 0 {
		n += 1 + sovLiqi(uint64(m.LoginTime))
	}
	if m.LogoutTime != 0 {
		n += 1 + sovLiqi(uint64(m.LogoutTime))
	}
	if m.IsOnline {
		n += 2
	}
	if m.RoomId != 0 {
		n += 1 + sovLiqi(uint64(m.RoomId))
	}
	if m.Title != 0 {
		n += 1 + sovLiqi(uint64(m.Title))
	}
	if m.AvatarId != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarId))
	}
	if m.Vip != 0 {
		n += 1 + sovLiqi(uint64(m.Vip))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.PlayingGame != nil {
		l = m.PlayingGame.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level3 != nil {
		l = m.Level3.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarFrame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBaseView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.AvatarId != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarId))
	}
	if m.Title != 0 {
		n += 1 + sovLiqi(uint64(m.Title))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level3 != nil {
		l = m.Level3.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarFrame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerGameView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.AvatarId != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarId))
	}
	if m.Title != 0 {
		n += 1 + sovLiqi(uint64(m.Title))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Character != nil {
		l = m.Character.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level3 != nil {
		l = m.Level3.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarFrame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovLiqi(uint64(m.Mode))
	}
	if m.Ai {
		n += 2
	}
	l = len(m.Extendinfo)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.DetailRule != nil {
		l = m.DetailRule.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.TestingEnvironment != nil {
		l = m.TestingEnvironment.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameTestingEnvironmentSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paixing != 0 {
		n += 1 + sovLiqi(uint64(m.Paixing))
	}
	if m.LeftCount != 0 {
		n += 1 + sovLiqi(uint64(m.LeftCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameDetailRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeFixed != 0 {
		n += 1 + sovLiqi(uint64(m.TimeFixed))
	}
	if m.TimeAdd != 0 {
		n += 1 + sovLiqi(uint64(m.TimeAdd))
	}
	if m.DoraCount != 0 {
		n += 1 + sovLiqi(uint64(m.DoraCount))
	}
	if m.Shiduan != 0 {
		n += 1 + sovLiqi(uint64(m.Shiduan))
	}
	if m.InitPoint != 0 {
		n += 1 + sovLiqi(uint64(m.InitPoint))
	}
	if m.Fandian != 0 {
		n += 1 + sovLiqi(uint64(m.Fandian))
	}
	if m.CanJifei {
		n += 2
	}
	if m.TianbianValue != 0 {
		n += 1 + sovLiqi(uint64(m.TianbianValue))
	}
	if m.LiqibangValue != 0 {
		n += 1 + sovLiqi(uint64(m.LiqibangValue))
	}
	if m.ChangbangValue != 0 {
		n += 1 + sovLiqi(uint64(m.ChangbangValue))
	}
	if m.NotingFafu_1 != 0 {
		n += 1 + sovLiqi(uint64(m.NotingFafu_1))
	}
	if m.NotingFafu_2 != 0 {
		n += 1 + sovLiqi(uint64(m.NotingFafu_2))
	}
	if m.NotingFafu_3 != 0 {
		n += 1 + sovLiqi(uint64(m.NotingFafu_3))
	}
	if m.HaveLiujumanguan {
		n += 2
	}
	if m.HaveQieshangmanguan {
		n += 2
	}
	if m.HaveBiaoDora {
		n += 3
	}
	if m.HaveGangBiaoDora {
		n += 3
	}
	if m.MingDoraImmediatelyOpen {
		n += 3
	}
	if m.HaveLiDora {
		n += 3
	}
	if m.HaveGangLiDora {
		n += 3
	}
	if m.HaveSifenglianda {
		n += 3
	}
	if m.HaveSigangsanle {
		n += 3
	}
	if m.HaveSijializhi {
		n += 3
	}
	if m.HaveJiuzhongjiupai {
		n += 3
	}
	if m.HaveSanjiahele {
		n += 3
	}
	if m.HaveToutiao {
		n += 3
	}
	if m.HaveHelelianzhuang {
		n += 3
	}
	if m.HaveHelezhongju {
		n += 3
	}
	if m.HaveTingpailianzhuang {
		n += 3
	}
	if m.HaveTingpaizhongju {
		n += 3
	}
	if m.HaveYifa {
		n += 3
	}
	if m.HaveNanruxiru {
		n += 3
	}
	if m.Jingsuanyuandian != 0 {
		n += 2 + sovLiqi(uint64(m.Jingsuanyuandian))
	}
	if m.Shunweima_2 != 0 {
		n += 2 + sovLiqi(uint64(m.Shunweima_2))
	}
	if m.Shunweima_3 != 0 {
		n += 2 + sovLiqi(uint64(m.Shunweima_3))
	}
	if m.Shunweima_4 != 0 {
		n += 2 + sovLiqi(uint64(m.Shunweima_4))
	}
	if m.Bianjietishi {
		n += 3
	}
	if m.AiLevel != 0 {
		n += 2 + sovLiqi(uint64(m.AiLevel))
	}
	if m.HaveZimosun {
		n += 3
	}
	if m.DisableMultiYukaman {
		n += 3
	}
	if m.Fanfu != 0 {
		n += 2 + sovLiqi(uint64(m.Fanfu))
	}
	if m.GuyiMode != 0 {
		n += 2 + sovLiqi(uint64(m.GuyiMode))
	}
	if m.Dora3Mode != 0 {
		n += 2 + sovLiqi(uint64(m.Dora3Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovLiqi(uint64(m.RoomId))
	}
	if m.OwnerId != 0 {
		n += 1 + sovLiqi(uint64(m.OwnerId))
	}
	if m.Mode != nil {
		l = m.Mode.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MaxPlayerCount != 0 {
		n += 1 + sovLiqi(uint64(m.MaxPlayerCount))
	}
	if len(m.Persons) > 0 {
		for _, e := range m.Persons {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.ReadyList) > 0 {
		l = 0
		for _, e := range m.ReadyList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.IsPlaying {
		n += 2
	}
	if m.PublicLive {
		n += 2
	}
	if m.RobotCount != 0 {
		n += 1 + sovLiqi(uint64(m.RobotCount))
	}
	if m.TournamentId != 0 {
		n += 1 + sovLiqi(uint64(m.TournamentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameEndResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameEndResult_PlayerItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.TotalPoint != 0 {
		n += 1 + sovLiqi(uint64(m.TotalPoint))
	}
	if m.PartPoint_1 != 0 {
		n += 1 + sovLiqi(uint64(m.PartPoint_1))
	}
	if m.PartPoint_2 != 0 {
		n += 1 + sovLiqi(uint64(m.PartPoint_2))
	}
	if m.GradingScore != 0 {
		n += 1 + sovLiqi(uint64(m.GradingScore))
	}
	if m.Gold != 0 {
		n += 1 + sovLiqi(uint64(m.Gold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameConnectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemGainRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemGainRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordTime != 0 {
		n += 1 + sovLiqi(uint64(m.RecordTime))
	}
	if m.LimitSourceId != 0 {
		n += 1 + sovLiqi(uint64(m.LimitSourceId))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.Stack != 0 {
		n += 1 + sovLiqi(uint64(m.Stack))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.DailyGainRecord) > 0 {
		for _, e := range m.DailyGainRecord {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateItems) > 0 {
		for _, e := range m.UpdateItems {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.UpdateDailyGainRecord) > 0 {
		for _, e := range m.UpdateDailyGainRecord {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardSlot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Replace != nil {
		l = m.Replace.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardPlusResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.Exchange != nil {
		l = m.Exchange.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardPlusResult_Exchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.Exchange != 0 {
		n += 1 + sovLiqi(uint64(m.Exchange))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecuteReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Replace != nil {
		l = m.Replace.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ReplaceCount != 0 {
		n += 1 + sovLiqi(uint64(m.ReplaceCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Mail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLiqi(uint64(m.MailId))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.TakeAttachment {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.CreateTime != 0 {
		n += 1 + sovLiqi(uint64(m.CreateTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovLiqi(uint64(m.ExpireTime))
	}
	if m.ReferenceId != 0 {
		n += 1 + sovLiqi(uint64(m.ReferenceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AchievementProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Counter != 0 {
		n += 1 + sovLiqi(uint64(m.Counter))
	}
	if m.Achieved {
		n += 2
	}
	if m.Date != 0 {
		n += 1 + sovLiqi(uint64(m.Date))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountStatisticByGameMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovLiqi(uint64(m.Mode))
	}
	if m.GameCountSum != 0 {
		n += 1 + sovLiqi(uint64(m.GameCountSum))
	}
	if len(m.GameFinalPosition) > 0 {
		l = 0
		for _, e := range m.GameFinalPosition {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.FlyCount != 0 {
		n += 1 + sovLiqi(uint64(m.FlyCount))
	}
	if m.GoldEarnSum != 0 {
		n += 5
	}
	if m.RoundCountSum != 0 {
		n += 1 + sovLiqi(uint64(m.RoundCountSum))
	}
	if m.DadianSum != 0 {
		n += 5
	}
	if len(m.RoundEnd) > 0 {
		for _, e := range m.RoundEnd {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.MingCountSum != 0 {
		n += 1 + sovLiqi(uint64(m.MingCountSum))
	}
	if m.LiqiCountSum != 0 {
		n += 1 + sovLiqi(uint64(m.LiqiCountSum))
	}
	if m.XunCountSum != 0 {
		n += 1 + sovLiqi(uint64(m.XunCountSum))
	}
	if m.HighestLianzhuang != 0 {
		n += 1 + sovLiqi(uint64(m.HighestLianzhuang))
	}
	if m.ScoreEarnSum != 0 {
		n += 1 + sovLiqi(uint64(m.ScoreEarnSum))
	}
	if len(m.RankScore) > 0 {
		for _, e := range m.RankScore {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountStatisticByGameMode_RoundEndData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.Sum != 0 {
		n += 1 + sovLiqi(uint64(m.Sum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountStatisticByGameMode_RankScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovLiqi(uint64(m.Rank))
	}
	if m.ScoreSum != 0 {
		n += 1 + sovLiqi(uint64(m.ScoreSum))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountStatisticByFan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FanId != 0 {
		n += 1 + sovLiqi(uint64(m.FanId))
	}
	if m.Sum != 0 {
		n += 1 + sovLiqi(uint64(m.Sum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountFanAchieved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MahjongCategory != 0 {
		n += 1 + sovLiqi(uint64(m.MahjongCategory))
	}
	if len(m.Fan) > 0 {
		for _, e := range m.Fan {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Liujumanguan != 0 {
		n += 1 + sovLiqi(uint64(m.Liujumanguan))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GameMode) > 0 {
		for _, e := range m.GameMode {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Fan) > 0 {
		for _, e := range m.Fan {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Liujumanguan != 0 {
		n += 1 + sovLiqi(uint64(m.Liujumanguan))
	}
	if len(m.FanAchieved) > 0 {
		for _, e := range m.FanAchieved {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatisticByCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + sovLiqi(uint64(m.Category))
	}
	if m.DetailStatistic != nil {
		l = m.DetailStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatisticV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendRoomStatistic != nil {
		l = m.FriendRoomStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.RankStatistic != nil {
		l = m.RankStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CustomizedContestStatistic != nil {
		l = m.CustomizedContestStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LeisureMatchStatistic != nil {
		l = m.LeisureMatchStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatisticV2_RankStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalStatistic != nil {
		l = m.TotalStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MonthStatistic != nil {
		l = m.MonthStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MonthRefreshTime != 0 {
		n += 1 + sovLiqi(uint64(m.MonthRefreshTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllLevelStatistic != nil {
		l = m.AllLevelStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.LevelDataList) > 0 {
		for _, e := range m.LevelDataList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankLevel != 0 {
		n += 1 + sovLiqi(uint64(m.RankLevel))
	}
	if m.Statistic != nil {
		l = m.Statistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountDetailStatisticV2_CustomizedContestStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalStatistic != nil {
		l = m.TotalStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MonthStatistic != nil {
		l = m.MonthStatistic.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MonthRefreshTime != 0 {
		n += 1 + sovLiqi(uint64(m.MonthRefreshTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountShiLian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != 0 {
		n += 1 + sovLiqi(uint64(m.Step))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientDeviceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Browser)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Announcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Counter != 0 {
		n += 1 + sovLiqi(uint64(m.Counter))
	}
	if m.Achieved {
		n += 2
	}
	if m.Rewarded {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + sovLiqi(uint64(m.Category))
	}
	if m.Mode != nil {
		l = m.Mode.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountActiveState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.LoginTime != 0 {
		n += 1 + sovLiqi(uint64(m.LoginTime))
	}
	if m.LogoutTime != 0 {
		n += 1 + sovLiqi(uint64(m.LogoutTime))
	}
	if m.IsOnline {
		n += 2
	}
	if m.Playing != nil {
		l = m.Playing.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLiveUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovLiqi(uint64(m.Timestamp))
	}
	if m.ActionCategory != 0 {
		n += 1 + sovLiqi(uint64(m.ActionCategory))
	}
	l = len(m.ActionData)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLiveSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLiveSegmentUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SegmentId != 0 {
		n += 1 + sovLiqi(uint64(m.SegmentId))
	}
	l = len(m.SegmentUri)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLiveHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.GameConfig != nil {
		l = m.GameConfig.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.SeatList) > 0 {
		l = 0
		for _, e := range m.SeatList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameNewRoundState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SeatStates) > 0 {
		l = 0
		for _, e := range m.SeatStates {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameEndAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameNoopAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentId != 0 {
		n += 1 + sovLiqi(uint64(m.CommentId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovLiqi(uint64(m.Timestamp))
	}
	if m.Commenter != nil {
		l = m.Commenter.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RollingNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLiqi(uint64(m.EndTime))
	}
	if m.RepeatInterval != 0 {
		n += 1 + sovLiqi(uint64(m.RepeatInterval))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingGoods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ResourceId != 0 {
		n += 1 + sovLiqi(uint64(m.ResourceId))
	}
	if m.ResourceCount != 0 {
		n += 1 + sovLiqi(uint64(m.ResourceCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillShortcut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.DealPrice != 0 {
		n += 1 + sovLiqi(uint64(m.DealPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.CurrencyCode)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CurrencyPrice != 0 {
		n += 1 + sovLiqi(uint64(m.CurrencyPrice))
	}
	if m.SortWeight != 0 {
		n += 1 + sovLiqi(uint64(m.SortWeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Character) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Charid != 0 {
		n += 1 + sovLiqi(uint64(m.Charid))
	}
	if m.Level != 0 {
		n += 1 + sovLiqi(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovLiqi(uint64(m.Exp))
	}
	if len(m.Views) > 0 {
		for _, e := range m.Views {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Skin != 0 {
		n += 1 + sovLiqi(uint64(m.Skin))
	}
	if m.IsUpgraded {
		n += 2
	}
	if len(m.ExtraEmoji) > 0 {
		l = 0
		for _, e := range m.ExtraEmoji {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Character_ViewSlotSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovLiqi(uint64(m.Slot))
	}
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuyRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZHPShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Goods) > 0 {
		l = 0
		for _, e := range m.Goods {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.BuyRecords) > 0 {
		for _, e := range m.BuyRecords {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.FreeRefresh != nil {
		l = m.FreeRefresh.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CostRefresh != nil {
		l = m.CostRefresh.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZHPShop_RefreshCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.Limit != 0 {
		n += 1 + sovLiqi(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonthTicketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.EndTime != 0 {
		n += 1 + sovLiqi(uint64(m.EndTime))
	}
	if m.LastPayTime != 0 {
		n += 1 + sovLiqi(uint64(m.LastPayTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Zhp != nil {
		l = m.Zhp.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.BuyRecords) > 0 {
		for _, e := range m.BuyRecords {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.LastRefreshTime != 0 {
		n += 1 + sovLiqi(uint64(m.LastRefreshTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeNicknameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovLiqi(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentSetting != nil {
		l = m.PaymentSetting.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenPayment != 0 {
		n += 1 + sovLiqi(uint64(m.OpenPayment))
	}
	if m.PaymentInfoShowType != 0 {
		n += 1 + sovLiqi(uint64(m.PaymentInfoShowType))
	}
	l = len(m.PaymentInfo)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Wechat != nil {
		l = m.Wechat.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Alipay != nil {
		l = m.Alipay.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentSetting_WechatData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableCreate {
		n += 2
	}
	if m.PaymentSourcePlatform != 0 {
		n += 1 + sovLiqi(uint64(m.PaymentSourcePlatform))
	}
	if m.EnableCredit {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentSetting_AlipayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableCreate {
		n += 2
	}
	if m.PaymentSourcePlatform != 0 {
		n += 1 + sovLiqi(uint64(m.PaymentSourcePlatform))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovLiqi(uint64(m.Key))
	}
	if m.Value != 0 {
		n += 1 + sovLiqi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChestData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChestId != 0 {
		n += 1 + sovLiqi(uint64(m.ChestId))
	}
	if m.TotalOpenCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalOpenCount))
	}
	if m.ConsumeCount != 0 {
		n += 1 + sovLiqi(uint64(m.ConsumeCount))
	}
	if m.FaceBlackCount != 0 {
		n += 1 + sovLiqi(uint64(m.FaceBlackCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChestDataV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChestId != 0 {
		n += 1 + sovLiqi(uint64(m.ChestId))
	}
	if m.TotalOpenCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalOpenCount))
	}
	if m.FaceBlackCount != 0 {
		n += 1 + sovLiqi(uint64(m.FaceBlackCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FaithData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaithId != 0 {
		n += 1 + sovLiqi(uint64(m.FaithId))
	}
	if m.TotalOpenCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalOpenCount))
	}
	if m.ConsumeCount != 0 {
		n += 1 + sovLiqi(uint64(m.ConsumeCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.ContestId != 0 {
		n += 1 + sovLiqi(uint64(m.ContestId))
	}
	l = len(m.ContestName)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.CreatorId != 0 {
		n += 1 + sovLiqi(uint64(m.CreatorId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovLiqi(uint64(m.CreateTime))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovLiqi(uint64(m.FinishTime))
	}
	if m.Open {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	l = len(m.PublicNotice)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestAbstract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.ContestId != 0 {
		n += 1 + sovLiqi(uint64(m.ContestId))
	}
	l = len(m.ContestName)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.CreatorId != 0 {
		n += 1 + sovLiqi(uint64(m.CreatorId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovLiqi(uint64(m.CreateTime))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovLiqi(uint64(m.FinishTime))
	}
	if m.Open {
		n += 2
	}
	l = len(m.PublicNotice)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.ContestId != 0 {
		n += 1 + sovLiqi(uint64(m.ContestId))
	}
	l = len(m.ContestName)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.CreatorId != 0 {
		n += 1 + sovLiqi(uint64(m.CreatorId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovLiqi(uint64(m.CreateTime))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovLiqi(uint64(m.FinishTime))
	}
	if m.Open {
		n += 2
	}
	if m.RankRule != 0 {
		n += 1 + sovLiqi(uint64(m.RankRule))
	}
	if m.GameMode != nil {
		l = m.GameMode.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.PrivateNotice)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestPlayerReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankRule != 0 {
		n += 1 + sovLiqi(uint64(m.RankRule))
	}
	if m.Rank != 0 {
		n += 1 + sovLiqi(uint64(m.Rank))
	}
	if m.Point != 0 {
		n += 1 + sovLiqi(uint64(m.Point))
	}
	if len(m.RecentGameRanks) > 0 {
		l = 0
		for _, e := range m.RecentGameRanks {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.TotalGameCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalGameCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLiqi(uint64(m.EndTime))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordGame_AccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.AvatarId != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarId))
	}
	if m.Character != nil {
		l = m.Character.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Title != 0 {
		n += 1 + sovLiqi(uint64(m.Title))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level3 != nil {
		l = m.Level3.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarFrame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestGameStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestGameStart_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestGameEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomizedContestGameEnd_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.TotalPoint != 0 {
		n += 1 + sovLiqi(uint64(m.TotalPoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Activity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLiqi(uint64(m.EndTime))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExchangeId != 0 {
		n += 1 + sovLiqi(uint64(m.ExchangeId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityAccumulatedPointData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.Point != 0 {
		n += 1 + sovLiqi(uint64(m.Point))
	}
	if len(m.GainedRewardList) > 0 {
		l = 0
		for _, e := range m.GainedRewardList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityRankPointData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderboardId != 0 {
		n += 1 + sovLiqi(uint64(m.LeaderboardId))
	}
	if m.Point != 0 {
		n += 1 + sovLiqi(uint64(m.Point))
	}
	if m.GainedReward {
		n += 2
	}
	if m.GainableTime != 0 {
		n += 1 + sovLiqi(uint64(m.GainableTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRoundHuData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hupai != nil {
		l = m.Hupai.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Fans) > 0 {
		for _, e := range m.Fans {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Score != 0 {
		n += 1 + sovLiqi(uint64(m.Score))
	}
	if m.Xun != 0 {
		n += 1 + sovLiqi(uint64(m.Xun))
	}
	if m.TitleId != 0 {
		n += 1 + sovLiqi(uint64(m.TitleId))
	}
	if m.FanSum != 0 {
		n += 1 + sovLiqi(uint64(m.FanSum))
	}
	if m.FuSum != 0 {
		n += 1 + sovLiqi(uint64(m.FuSum))
	}
	if m.YakumanCount != 0 {
		n += 1 + sovLiqi(uint64(m.YakumanCount))
	}
	if m.BiaoDoraCount != 0 {
		n += 1 + sovLiqi(uint64(m.BiaoDoraCount))
	}
	if m.RedDoraCount != 0 {
		n += 1 + sovLiqi(uint64(m.RedDoraCount))
	}
	if m.LiDoraCount != 0 {
		n += 1 + sovLiqi(uint64(m.LiDoraCount))
	}
	if m.BabeiCount != 0 {
		n += 1 + sovLiqi(uint64(m.BabeiCount))
	}
	if m.XuanShangCount != 0 {
		n += 1 + sovLiqi(uint64(m.XuanShangCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRoundHuData_HuPai) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Liqi != 0 {
		n += 1 + sovLiqi(uint64(m.Liqi))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRoundHuData_Fan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.Fan != 0 {
		n += 1 + sovLiqi(uint64(m.Fan))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRoundPlayerResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if len(m.Hands) > 0 {
		for _, s := range m.Hands {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Ming) > 0 {
		for _, s := range m.Ming {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.LiqiType != 0 {
		n += 1 + sovLiqi(uint64(m.LiqiType))
	}
	if m.IsFulu {
		n += 2
	}
	if m.IsLiujumanguan {
		n += 2
	}
	if m.LianZhuang != 0 {
		n += 1 + sovLiqi(uint64(m.LianZhuang))
	}
	if m.Hu != nil {
		l = m.Hu.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRoundPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovLiqi(uint64(m.Score))
	}
	if m.Rank != 0 {
		n += 1 + sovLiqi(uint64(m.Rank))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRoundSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ju != 0 {
		n += 1 + sovLiqi(uint64(m.Ju))
	}
	if m.Ben != 0 {
		n += 1 + sovLiqi(uint64(m.Ben))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameFinalSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.Category != 0 {
		n += 1 + sovLiqi(uint64(m.Category))
	}
	if m.Mode != nil {
		l = m.Mode.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CalculateParam != nil {
		l = m.CalculateParam.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovLiqi(uint64(m.CreateTime))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovLiqi(uint64(m.FinishTime))
	}
	if len(m.Seats) > 0 {
		for _, e := range m.Seats {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Rounds) > 0 {
		for _, e := range m.Rounds {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.AccountViews) > 0 {
		for _, e := range m.AccountViews {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.FinalPlayers) > 0 {
		for _, e := range m.FinalPlayers {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameFinalSnapshot_CalculateParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitPoint != 0 {
		n += 1 + sovLiqi(uint64(m.InitPoint))
	}
	if m.Jingsuanyuandian != 0 {
		n += 1 + sovLiqi(uint64(m.Jingsuanyuandian))
	}
	if len(m.RankPoints) > 0 {
		l = 0
		for _, e := range m.RankPoints {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameFinalSnapshot_GameSeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.NotifyEndpoint != nil {
		l = m.NotifyEndpoint.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsConnected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameFinalSnapshot_FinalPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.TotalPoint != 0 {
		n += 1 + sovLiqi(uint64(m.TotalPoint))
	}
	if m.PartPoint_1 != 0 {
		n += 1 + sovLiqi(uint64(m.PartPoint_1))
	}
	if m.PartPoint_2 != 0 {
		n += 1 + sovLiqi(uint64(m.PartPoint_2))
	}
	if m.GradingScore != 0 {
		n += 1 + sovLiqi(uint64(m.GradingScore))
	}
	if m.Gold != 0 {
		n += 1 + sovLiqi(uint64(m.Gold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordCollectedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Remarks)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLiqi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ClientEndpoint != nil {
		l = m.ClientEndpoint.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSignupAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResSignupAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Reconnect {
		n += 2
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.GenAccessToken {
		n += 2
	}
	if len(m.CurrencyPlatforms) > 0 {
		l = 0
		for _, e := range m.CurrencyPlatforms {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.GameInfo != nil {
		l = m.GameInfo.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.HasUnreadAnnouncement {
		n += 2
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqEmailLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Reconnect {
		n += 2
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.GenAccessToken {
		n += 2
	}
	if len(m.CurrencyPlatforms) > 0 {
		l = 0
		for _, e := range m.CurrencyPlatforms {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBindAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreatePhoneVerifyCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Usage != 0 {
		n += 1 + sovLiqi(uint64(m.Usage))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateEmailVerifyCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Usage != 0 {
		n += 1 + sovLiqi(uint64(m.Usage))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqVerifyCodeForSecure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Operation != 0 {
		n += 1 + sovLiqi(uint64(m.Operation))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResVerfiyCodeForSecure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.SecureToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBindPhoneNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBindEmail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqModifyPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OldPassword)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.SecureToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOauth2Auth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResOauth2Auth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOauth2Check) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResOauth2Check) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.HasAccount {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOauth2Signup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AdvertiseStr)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResOauth2Signup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOauth2Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Reconnect {
		n += 2
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.CurrencyPlatforms) > 0 {
		l = 0
		for _, e := range m.CurrencyPlatforms {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqLogout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResLogout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqHeatBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOperationCounter != 0 {
		n += 1 + sovLiqi(uint64(m.NoOperationCounter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqLoginBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqJoinMatchQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchMode != 0 {
		n += 1 + sovLiqi(uint64(m.MatchMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCancelMatchQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchMode != 0 {
		n += 1 + sovLiqi(uint64(m.MatchMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqAccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateNickname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AdvertiseStr)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqModifyNickname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.UseItemId != 0 {
		n += 1 + sovLiqi(uint64(m.UseItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqModifyBirthday) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Birthday != 0 {
		n += 1 + sovLiqi(uint64(m.Birthday))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResSelfRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerCount != 0 {
		n += 1 + sovLiqi(uint64(m.PlayerCount))
	}
	if m.Mode != nil {
		l = m.Mode.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.PublicLive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqJoinRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovLiqi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResJoinRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRoomReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRoomStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRoomKick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqModifyRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RobotCount != 0 {
		n += 1 + sovLiqi(uint64(m.RobotCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvatarId != 0 {
		n += 1 + sovLiqi(uint64(m.AvatarId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqAccountStatisticInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountStatisticInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.StatisticData) > 0 {
		for _, e := range m.StatisticData {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.DetailData != nil {
		l = m.DetailData.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountCharacterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnlockList) > 0 {
		l = 0
		for _, e := range m.UnlockList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqShopPurchase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResShopPurchase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.DataUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGameRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovLiqi(uint64(m.Start))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGameRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalCount))
	}
	if len(m.RecordList) > 0 {
		for _, e := range m.RecordList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCollectedGameRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.RecordList) > 0 {
		for _, e := range m.RecordList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.RecordCollectLimit != 0 {
		n += 1 + sovLiqi(uint64(m.RecordCollectLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGameRecordsDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UuidList) > 0 {
		for _, s := range m.UuidList {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGameRecordsDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.RecordList) > 0 {
		for _, e := range m.RecordList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqAddCollectedGameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Remarks)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLiqi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAddCollectedGameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRemoveCollectedGameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResRemoveCollectedGameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeCollectedGameRecordRemarks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Remarks)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResChangeCollectedGameRecordRemarks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqLevelLeaderboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResLevelLeaderboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.SelfRank != 0 {
		n += 1 + sovLiqi(uint64(m.SelfRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResLevelLeaderboard_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.Level != nil {
		l = m.Level.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqMultiAccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountIdList) > 0 {
		l = 0
		for _, e := range m.AccountIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResMultiAccountBrief) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFriendList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.FriendMaxCount != 0 {
		n += 1 + sovLiqi(uint64(m.FriendMaxCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFriendApplyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Applies) > 0 {
		for _, e := range m.Applies {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFriendApplyList_FriendApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.ApplyTime != 0 {
		n += 1 + sovLiqi(uint64(m.ApplyTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqApplyFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqHandleFriendApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.Method != 0 {
		n += 1 + sovLiqi(uint64(m.Method))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRemoveFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSearchAccountByPattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchNext {
		n += 2
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResSearchAccountByPattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsFinished {
		n += 2
	}
	if len(m.MatchAccounts) > 0 {
		l = 0
		for _, e := range m.MatchAccounts {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.DecodeId != 0 {
		n += 1 + sovLiqi(uint64(m.DecodeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqAccountList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountIdList) > 0 {
		l = 0
		for _, e := range m.AccountIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountStates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSearchAccountById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResSearchAccountById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResBagInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Bag != nil {
		l = m.Bag.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUseBagItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOpenManualItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.SelectId != 0 {
		n += 1 + sovLiqi(uint64(m.SelectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOpenRandomRewardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResOpenRandomRewardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqComposeShard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Announcements) > 0 {
		for _, e := range m.Announcements {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Sort) > 0 {
		l = 0
		for _, e := range m.Sort {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.ReadList) > 0 {
		l = 0
		for _, e := range m.ReadList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResMailInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqReadMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLiqi(uint64(m.MailId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDeleteMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLiqi(uint64(m.MailId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqTakeAttachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLiqi(uint64(m.MailId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAchievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResTitleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.TitleList) > 0 {
		l = 0
		for _, e := range m.TitleList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUseTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovLiqi(uint64(m.Title))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBuyShiLian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdateClientValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovLiqi(uint64(m.Key))
	}
	if m.Value != 0 {
		n += 1 + sovLiqi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResClientValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.RechargedCount != 0 {
		n += 1 + sovLiqi(uint64(m.RechargedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResClientValue_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovLiqi(uint64(m.Key))
	}
	if m.Value != 0 {
		n += 1 + sovLiqi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovLiqi(uint64(m.Timestamp))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCurrentMatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModeList) > 0 {
		l = 0
		for _, e := range m.ModeList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCurrentMatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCurrentMatchInfo_CurrentMatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModeId != 0 {
		n += 1 + sovLiqi(uint64(m.ModeId))
	}
	if m.PlayingCount != 0 {
		n += 1 + sovLiqi(uint64(m.PlayingCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqReadAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnnouncementId != 0 {
		n += 1 + sovLiqi(uint64(m.AnnouncementId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResReviveCoinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.HasGained {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResDailyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.HasRefreshCount {
		n += 2
	}
	if m.MaxDailyTaskCount != 0 {
		n += 1 + sovLiqi(uint64(m.MaxDailyTaskCount))
	}
	if m.RefreshCount != 0 {
		n += 1 + sovLiqi(uint64(m.RefreshCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRefreshDailyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLiqi(uint64(m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResRefreshDailyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.RefreshCount != 0 {
		n += 1 + sovLiqi(uint64(m.RefreshCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUseGiftCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResUseGiftCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSendClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGameLiveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGameLiveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LeftStartSeconds != 0 {
		n += 1 + sovLiqi(uint64(m.LeftStartSeconds))
	}
	if m.LiveHead != nil {
		l = m.LiveHead.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.NowMillisecond != 0 {
		n += 1 + sovLiqi(uint64(m.NowMillisecond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGameLiveLeftSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LastSegmentId != 0 {
		n += 1 + sovLiqi(uint64(m.LastSegmentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGameLiveLeftSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LiveState != 0 {
		n += 1 + sovLiqi(uint64(m.LiveState))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.NowMillisecond != 0 {
		n += 1 + sovLiqi(uint64(m.NowMillisecond))
	}
	if m.SegmentEndMillisecond != 0 {
		n += 1 + sovLiqi(uint64(m.SegmentEndMillisecond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGameLiveList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterId != 0 {
		n += 1 + sovLiqi(uint64(m.FilterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGameLiveList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.LiveList) > 0 {
		for _, e := range m.LiveList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCommentSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CommentAllow != 0 {
		n += 1 + sovLiqi(uint64(m.CommentAllow))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdateCommentSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentAllow != 0 {
		n += 1 + sovLiqi(uint64(m.CommentAllow))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCommentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCommentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CommentAllow != 0 {
		n += 1 + sovLiqi(uint64(m.CommentAllow))
	}
	if len(m.CommentIdList) > 0 {
		l = 0
		for _, e := range m.CommentIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.LastReadId != 0 {
		n += 1 + sovLiqi(uint64(m.LastReadId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCommentContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if len(m.CommentIdList) > 0 {
		l = 0
		for _, e := range m.CommentIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCommentContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqLeaveComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDeleteComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovLiqi(uint64(m.TargetId))
	}
	if len(m.DeleteList) > 0 {
		l = 0
		for _, e := range m.DeleteList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdateReadComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadId != 0 {
		n += 1 + sovLiqi(uint64(m.ReadId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRollingNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notice != nil {
		l = m.Notice.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResServerTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerTime != 0 {
		n += 1 + sovLiqi(uint64(m.ServerTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqPlatformBillingProducts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShelvesId != 0 {
		n += 1 + sovLiqi(uint64(m.ShelvesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResPlatformBillingProducts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateBillingOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.PaymentPlatform != 0 {
		n += 1 + sovLiqi(uint64(m.PaymentPlatform))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateBillingOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSolveGooglePlayOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InappPurchaseData)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.InappDataSignature)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCancelGooglePlayOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateWechatNativeOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.AccountIp)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateWechatNativeOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.QrcodeBuffer)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateWechatAppOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.AccountIp)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateWechatAppOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CallWechatAppParam != nil {
		l = m.CallWechatAppParam.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateWechatAppOrder_CallWechatAppParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Appid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Partnerid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Prepayid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Noncestr)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateAlipayOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.AlipayTradeType)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateAlipayOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AlipayUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateAlipayScanOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateAlipayScanOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.QrcodeBuffer)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.QrCode)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateAlipayAppOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateAlipayAppOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AlipayUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateJPCreditCardOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateJPCreditCardOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateJPPaypalOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateJPPaypalOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateJPAuOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateJPAuOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateJPDocomoOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateJPDocomoOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateJPWebMoneyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateJPWebMoneyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateJPSoftbankOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateJPSoftbankOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateENPaypalOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateENPaypalOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateENJCBOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateENJCBOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateENMasterCardOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateENMasterCardOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateENVisaOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateENVisaOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCreateENAlipayOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.ClientType != 0 {
		n += 1 + sovLiqi(uint64(m.ClientType))
	}
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCreateENAlipayOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqOpenChest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChestId != 0 {
		n += 1 + sovLiqi(uint64(m.ChestId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.UseTicket {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResOpenChest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.TotalOpenCount != 0 {
		n += 1 + sovLiqi(uint64(m.TotalOpenCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBuyFromChestShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResBuyFromChestShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ChestId != 0 {
		n += 1 + sovLiqi(uint64(m.ChestId))
	}
	if m.ConsumeCount != 0 {
		n += 1 + sovLiqi(uint64(m.ConsumeCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResDailySignInInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.SignInDays != 0 {
		n += 1 + sovLiqi(uint64(m.SignInDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqDoActivitySignIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResDoActivitySignIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.SignInCount != 0 {
		n += 1 + sovLiqi(uint64(m.SignInCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResDoActivitySignIn_RewardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != 0 {
		n += 1 + sovLiqi(uint64(m.ResourceId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Characters) > 0 {
		for _, e := range m.Characters {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Skins) > 0 {
		l = 0
		for _, e := range m.Skins {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.MainCharacterId != 0 {
		n += 1 + sovLiqi(uint64(m.MainCharacterId))
	}
	if m.SendGiftCount != 0 {
		n += 1 + sovLiqi(uint64(m.SendGiftCount))
	}
	if m.SendGiftLimit != 0 {
		n += 1 + sovLiqi(uint64(m.SendGiftLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeMainCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharacterId != 0 {
		n += 1 + sovLiqi(uint64(m.CharacterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeCharacterSkin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharacterId != 0 {
		n += 1 + sovLiqi(uint64(m.CharacterId))
	}
	if m.Skin != 0 {
		n += 1 + sovLiqi(uint64(m.Skin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeCharacterView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharacterId != 0 {
		n += 1 + sovLiqi(uint64(m.CharacterId))
	}
	if m.Slot != 0 {
		n += 1 + sovLiqi(uint64(m.Slot))
	}
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSendGiftToCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharacterId != 0 {
		n += 1 + sovLiqi(uint64(m.CharacterId))
	}
	if len(m.Gifts) > 0 {
		for _, e := range m.Gifts {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSendGiftToCharacter_Gift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResSendGiftToCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovLiqi(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovLiqi(uint64(m.Exp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSellItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sells) > 0 {
		for _, e := range m.Sells {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSellItem_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLiqi(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCommonView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Slots) > 0 {
		for _, e := range m.Slots {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCommonView_Slot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovLiqi(uint64(m.Slot))
	}
	if m.Value != 0 {
		n += 1 + sovLiqi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChangeCommonView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovLiqi(uint64(m.Slot))
	}
	if m.Value != 0 {
		n += 1 + sovLiqi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpgradeCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharacterId != 0 {
		n += 1 + sovLiqi(uint64(m.CharacterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResUpgradeCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Character != nil {
		l = m.Character.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGMCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ShopInfo != nil {
		l = m.ShopInfo.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBuyFromShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if len(m.BillShortCut) > 0 {
		for _, e := range m.BillShortCut {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.DealPrice != 0 {
		n += 1 + sovLiqi(uint64(m.DealPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResBuyFromShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBuyFromZHP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovLiqi(uint64(m.GoodsId))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqPayMonthTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TicketId != 0 {
		n += 1 + sovLiqi(uint64(m.TicketId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResPayMonthTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ResourceId != 0 {
		n += 1 + sovLiqi(uint64(m.ResourceId))
	}
	if m.ResourceCount != 0 {
		n += 1 + sovLiqi(uint64(m.ResourceCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResRefreshZHPShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Zhp != nil {
		l = m.Zhp.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResMonthTicketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MonthTicketInfo) > 0 {
		for _, e := range m.MonthTicketInfo {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqExchangeCurrency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResServerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdateAccountSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setting != nil {
		l = m.Setting.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResModNicknameTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastModTime != 0 {
		n += 1 + sovLiqi(uint64(m.LastModTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResMisc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.RechargedList) > 0 {
		l = 0
		for _, e := range m.RechargedList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.Faiths) > 0 {
		for _, e := range m.Faiths {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqModifySignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResIDCardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsAuthed {
		n += 2
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUpdateIDCardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fullname)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.CardNo)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResVipReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.GainedVipLevels) > 0 {
		l = 0
		for _, e := range m.GainedVipLevels {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGainVipReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovLiqi(uint64(m.VipLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCustomizedContestList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovLiqi(uint64(m.Start))
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCustomizedContestList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.FollowContests) > 0 {
		for _, e := range m.FollowContests {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCustomizedContestExtendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UidList) > 0 {
		l = 0
		for _, e := range m.UidList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCustomizedContestExtendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.ExtendList) > 0 {
		for _, e := range m.ExtendList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqEnterCustomizedContest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResEnterCustomizedContest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.DetailInfo != nil {
		l = m.DetailInfo.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.PlayerReport != nil {
		l = m.PlayerReport.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCustomizedContestOnlineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCustomizedContestOnlineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.OnlinePlayer != 0 {
		n += 1 + sovLiqi(uint64(m.OnlinePlayer))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCustomizedContestByContestId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovLiqi(uint64(m.ContestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCustomizedContestByContestId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ContestInfo != nil {
		l = m.ContestInfo.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqStartCustomizedContest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqJoinCustomizedContestChatRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResJoinCustomizedContestChatRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.ChatHistory) > 0 {
		for _, b := range m.ChatHistory {
			l = len(b)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSayChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCustomizedContestGameLiveList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCustomizedContestGameLiveList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.LiveList) > 0 {
		for _, e := range m.LiveList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchCustomizedContestGameRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.LastIndex != 0 {
		n += 1 + sovLiqi(uint64(m.LastIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchCustomizedContestGameRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.NextIndex != 0 {
		n += 1 + sovLiqi(uint64(m.NextIndex))
	}
	if len(m.RecordList) > 0 {
		for _, e := range m.RecordList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqTargetCustomizedContest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLiqi(uint64(m.UniqueId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResActivityList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountActivityData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.ExchangeRecords) > 0 {
		for _, e := range m.ExchangeRecords {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.TaskProgressList) > 0 {
		for _, e := range m.TaskProgressList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.AccumulatedPointList) > 0 {
		for _, e := range m.AccumulatedPointList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.RankDataList) > 0 {
		for _, e := range m.RankDataList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.FlipTaskProgressList) > 0 {
		for _, e := range m.FlipTaskProgressList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.SignInData) > 0 {
		for _, e := range m.SignInData {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAccountActivityData_ActivitySignInData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.SignInCount != 0 {
		n += 1 + sovLiqi(uint64(m.SignInCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqExchangeActivityItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExchangeId != 0 {
		n += 1 + sovLiqi(uint64(m.ExchangeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResExchangeActivityItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.ExecuteReward) > 0 {
		for _, e := range m.ExecuteReward {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCompleteActivityTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLiqi(uint64(m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRecieveActivityFlipTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLiqi(uint64(m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResRecieveActivityFlipTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchActivityFlipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchActivityFlipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		l = 0
		for _, e := range m.Rewards {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGainAccumulatedPointActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.RewardId != 0 {
		n += 1 + sovLiqi(uint64(m.RewardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqFetchRankPointLeaderboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderboardId != 0 {
		n += 1 + sovLiqi(uint64(m.LeaderboardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchRankPointLeaderboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.LastRefreshTime != 0 {
		n += 1 + sovLiqi(uint64(m.LastRefreshTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResFetchRankPointLeaderboard_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	if m.Rank != 0 {
		n += 1 + sovLiqi(uint64(m.Rank))
	}
	if m.View != nil {
		l = m.View.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Point != 0 {
		n += 1 + sovLiqi(uint64(m.Point))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGainRankPointReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderboardId != 0 {
		n += 1 + sovLiqi(uint64(m.LeaderboardId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionMJStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionNewRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chang != 0 {
		n += 1 + sovLiqi(uint64(m.Chang))
	}
	if m.Ju != 0 {
		n += 1 + sovLiqi(uint64(m.Ju))
	}
	if m.Ben != 0 {
		n += 1 + sovLiqi(uint64(m.Ben))
	}
	if len(m.Tiles) > 0 {
		for _, s := range m.Tiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	l = len(m.Dora)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Scores) > 0 {
		l = 0
		for _, e := range m.Scores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Liqibang != 0 {
		n += 1 + sovLiqi(uint64(m.Liqibang))
	}
	if len(m.Tingpais0) > 0 {
		for _, e := range m.Tingpais0 {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Tingpais1) > 0 {
		for _, e := range m.Tingpais1 {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Al {
		n += 2
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LeftTileCount != 0 {
		n += 1 + sovLiqi(uint64(m.LeftTileCount))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordNewRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chang != 0 {
		n += 1 + sovLiqi(uint64(m.Chang))
	}
	if m.Ju != 0 {
		n += 1 + sovLiqi(uint64(m.Ju))
	}
	if m.Ben != 0 {
		n += 1 + sovLiqi(uint64(m.Ben))
	}
	l = len(m.Dora)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Scores) > 0 {
		l = 0
		for _, e := range m.Scores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Liqibang != 0 {
		n += 1 + sovLiqi(uint64(m.Liqibang))
	}
	if len(m.Tiles0) > 0 {
		for _, s := range m.Tiles0 {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Tiles1) > 0 {
		for _, s := range m.Tiles1 {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Tiles2) > 0 {
		for _, s := range m.Tiles2 {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Tiles3) > 0 {
		for _, s := range m.Tiles3 {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Tingpai) > 0 {
		for _, e := range m.Tingpai {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Paishan)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LeftTileCount != 0 {
		n += 1 + sovLiqi(uint64(m.LeftTileCount))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 2 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordNewRound_TingPai) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if len(m.Tingpais1) > 0 {
		for _, e := range m.Tingpais1 {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chang != 0 {
		n += 1 + sovLiqi(uint64(m.Chang))
	}
	if m.Ju != 0 {
		n += 1 + sovLiqi(uint64(m.Ju))
	}
	if m.Ben != 0 {
		n += 1 + sovLiqi(uint64(m.Ben))
	}
	if m.IndexPlayer != 0 {
		n += 1 + sovLiqi(uint64(m.IndexPlayer))
	}
	if m.LeftTileCount != 0 {
		n += 1 + sovLiqi(uint64(m.LeftTileCount))
	}
	if len(m.Hands) > 0 {
		for _, s := range m.Hands {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Liqibang != 0 {
		n += 1 + sovLiqi(uint64(m.Liqibang))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Zhenting {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameSnapshot_PlayerSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovLiqi(uint64(m.Score))
	}
	if m.Liqiposition != 0 {
		n += 1 + sovLiqi(uint64(m.Liqiposition))
	}
	if m.Tilenum != 0 {
		n += 1 + sovLiqi(uint64(m.Tilenum))
	}
	if len(m.Qipais) > 0 {
		for _, s := range m.Qipais {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Mings) > 0 {
		for _, e := range m.Mings {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameSnapshot_PlayerSnapshot_Fulu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if len(m.Tile) > 0 {
		for _, s := range m.Tile {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.From) > 0 {
		l = 0
		for _, e := range m.From {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionPrototype) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != 0 {
		n += 1 + sovLiqi(uint64(m.Step))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameDetailRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, b := range m.Records {
			l = len(b)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptionalOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if len(m.Combination) > 0 {
		for _, s := range m.Combination {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptionalOperationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if len(m.OperationList) > 0 {
		for _, e := range m.OperationList {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.TimeAdd != 0 {
		n += 1 + sovLiqi(uint64(m.TimeAdd))
	}
	if m.TimeFixed != 0 {
		n += 1 + sovLiqi(uint64(m.TimeFixed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiQiSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Score != 0 {
		n += 1 + sovLiqi(uint64(m.Score))
	}
	if m.Liqibang != 0 {
		n += 1 + sovLiqi(uint64(m.Liqibang))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FanInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Val != 0 {
		n += 1 + sovLiqi(uint64(m.Val))
	}
	if m.Id != 0 {
		n += 1 + sovLiqi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hand) > 0 {
		for _, s := range m.Hand {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Ming) > 0 {
		for _, s := range m.Ming {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	l = len(m.HuTile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Zimo {
		n += 2
	}
	if m.Qinjia {
		n += 2
	}
	if m.Liqi {
		n += 2
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.LiDoras) > 0 {
		for _, s := range m.LiDoras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Yiman {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if len(m.Fans) > 0 {
		for _, e := range m.Fans {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Fu != 0 {
		n += 1 + sovLiqi(uint64(m.Fu))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.PointRong != 0 {
		n += 1 + sovLiqi(uint64(m.PointRong))
	}
	if m.PointZimoQin != 0 {
		n += 2 + sovLiqi(uint64(m.PointZimoQin))
	}
	if m.PointZimoXian != 0 {
		n += 2 + sovLiqi(uint64(m.PointZimoXian))
	}
	if m.TitleId != 0 {
		n += 2 + sovLiqi(uint64(m.TitleId))
	}
	if m.PointSum != 0 {
		n += 2 + sovLiqi(uint64(m.PointSum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TingPaiInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Haveyi {
		n += 2
	}
	if m.Yiman {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovLiqi(uint64(m.Count))
	}
	if m.Fu != 0 {
		n += 1 + sovLiqi(uint64(m.Fu))
	}
	if m.BiaoDoraCount != 0 {
		n += 1 + sovLiqi(uint64(m.BiaoDoraCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TingPaiDiscardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Zhenting {
		n += 2
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		l = 0
		for _, e := range m.Scores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionDiscardTile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsLiqi {
		n += 2
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Moqie {
		n += 2
	}
	if m.Zhenting {
		n += 2
	}
	if len(m.Tingpais) > 0 {
		for _, e := range m.Tingpais {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.IsWliqi {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordDiscardTile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsLiqi {
		n += 2
	}
	if m.Moqie {
		n += 2
	}
	if len(m.Zhenting) > 0 {
		n += 1 + sovLiqi(uint64(len(m.Zhenting))) + len(m.Zhenting)*1
	}
	if len(m.Tingpais) > 0 {
		for _, e := range m.Tingpais {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.IsWliqi {
		n += 2
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionDealTile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LeftTileCount != 0 {
		n += 1 + sovLiqi(uint64(m.LeftTileCount))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Liqi != nil {
		l = m.Liqi.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Zhenting {
		n += 2
	}
	if len(m.Tingpais) > 0 {
		for _, e := range m.Tingpais {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordDealTile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.LeftTileCount != 0 {
		n += 1 + sovLiqi(uint64(m.LeftTileCount))
	}
	if m.Liqi != nil {
		l = m.Liqi.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Zhenting) > 0 {
		n += 1 + sovLiqi(uint64(len(m.Zhenting))) + len(m.Zhenting)*1
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionChiPengGang) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if len(m.Tiles) > 0 {
		for _, s := range m.Tiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Froms) > 0 {
		l = 0
		for _, e := range m.Froms {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Liqi != nil {
		l = m.Liqi.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Zhenting {
		n += 2
	}
	if len(m.Tingpais) > 0 {
		for _, e := range m.Tingpais {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordChiPengGang) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if len(m.Tiles) > 0 {
		for _, s := range m.Tiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Froms) > 0 {
		l = 0
		for _, e := range m.Froms {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Liqi != nil {
		l = m.Liqi.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Zhenting) > 0 {
		n += 1 + sovLiqi(uint64(len(m.Zhenting))) + len(m.Zhenting)*1
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionAnGangAddGang) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.Tiles)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Zhenting {
		n += 2
	}
	if len(m.Tingpais) > 0 {
		for _, e := range m.Tingpais {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordAnGangAddGang) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	l = len(m.Tiles)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionBaBei) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Zhenting {
		n += 2
	}
	if len(m.Tingpais) > 0 {
		for _, e := range m.Tingpais {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Moqie {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordBaBei) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Moqie {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionHule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hules) > 0 {
		for _, e := range m.Hules {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.OldScores) > 0 {
		l = 0
		for _, e := range m.OldScores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.DeltaScores) > 0 {
		l = 0
		for _, e := range m.DeltaScores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.WaitTimeout != 0 {
		n += 1 + sovLiqi(uint64(m.WaitTimeout))
	}
	if len(m.Scores) > 0 {
		l = 0
		for _, e := range m.Scores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Gameend != nil {
		l = m.Gameend.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordHule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hules) > 0 {
		for _, e := range m.Hules {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.OldScores) > 0 {
		l = 0
		for _, e := range m.OldScores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.DeltaScores) > 0 {
		l = 0
		for _, e := range m.DeltaScores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.WaitTimeout != 0 {
		n += 1 + sovLiqi(uint64(m.WaitTimeout))
	}
	if len(m.Scores) > 0 {
		l = 0
		for _, e := range m.Scores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.Gameend != nil {
		l = m.Gameend.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionLiuJu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.Gameend != nil {
		l = m.Gameend.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if len(m.Tiles) > 0 {
		for _, s := range m.Tiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Liqi != nil {
		l = m.Liqi.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Allplayertiles) > 0 {
		for _, s := range m.Allplayertiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordLiuJu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.Gameend != nil {
		l = m.Gameend.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if len(m.Tiles) > 0 {
		for _, s := range m.Tiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Liqi != nil {
		l = m.Liqi.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Allplayertiles) > 0 {
		for _, s := range m.Allplayertiles {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoTilePlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tingpai {
		n += 2
	}
	if len(m.Hand) > 0 {
		for _, s := range m.Hand {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Tings) > 0 {
		for _, e := range m.Tings {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoTileScoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if len(m.OldScores) > 0 {
		l = 0
		for _, e := range m.OldScores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.DeltaScores) > 0 {
		l = 0
		for _, e := range m.DeltaScores {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if len(m.Hand) > 0 {
		for _, s := range m.Hand {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Ming) > 0 {
		for _, s := range m.Ming {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Doras) > 0 {
		for _, s := range m.Doras {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Score != 0 {
		n += 1 + sovLiqi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionNoTile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liujumanguan {
		n += 2
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Gameend {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordNoTile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liujumanguan {
		n += 2
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.Gameend {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqAuthGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovLiqi(uint64(m.AccountId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResAuthGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if len(m.SeatList) > 0 {
		l = 0
		for _, e := range m.SeatList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.IsGameStart {
		n += 2
	}
	if m.GameConfig != nil {
		l = m.GameConfig.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.ReadyIdList) > 0 {
		l = 0
		for _, e := range m.ReadyIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRestore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.PassedWaitingTime != 0 {
		n += 1 + sovLiqi(uint64(m.PassedWaitingTime))
	}
	if m.GameState != 0 {
		n += 1 + sovLiqi(uint64(m.GameState))
	}
	if m.StartTime != 0 {
		n += 1 + sovLiqi(uint64(m.StartTime))
	}
	if m.LastPauseTimeMs != 0 {
		n += 1 + sovLiqi(uint64(m.LastPauseTimeMs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResEnterGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsEnd {
		n += 2
	}
	if m.Step != 0 {
		n += 1 + sovLiqi(uint64(m.Step))
	}
	if m.GameRestore != nil {
		l = m.GameRestore.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSyncGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoundId)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Step != 0 {
		n += 1 + sovLiqi(uint64(m.Step))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResSyncGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.IsEnd {
		n += 2
	}
	if m.Step != 0 {
		n += 1 + sovLiqi(uint64(m.Step))
	}
	if m.GameRestore != nil {
		l = m.GameRestore.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSelfOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovLiqi(uint64(m.Index))
	}
	l = len(m.Tile)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CancelOperation {
		n += 2
	}
	if m.Moqie {
		n += 2
	}
	if m.Timeuse != 0 {
		n += 1 + sovLiqi(uint64(m.Timeuse))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqChiPengGang) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovLiqi(uint64(m.Index))
	}
	if m.CancelOperation {
		n += 2
	}
	if m.Timeuse != 0 {
		n += 1 + sovLiqi(uint64(m.Timeuse))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqBroadcastInGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.ExceptSelf {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqGMCommandInGaming) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonData)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResGamePlayerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.StateList) > 0 {
		l = 0
		for _, e := range m.StateList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyNewGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameUuid)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if len(m.PlayerList) > 0 {
		for _, s := range m.PlayerList {
			l = len(s)
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyPlayerLoadGameReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReadyIdList) > 0 {
		l = 0
		for _, e := range m.ReadyIdList {
			l += sovLiqi(uint64(e))
		}
		n += 1 + sovLiqi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameBroadcast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameEndResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameTerminate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyPlayerConnectionState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLiqi(uint64(m.Seat))
	}
	if m.State != 0 {
		n += 1 + sovLiqi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyAccountLevelChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Final != nil {
		l = m.Final.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameFinishReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModeId != 0 {
		n += 1 + sovLiqi(uint64(m.ModeId))
	}
	if m.LevelChange != nil {
		l = m.LevelChange.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MatchChest != nil {
		l = m.MatchChest.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.MainCharacter != nil {
		l = m.MainCharacter.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.CharacterGift != nil {
		l = m.CharacterGift.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameFinishReward_LevelChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Final != nil {
		l = m.Final.Size()
		n += 1 + l + sovLiqi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLiqi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameFinishReward_MatchChest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChestId != 0 {
		n += 1 + sovLiqi(uint64(m.ChestId))
	}
	if m.Origin != 0 {
		n += 1 + sovLiqi(uint64(m.Origin))
	}
	if m.Final != 0 {
		n += 1 + sovLiqi(uint64(m.Final))
	}
	if m.IsGraded {
		n += 2
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameFinishReward_MainCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovLiqi(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovLiqi(uint64(m.Exp))
	}
	if m.Add != 0 {
		n += 1 + sovLiqi(uint64(m.Add))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGameFinishReward_CharacterGift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != 0 {
		n += 1 + sovLiqi(uint64(m.Origin))
	}
	if m.Final != 0 {
		n += 1 + sovLiqi(uint64(m.Final))
	}
	if m.Add != 0 {
		n += 1 + sovLiqi(uint64(m.Add))
	}
	if m.IsGraded {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityReward) > 0 {
		for _, e := range m.ActivityReward {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyActivityReward_ActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyActivityPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityPoints) > 0 {
		for _, e := range m.ActivityPoints {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyActivityPoint_ActivityPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovLiqi(uint64(m.ActivityId))
	}
	if m.Point != 0 {
		n += 1 + sovLiqi(uint64(m.Point))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyLeaderboardPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LeaderboardPoints) > 0 {
		for _, e := range m.LeaderboardPoints {
			l = e.Size()
			n += 1 + l + sovLiqi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyLeaderboardPoint_LeaderboardPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderboardId != 0 {
		n += 1 + sovLiqi(uint64(m.LeaderboardId))
	}
	if m.Point != 0 {
		n += 1 + sovLiqi(uint64(m.Point))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyGamePause) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paused {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLiqi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiqi(x uint64) (n int) {
	return sovLiqi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotifyRoomGameStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRoomGameStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRoomGameStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyMatchGameStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyMatchGameStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyMatchGameStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchModeId", wireType)
			}
			m.MatchModeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchModeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRoomPlayerReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRoomPlayerReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRoomPlayerReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRoomPlayerUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRoomPlayerUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRoomPlayerUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateList = append(m.UpdateList, &PlayerBaseView{})
			if err := m.UpdateList[len(m.UpdateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemoveList = append(m.RemoveList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RemoveList) == 0 {
					m.RemoveList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemoveList = append(m.RemoveList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveList", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotCount", wireType)
			}
			m.RobotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRoomKickOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRoomKickOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRoomKickOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyMatchTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyMatchTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyMatchTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyFriendStateChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyFriendStateChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyFriendStateChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveState == nil {
				m.ActiveState = &AccountActiveState{}
			}
			if err := m.ActiveState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyFriendViewChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyFriendViewChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyFriendViewChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &PlayerBaseView{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyFriendChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyFriendChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyFriendChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friend == nil {
				m.Friend = &Friend{}
			}
			if err := m.Friend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyNewFriendApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyNewFriendApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyNewFriendApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTime", wireType)
			}
			m.ApplyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedId", wireType)
			}
			m.RemovedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemovedId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &PlayerBaseView{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &AccountUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAnotherLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAnotherLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAnotherLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAccountLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAccountLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAccountLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAnnouncementUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAnnouncementUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAnnouncementUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Announcements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Announcements = append(m.Announcements, &Announcement{})
			if err := m.Announcements[len(m.Announcements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sort = append(m.Sort, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sort) == 0 {
					m.Sort = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sort = append(m.Sort, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyNewMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyNewMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyNewMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &Mail{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyDeleteMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyDeleteMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyDeleteMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MailIdList = append(m.MailIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MailIdList) == 0 {
					m.MailIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MailIdList = append(m.MailIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyReviveCoinUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyReviveCoinUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyReviveCoinUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGained", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGained = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyDailyTaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyDailyTaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyDailyTaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &TaskProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDailyTaskCount", wireType)
			}
			m.MaxDailyTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDailyTaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCount", wireType)
			}
			m.RefreshCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyActivityTaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyActivityTaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyActivityTaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &TaskProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyNewComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyNewComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyNewComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRollingNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRollingNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRollingNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notice == nil {
				m.Notice = &RollingNotice{}
			}
			if err := m.Notice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGiftSendRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyGiftSendRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyGiftSendRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyShopUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyShopUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyShopUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopInfo == nil {
				m.ShopInfo = &ShopInfo{}
			}
			if err := m.ShopInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyVipLevelChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyVipLevelChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyVipLevelChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftLimit", wireType)
			}
			m.GiftLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendMaxCount", wireType)
			}
			m.FriendMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendMaxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZhpFreeRefreshLimit", wireType)
			}
			m.ZhpFreeRefreshLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZhpFreeRefreshLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZhpCostRefreshLimit", wireType)
			}
			m.ZhpCostRefreshLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZhpCostRefreshLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuddyBonus", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuddyBonus = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordCollectLimit", wireType)
			}
			m.RecordCollectLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordCollectLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyServerSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyServerSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyServerSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &ServerSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyPayResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyPayResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyPayResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayResult", wireType)
			}
			m.PayResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayResult |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyCustomContestAccountMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyCustomContestAccountMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyCustomContestAccountMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyCustomContestSystemMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyCustomContestSystemMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyCustomContestSystemMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameStart == nil {
				m.GameStart = &CustomizedContestGameStart{}
			}
			if err := m.GameStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameEnd == nil {
				m.GameEnd = &CustomizedContestGameEnd{}
			}
			if err := m.GameEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyCustomContestState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyCustomContestState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyCustomContestState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyActivityChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyActivityChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyActivityChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewActivities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewActivities = append(m.NewActivities, &Activity{})
			if err := m.NewActivities[len(m.NewActivities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EndActivities = append(m.EndActivities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EndActivities) == 0 {
					m.EndActivities = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EndActivities = append(m.EndActivities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EndActivities", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.U32Params = append(m.U32Params, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.U32Params) == 0 {
					m.U32Params = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.U32Params = append(m.U32Params, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field U32Params", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrParams = append(m.StrParams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &AccountUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AntiAddiction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AntiAddiction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AntiAddiction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineDuration", wireType)
			}
			m.OnlineDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineDuration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountMahjongStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountMahjongStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FinalPositionCounts = append(m.FinalPositionCounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FinalPositionCounts) == 0 {
					m.FinalPositionCounts = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FinalPositionCounts = append(m.FinalPositionCounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPositionCounts", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecentRound == nil {
				m.RecentRound = &AccountMahjongStatistic_RoundSummary{}
			}
			if err := m.RecentRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentHu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecentHu == nil {
				m.RecentHu = &AccountMahjongStatistic_HuSummary{}
			}
			if err := m.RecentHu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestHu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighestHu == nil {
				m.HighestHu = &AccountMahjongStatistic_HighestHuRecord{}
			}
			if err := m.HighestHu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recent_20HuSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recent_20HuSummary == nil {
				m.Recent_20HuSummary = &AccountMahjongStatistic_Liqi20Summary{}
			}
			if err := m.Recent_20HuSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recent_10HuSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recent_10HuSummary == nil {
				m.Recent_10HuSummary = &AccountMahjongStatistic_LiQi10Summary{}
			}
			if err := m.Recent_10HuSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recent_10GameResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recent_10GameResult = append(m.Recent_10GameResult, &AccountMahjongStatistic_GameResult{})
			if err := m.Recent_10GameResult[len(m.Recent_10GameResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic_RoundSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RongCount", wireType)
			}
			m.RongCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RongCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZimoCount", wireType)
			}
			m.ZimoCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZimoCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FangchongCount", wireType)
			}
			m.FangchongCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FangchongCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic_HuSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoraRoundCount", wireType)
			}
			m.DoraRoundCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoraRoundCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFan", wireType)
			}
			m.TotalFan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic_HighestHuRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighestHuRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighestHuRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fanshu", wireType)
			}
			m.Fanshu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fanshu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doranum", wireType)
			}
			m.Doranum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Doranum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hands = append(m.Hands, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ming = append(m.Ming, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hupai", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hupai = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic_Liqi20Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liqi20Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liqi20Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLidoraCount", wireType)
			}
			m.TotalLidoraCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLidoraCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageHuPoint", wireType)
			}
			m.AverageHuPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageHuPoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic_LiQi10Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiQi10Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiQi10Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalXuanshang", wireType)
			}
			m.TotalXuanshang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalXuanshang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFanshu", wireType)
			}
			m.TotalFanshu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFanshu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMahjongStatistic_GameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPoint", wireType)
			}
			m.FinalPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStatisticData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountStatisticData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountStatisticData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MahjongCategory", wireType)
			}
			m.MahjongCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MahjongCategory |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCategory", wireType)
			}
			m.GameCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameCategory |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistic == nil {
				m.Statistic = &AccountMahjongStatistic{}
			}
			if err := m.Statistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			m.LoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutTime", wireType)
			}
			m.LogoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntiAddiction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AntiAddiction == nil {
				m.AntiAddiction = &AntiAddiction{}
			}
			if err := m.AntiAddiction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailVerify", wireType)
			}
			m.EmailVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmailVerify |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneVerify", wireType)
			}
			m.PhoneVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneVerify |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformDiamond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformDiamond = append(m.PlatformDiamond, &Account_PlatformDiamond{})
			if err := m.PlatformDiamond[len(m.PlatformDiamond)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &AccountLevel{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level3 == nil {
				m.Level3 = &AccountLevel{}
			}
			if err := m.Level3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account_PlatformDiamond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformDiamond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformDiamond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountOwnerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountOwnerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountOwnerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnlockCharacters = append(m.UnlockCharacters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnlockCharacters) == 0 {
					m.UnlockCharacters = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnlockCharacters = append(m.UnlockCharacters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockCharacters", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerical", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Numerical = append(m.Numerical, &AccountUpdate_NumericalUpdate{})
			if err := m.Numerical[len(m.Numerical)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Character == nil {
				m.Character = &AccountUpdate_CharacterUpdate{}
			}
			if err := m.Character.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bag == nil {
				m.Bag = &BagUpdate{}
			}
			if err := m.Bag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achievement == nil {
				m.Achievement = &AccountUpdate_AchievementUpdate{}
			}
			if err := m.Achievement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shilian", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shilian == nil {
				m.Shilian = &AccountShiLian{}
			}
			if err := m.Shilian.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DailyTask == nil {
				m.DailyTask = &AccountUpdate_DailyTaskUpdate{}
			}
			if err := m.DailyTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &AccountUpdate_TitleUpdate{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewRechargedList = append(m.NewRechargedList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NewRechargedList) == 0 {
					m.NewRechargedList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewRechargedList = append(m.NewRechargedList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRechargedList", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityTask == nil {
				m.ActivityTask = &AccountUpdate_ActivityTaskUpdate{}
			}
			if err := m.ActivityTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityFlipTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityFlipTask == nil {
				m.ActivityFlipTask = &AccountUpdate_ActivityFlipTaskUpdate{}
			}
			if err := m.ActivityFlipTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_NumericalUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumericalUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumericalUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			m.Final = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Final |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_CharacterUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CharacterUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CharacterUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Characters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Characters = append(m.Characters, &Character{})
			if err := m.Characters[len(m.Characters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Skins = append(m.Skins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Skins) == 0 {
					m.Skins = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Skins = append(m.Skins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Skins", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_AchievementUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &AchievementProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_DailyTaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &TaskProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_TitleUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewTitles = append(m.NewTitles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NewTitles) == 0 {
					m.NewTitles = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewTitles = append(m.NewTitles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTitles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_ActivityTaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &TaskProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_ActivityFlipTaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityFlipTaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityFlipTaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &TaskProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeId", wireType)
			}
			m.ModeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestUid", wireType)
			}
			m.ContestUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestUid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPlayingGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPlayingGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPlayingGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &GameMetaData{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCacheView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountCacheView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountCacheView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheVersion", wireType)
			}
			m.CacheVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			m.LoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutTime", wireType)
			}
			m.LogoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &AccountLevel{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayingGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayingGame == nil {
				m.PlayingGame = &AccountPlayingGame{}
			}
			if err := m.PlayingGame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level3 == nil {
				m.Level3 = &AccountLevel{}
			}
			if err := m.Level3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBaseView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBaseView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBaseView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &AccountLevel{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level3 == nil {
				m.Level3 = &AccountLevel{}
			}
			if err := m.Level3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerGameView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerGameView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerGameView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &AccountLevel{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Character == nil {
				m.Character = &Character{}
			}
			if err := m.Character.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level3 == nil {
				m.Level3 = &AccountLevel{}
			}
			if err := m.Level3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ai", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ai = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extendinfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extendinfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailRule == nil {
				m.DetailRule = &GameDetailRule{}
			}
			if err := m.DetailRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingEnvironment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestingEnvironment == nil {
				m.TestingEnvironment = &GameTestingEnvironmentSet{}
			}
			if err := m.TestingEnvironment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameTestingEnvironmentSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameTestingEnvironmentSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameTestingEnvironmentSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paixing", wireType)
			}
			m.Paixing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paixing |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCount", wireType)
			}
			m.LeftCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameDetailRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDetailRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDetailRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFixed", wireType)
			}
			m.TimeFixed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFixed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeAdd", wireType)
			}
			m.TimeAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeAdd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoraCount", wireType)
			}
			m.DoraCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoraCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shiduan", wireType)
			}
			m.Shiduan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shiduan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPoint", wireType)
			}
			m.InitPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitPoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fandian", wireType)
			}
			m.Fandian = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fandian |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanJifei", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanJifei = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TianbianValue", wireType)
			}
			m.TianbianValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TianbianValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiqibangValue", wireType)
			}
			m.LiqibangValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiqibangValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangbangValue", wireType)
			}
			m.ChangbangValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangbangValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotingFafu_1", wireType)
			}
			m.NotingFafu_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotingFafu_1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotingFafu_2", wireType)
			}
			m.NotingFafu_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotingFafu_2 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotingFafu_3", wireType)
			}
			m.NotingFafu_3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotingFafu_3 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveLiujumanguan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveLiujumanguan = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveQieshangmanguan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveQieshangmanguan = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveBiaoDora", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveBiaoDora = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGangBiaoDora", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveGangBiaoDora = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MingDoraImmediatelyOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MingDoraImmediatelyOpen = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveLiDora", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveLiDora = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGangLiDora", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveGangLiDora = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveSifenglianda", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveSifenglianda = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveSigangsanle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveSigangsanle = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveSijializhi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveSijializhi = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveJiuzhongjiupai", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveJiuzhongjiupai = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveSanjiahele", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveSanjiahele = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveToutiao", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveToutiao = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveHelelianzhuang", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveHelelianzhuang = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveHelezhongju", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveHelezhongju = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveTingpailianzhuang", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveTingpailianzhuang = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveTingpaizhongju", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveTingpaizhongju = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveYifa", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveYifa = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveNanruxiru", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveNanruxiru = bool(v != 0)
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jingsuanyuandian", wireType)
			}
			m.Jingsuanyuandian = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jingsuanyuandian |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunweima_2", wireType)
			}
			m.Shunweima_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shunweima_2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunweima_3", wireType)
			}
			m.Shunweima_3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shunweima_3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunweima_4", wireType)
			}
			m.Shunweima_4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shunweima_4 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bianjietishi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bianjietishi = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiLevel", wireType)
			}
			m.AiLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AiLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveZimosun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveZimosun = bool(v != 0)
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMultiYukaman", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableMultiYukaman = bool(v != 0)
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fanfu", wireType)
			}
			m.Fanfu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fanfu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuyiMode", wireType)
			}
			m.GuyiMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuyiMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dora3Mode", wireType)
			}
			m.Dora3Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dora3Mode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mode == nil {
				m.Mode = &GameMode{}
			}
			if err := m.Mode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayerCount", wireType)
			}
			m.MaxPlayerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayerCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Persons = append(m.Persons, &PlayerGameView{})
			if err := m.Persons[len(m.Persons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReadyList = append(m.ReadyList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReadyList) == 0 {
					m.ReadyList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReadyList = append(m.ReadyList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyList", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPlaying", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPlaying = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicLive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicLive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotCount", wireType)
			}
			m.RobotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentId", wireType)
			}
			m.TournamentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TournamentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEndResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEndResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEndResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &GameEndResult_PlayerItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEndResult_PlayerItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoint", wireType)
			}
			m.TotalPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPoint_1", wireType)
			}
			m.PartPoint_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartPoint_1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPoint_2", wireType)
			}
			m.PartPoint_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartPoint_2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradingScore", wireType)
			}
			m.GradingScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GradingScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameConnectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameConnectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameConnectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemGainRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemGainRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemGainRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemGainRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemGainRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemGainRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordTime", wireType)
			}
			m.RecordTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitSourceId", wireType)
			}
			m.LimitSourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitSourceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &ItemGainRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stack", wireType)
			}
			m.Stack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stack |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyGainRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyGainRecord = append(m.DailyGainRecord, &ItemGainRecords{})
			if err := m.DailyGainRecord[len(m.DailyGainRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateItems = append(m.UpdateItems, &Item{})
			if err := m.UpdateItems[len(m.UpdateItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDailyGainRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateDailyGainRecord = append(m.UpdateDailyGainRecord, &ItemGainRecords{})
			if err := m.UpdateDailyGainRecord[len(m.UpdateDailyGainRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardSlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardSlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardSlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &RewardSlot{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replace == nil {
				m.Replace = &RewardSlot{}
			}
			if err := m.Replace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPlusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPlusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPlusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exchange == nil {
				m.Exchange = &RewardPlusResult_Exchange{}
			}
			if err := m.Exchange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPlusResult_Exchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			m.Exchange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exchange |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &RewardSlot{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replace == nil {
				m.Replace = &RewardSlot{}
			}
			if err := m.Replace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceCount", wireType)
			}
			m.ReplaceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplaceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeAttachment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TakeAttachment = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &RewardSlot{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			m.ReferenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchievementProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achieved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Achieved = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStatisticByGameMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountStatisticByGameMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountStatisticByGameMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCountSum", wireType)
			}
			m.GameCountSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameCountSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GameFinalPosition = append(m.GameFinalPosition, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GameFinalPosition) == 0 {
					m.GameFinalPosition = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GameFinalPosition = append(m.GameFinalPosition, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GameFinalPosition", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlyCount", wireType)
			}
			m.FlyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlyCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldEarnSum", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GoldEarnSum = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundCountSum", wireType)
			}
			m.RoundCountSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundCountSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DadianSum", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DadianSum = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundEnd = append(m.RoundEnd, &AccountStatisticByGameMode_RoundEndData{})
			if err := m.RoundEnd[len(m.RoundEnd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MingCountSum", wireType)
			}
			m.MingCountSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MingCountSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiqiCountSum", wireType)
			}
			m.LiqiCountSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiqiCountSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XunCountSum", wireType)
			}
			m.XunCountSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XunCountSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestLianzhuang", wireType)
			}
			m.HighestLianzhuang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestLianzhuang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreEarnSum", wireType)
			}
			m.ScoreEarnSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreEarnSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankScore = append(m.RankScore, &AccountStatisticByGameMode_RankScore{})
			if err := m.RankScore[len(m.RankScore)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStatisticByGameMode_RoundEndData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundEndData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundEndData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStatisticByGameMode_RankScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreSum", wireType)
			}
			m.ScoreSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreSum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStatisticByFan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountStatisticByFan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountStatisticByFan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanId", wireType)
			}
			m.FanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FanId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountFanAchieved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountFanAchieved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountFanAchieved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MahjongCategory", wireType)
			}
			m.MahjongCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MahjongCategory |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fan = append(m.Fan, &AccountStatisticByFan{})
			if err := m.Fan[len(m.Fan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liujumanguan", wireType)
			}
			m.Liujumanguan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liujumanguan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDetailStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDetailStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMode = append(m.GameMode, &AccountStatisticByGameMode{})
			if err := m.GameMode[len(m.GameMode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fan = append(m.Fan, &AccountStatisticByFan{})
			if err := m.Fan[len(m.Fan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liujumanguan", wireType)
			}
			m.Liujumanguan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liujumanguan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanAchieved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FanAchieved = append(m.FanAchieved, &AccountFanAchieved{})
			if err := m.FanAchieved[len(m.FanAchieved)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatisticByCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDetailStatisticByCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDetailStatisticByCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailStatistic == nil {
				m.DetailStatistic = &AccountDetailStatistic{}
			}
			if err := m.DetailStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatisticV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDetailStatisticV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDetailStatisticV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendRoomStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendRoomStatistic == nil {
				m.FriendRoomStatistic = &AccountDetailStatistic{}
			}
			if err := m.FriendRoomStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankStatistic == nil {
				m.RankStatistic = &AccountDetailStatisticV2_RankStatistic{}
			}
			if err := m.RankStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomizedContestStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomizedContestStatistic == nil {
				m.CustomizedContestStatistic = &AccountDetailStatisticV2_CustomizedContestStatistic{}
			}
			if err := m.CustomizedContestStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeisureMatchStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeisureMatchStatistic == nil {
				m.LeisureMatchStatistic = &AccountDetailStatistic{}
			}
			if err := m.LeisureMatchStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatisticV2_RankStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalStatistic == nil {
				m.TotalStatistic = &AccountDetailStatisticV2_RankStatistic_RankData{}
			}
			if err := m.TotalStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonthStatistic == nil {
				m.MonthStatistic = &AccountDetailStatisticV2_RankStatistic_RankData{}
			}
			if err := m.MonthStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthRefreshTime", wireType)
			}
			m.MonthRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthRefreshTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLevelStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllLevelStatistic == nil {
				m.AllLevelStatistic = &AccountDetailStatistic{}
			}
			if err := m.AllLevelStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelDataList = append(m.LevelDataList, &AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData{})
			if err := m.LevelDataList[len(m.LevelDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatisticV2_RankStatistic_RankData_RankLevelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankLevelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankLevelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankLevel", wireType)
			}
			m.RankLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistic == nil {
				m.Statistic = &AccountDetailStatistic{}
			}
			if err := m.Statistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDetailStatisticV2_CustomizedContestStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalStatistic == nil {
				m.TotalStatistic = &AccountDetailStatistic{}
			}
			if err := m.TotalStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthStatistic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonthStatistic == nil {
				m.MonthStatistic = &AccountDetailStatistic{}
			}
			if err := m.MonthStatistic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthRefreshTime", wireType)
			}
			m.MonthRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthRefreshTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountShiLian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountShiLian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountShiLian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientDeviceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDeviceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDeviceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Browser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Browser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Announcement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Announcement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Announcement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achieved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Achieved = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewarded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rewarded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mode == nil {
				m.Mode = &GameMode{}
			}
			if err := m.Mode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &GameMetaData{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountActiveState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountActiveState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountActiveState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			m.LoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutTime", wireType)
			}
			m.LogoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playing == nil {
				m.Playing = &AccountPlayingGame{}
			}
			if err := m.Playing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &PlayerBaseView{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &AccountActiveState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLiveUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLiveUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLiveUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCategory", wireType)
			}
			m.ActionCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionCategory |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionData = append(m.ActionData[:0], dAtA[iNdEx:postIndex]...)
			if m.ActionData == nil {
				m.ActionData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLiveSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLiveSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLiveSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &GameLiveUnit{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLiveSegmentUri) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLiveSegmentUri: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLiveSegmentUri: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			m.SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLiveHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLiveHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLiveHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameConfig == nil {
				m.GameConfig = &GameConfig{}
			}
			if err := m.GameConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerGameView{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SeatList = append(m.SeatList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SeatList) == 0 {
					m.SeatList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SeatList = append(m.SeatList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameNewRoundState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNewRoundState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNewRoundState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SeatStates = append(m.SeatStates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SeatStates) == 0 {
					m.SeatStates = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SeatStates = append(m.SeatStates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatStates", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEndAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEndAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEndAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameNoopAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameNoopAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameNoopAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commenter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commenter == nil {
				m.Commenter = &PlayerBaseView{}
			}
			if err := m.Commenter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollingNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollingNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollingNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatInterval", wireType)
			}
			m.RepeatInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingGoods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingGoods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingGoods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCount", wireType)
			}
			m.ResourceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillShortcut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillShortcut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillShortcut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealPrice", wireType)
			}
			m.DealPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealPrice |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &BillingGoods{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPrice", wireType)
			}
			m.CurrencyPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyPrice |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortWeight", wireType)
			}
			m.SortWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortWeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Character) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Character: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Character: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charid", wireType)
			}
			m.Charid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Charid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Views = append(m.Views, &Character_ViewSlotSet{})
			if err := m.Views[len(m.Views)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skin", wireType)
			}
			m.Skin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpgraded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUpgraded = bool(v != 0)
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtraEmoji = append(m.ExtraEmoji, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtraEmoji) == 0 {
					m.ExtraEmoji = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtraEmoji = append(m.ExtraEmoji, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraEmoji", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Character_ViewSlotSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewSlotSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewSlotSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZHPShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZHPShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZHPShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Goods = append(m.Goods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Goods) == 0 {
					m.Goods = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Goods = append(m.Goods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyRecords = append(m.BuyRecords, &BuyRecord{})
			if err := m.BuyRecords[len(m.BuyRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeRefresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FreeRefresh == nil {
				m.FreeRefresh = &ZHPShop_RefreshCount{}
			}
			if err := m.FreeRefresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostRefresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CostRefresh == nil {
				m.CostRefresh = &ZHPShop_RefreshCount{}
			}
			if err := m.CostRefresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZHPShop_RefreshCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthTicketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthTicketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthTicketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPayTime", wireType)
			}
			m.LastPayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPayTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zhp == nil {
				m.Zhp = &ZHPShop{}
			}
			if err := m.Zhp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyRecords = append(m.BuyRecords, &BuyRecord{})
			if err := m.BuyRecords[len(m.BuyRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshTime", wireType)
			}
			m.LastRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRefreshTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeNicknameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeNicknameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeNicknameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentSetting == nil {
				m.PaymentSetting = &PaymentSetting{}
			}
			if err := m.PaymentSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenPayment", wireType)
			}
			m.OpenPayment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenPayment |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentInfoShowType", wireType)
			}
			m.PaymentInfoShowType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentInfoShowType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wechat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wechat == nil {
				m.Wechat = &PaymentSetting_WechatData{}
			}
			if err := m.Wechat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alipay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alipay == nil {
				m.Alipay = &PaymentSetting_AlipayData{}
			}
			if err := m.Alipay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentSetting_WechatData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WechatData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WechatData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableCreate = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSourcePlatform", wireType)
			}
			m.PaymentSourcePlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentSourcePlatform |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCredit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCredit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentSetting_AlipayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlipayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlipayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableCreate = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSourcePlatform", wireType)
			}
			m.PaymentSourcePlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentSourcePlatform |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChestId", wireType)
			}
			m.ChestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOpenCount", wireType)
			}
			m.TotalOpenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOpenCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeCount", wireType)
			}
			m.ConsumeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceBlackCount", wireType)
			}
			m.FaceBlackCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaceBlackCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChestDataV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChestDataV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChestDataV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChestId", wireType)
			}
			m.ChestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOpenCount", wireType)
			}
			m.TotalOpenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOpenCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceBlackCount", wireType)
			}
			m.FaceBlackCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaceBlackCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaithData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaithData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaithData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaithId", wireType)
			}
			m.FaithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaithId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOpenCount", wireType)
			}
			m.TotalOpenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOpenCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeCount", wireType)
			}
			m.ConsumeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContestName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestExtend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestExtend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestExtend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicNotice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicNotice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestAbstract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestAbstract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestAbstract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContestName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicNotice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicNotice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContestName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankRule", wireType)
			}
			m.RankRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankRule |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameMode == nil {
				m.GameMode = &GameMode{}
			}
			if err := m.GameMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNotice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateNotice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestPlayerReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestPlayerReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestPlayerReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankRule", wireType)
			}
			m.RankRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankRule |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecentGameRanks = append(m.RecentGameRanks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecentGameRanks) == 0 {
					m.RecentGameRanks = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecentGameRanks = append(m.RecentGameRanks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentGameRanks", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGameCount", wireType)
			}
			m.TotalGameCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGameCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &GameConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &RecordGame_AccountInfo{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &GameEndResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordGame_AccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Character == nil {
				m.Character = &Character{}
			}
			if err := m.Character.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &AccountLevel{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level3 == nil {
				m.Level3 = &AccountLevel{}
			}
			if err := m.Level3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestGameStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestGameStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestGameStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &CustomizedContestGameStart_Item{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestGameStart_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestGameEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomizedContestGameEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomizedContestGameEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &CustomizedContestGameEnd_Item{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomizedContestGameEnd_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoint", wireType)
			}
			m.TotalPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			m.ExchangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityAccumulatedPointData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityAccumulatedPointData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityAccumulatedPointData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GainedRewardList = append(m.GainedRewardList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GainedRewardList) == 0 {
					m.GainedRewardList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GainedRewardList = append(m.GainedRewardList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GainedRewardList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityRankPointData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityRankPointData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityRankPointData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderboardId", wireType)
			}
			m.LeaderboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderboardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GainedReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GainedReward = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GainableTime", wireType)
			}
			m.GainableTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GainableTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoundHuData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRoundHuData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRoundHuData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hupai", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hupai == nil {
				m.Hupai = &GameRoundHuData_HuPai{}
			}
			if err := m.Hupai.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fans = append(m.Fans, &GameRoundHuData_Fan{})
			if err := m.Fans[len(m.Fans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xun", wireType)
			}
			m.Xun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xun |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanSum", wireType)
			}
			m.FanSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FanSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuSum", wireType)
			}
			m.FuSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YakumanCount", wireType)
			}
			m.YakumanCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YakumanCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiaoDoraCount", wireType)
			}
			m.BiaoDoraCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiaoDoraCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDoraCount", wireType)
			}
			m.RedDoraCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedDoraCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiDoraCount", wireType)
			}
			m.LiDoraCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiDoraCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabeiCount", wireType)
			}
			m.BabeiCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabeiCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XuanShangCount", wireType)
			}
			m.XuanShangCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XuanShangCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoundHuData_HuPai) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuPai: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuPai: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			m.Liqi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liqi |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoundHuData_Fan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			m.Fan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoundPlayerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRoundPlayerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRoundPlayerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hands = append(m.Hands, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ming = append(m.Ming, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiqiType", wireType)
			}
			m.LiqiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiqiType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFulu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFulu = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiujumanguan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiujumanguan = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LianZhuang", wireType)
			}
			m.LianZhuang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LianZhuang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hu == nil {
				m.Hu = &GameRoundHuData{}
			}
			if err := m.Hu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoundPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRoundPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRoundPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &GameRoundPlayerResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoundSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRoundSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRoundSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ju", wireType)
			}
			m.Ju = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ju |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ben", wireType)
			}
			m.Ben = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ben |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &GameRoundPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameFinalSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameFinalSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameFinalSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mode == nil {
				m.Mode = &GameMode{}
			}
			if err := m.Mode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &GameMetaData{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CalculateParam == nil {
				m.CalculateParam = &GameFinalSnapshot_CalculateParam{}
			}
			if err := m.CalculateParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seats = append(m.Seats, &GameFinalSnapshot_GameSeat{})
			if err := m.Seats[len(m.Seats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rounds = append(m.Rounds, &GameRoundSnapshot{})
			if err := m.Rounds[len(m.Rounds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountViews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountViews = append(m.AccountViews, &PlayerGameView{})
			if err := m.AccountViews[len(m.AccountViews)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalPlayers = append(m.FinalPlayers, &GameFinalSnapshot_FinalPlayer{})
			if err := m.FinalPlayers[len(m.FinalPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameFinalSnapshot_CalculateParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPoint", wireType)
			}
			m.InitPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitPoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jingsuanyuandian", wireType)
			}
			m.Jingsuanyuandian = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jingsuanyuandian |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RankPoints = append(m.RankPoints, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RankPoints) == 0 {
					m.RankPoints = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RankPoints = append(m.RankPoints, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RankPoints", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameFinalSnapshot_GameSeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameSeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameSeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotifyEndpoint == nil {
				m.NotifyEndpoint = &NetworkEndpoint{}
			}
			if err := m.NotifyEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConnected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConnected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameFinalSnapshot_FinalPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoint", wireType)
			}
			m.TotalPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPoint_1", wireType)
			}
			m.PartPoint_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartPoint_1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPoint_2", wireType)
			}
			m.PartPoint_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartPoint_2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradingScore", wireType)
			}
			m.GradingScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GradingScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordCollectedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordCollectedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordCollectedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientEndpoint == nil {
				m.ClientEndpoint = &NetworkEndpoint{}
			}
			if err := m.ClientEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSignupAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSignupAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSignupAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResSignupAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResSignupAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResSignupAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reconnect = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &ClientDeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenAccessToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenAccessToken = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CurrencyPlatforms = append(m.CurrencyPlatforms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CurrencyPlatforms) == 0 {
					m.CurrencyPlatforms = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CurrencyPlatforms = append(m.CurrencyPlatforms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPlatforms", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameInfo == nil {
				m.GameInfo = &GameConnectInfo{}
			}
			if err := m.GameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasUnreadAnnouncement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasUnreadAnnouncement = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEmailLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEmailLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEmailLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reconnect = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &ClientDeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenAccessToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenAccessToken = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CurrencyPlatforms = append(m.CurrencyPlatforms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CurrencyPlatforms) == 0 {
					m.CurrencyPlatforms = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CurrencyPlatforms = append(m.CurrencyPlatforms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPlatforms", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBindAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBindAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBindAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreatePhoneVerifyCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreatePhoneVerifyCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreatePhoneVerifyCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateEmailVerifyCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateEmailVerifyCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateEmailVerifyCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqVerifyCodeForSecure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqVerifyCodeForSecure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqVerifyCodeForSecure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResVerfiyCodeForSecure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResVerfiyCodeForSecure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResVerfiyCodeForSecure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecureToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecureToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBindPhoneNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBindPhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBindPhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBindEmail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBindEmail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBindEmail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqModifyPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqModifyPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqModifyPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecureToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecureToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOauth2Auth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOauth2Auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOauth2Auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResOauth2Auth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResOauth2Auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResOauth2Auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOauth2Check) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOauth2Check: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOauth2Check: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResOauth2Check) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResOauth2Check: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResOauth2Check: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAccount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOauth2Signup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOauth2Signup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOauth2Signup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResOauth2Signup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResOauth2Signup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResOauth2Signup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOauth2Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOauth2Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOauth2Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reconnect = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &ClientDeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CurrencyPlatforms = append(m.CurrencyPlatforms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CurrencyPlatforms) == 0 {
					m.CurrencyPlatforms = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CurrencyPlatforms = append(m.CurrencyPlatforms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPlatforms", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHeatBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHeatBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHeatBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOperationCounter", wireType)
			}
			m.NoOperationCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoOperationCounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLoginBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLoginBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLoginBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinMatchQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinMatchQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinMatchQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCancelMatchQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCancelMatchQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCancelMatchQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateNickname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateNickname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateNickname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqModifyNickname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqModifyNickname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqModifyNickname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseItemId", wireType)
			}
			m.UseItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqModifyBirthday) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqModifyBirthday: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqModifyBirthday: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResSelfRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResSelfRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResSelfRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCount", wireType)
			}
			m.PlayerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mode == nil {
				m.Mode = &GameMode{}
			}
			if err := m.Mode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicLive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicLive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResJoinRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResJoinRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResJoinRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRoomReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRoomReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRoomReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRoomStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRoomStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRoomStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRoomKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRoomKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRoomKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqModifyRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqModifyRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqModifyRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotCount", wireType)
			}
			m.RobotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAccountStatisticInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAccountStatisticInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAccountStatisticInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountStatisticInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountStatisticInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountStatisticInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatisticData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatisticData = append(m.StatisticData, &AccountStatisticData{})
			if err := m.StatisticData[len(m.StatisticData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailData == nil {
				m.DetailData = &AccountDetailStatisticV2{}
			}
			if err := m.DetailData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountCharacterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountCharacterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountCharacterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnlockList = append(m.UnlockList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnlockList) == 0 {
					m.UnlockList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnlockList = append(m.UnlockList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqShopPurchase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqShopPurchase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqShopPurchase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResShopPurchase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResShopPurchase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResShopPurchase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &AccountUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RecordGame{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGameRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGameRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGameRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGameRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGameRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGameRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordList = append(m.RecordList, &RecordGame{})
			if err := m.RecordList[len(m.RecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCollectedGameRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCollectedGameRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCollectedGameRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordList = append(m.RecordList, &RecordCollectedData{})
			if err := m.RecordList[len(m.RecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordCollectLimit", wireType)
			}
			m.RecordCollectLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordCollectLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGameRecordsDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGameRecordsDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGameRecordsDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidList = append(m.UuidList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGameRecordsDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGameRecordsDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGameRecordsDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordList = append(m.RecordList, &RecordGame{})
			if err := m.RecordList[len(m.RecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAddCollectedGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAddCollectedGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAddCollectedGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAddCollectedGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAddCollectedGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAddCollectedGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRemoveCollectedGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRemoveCollectedGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRemoveCollectedGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResRemoveCollectedGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResRemoveCollectedGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResRemoveCollectedGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeCollectedGameRecordRemarks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeCollectedGameRecordRemarks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeCollectedGameRecordRemarks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResChangeCollectedGameRecordRemarks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResChangeCollectedGameRecordRemarks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResChangeCollectedGameRecordRemarks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLevelLeaderboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLevelLeaderboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLevelLeaderboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResLevelLeaderboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResLevelLeaderboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResLevelLeaderboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ResLevelLeaderboard_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRank", wireType)
			}
			m.SelfRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfRank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResLevelLeaderboard_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Level == nil {
				m.Level = &AccountLevel{}
			}
			if err := m.Level.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMultiAccountId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMultiAccountId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMultiAccountId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIdList = append(m.AccountIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIdList) == 0 {
					m.AccountIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIdList = append(m.AccountIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMultiAccountBrief) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMultiAccountBrief: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMultiAccountBrief: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerBaseView{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &Friend{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendMaxCount", wireType)
			}
			m.FriendMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendMaxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFriendApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFriendApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFriendApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applies = append(m.Applies, &ResFriendApplyList_FriendApply{})
			if err := m.Applies[len(m.Applies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFriendApplyList_FriendApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTime", wireType)
			}
			m.ApplyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqApplyFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqApplyFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqApplyFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHandleFriendApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHandleFriendApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHandleFriendApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRemoveFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRemoveFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRemoveFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSearchAccountByPattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSearchAccountByPattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSearchAccountByPattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchNext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SearchNext = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResSearchAccountByPattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResSearchAccountByPattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResSearchAccountByPattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinished = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MatchAccounts = append(m.MatchAccounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MatchAccounts) == 0 {
					m.MatchAccounts = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MatchAccounts = append(m.MatchAccounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchAccounts", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecodeId", wireType)
			}
			m.DecodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecodeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAccountList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAccountList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAccountList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIdList = append(m.AccountIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIdList) == 0 {
					m.AccountIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIdList = append(m.AccountIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountStates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &AccountActiveState{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSearchAccountById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSearchAccountById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSearchAccountById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResSearchAccountById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResSearchAccountById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResSearchAccountById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerBaseView{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResBagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResBagInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResBagInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bag == nil {
				m.Bag = &Bag{}
			}
			if err := m.Bag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUseBagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUseBagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUseBagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOpenManualItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOpenManualItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOpenManualItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectId", wireType)
			}
			m.SelectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOpenRandomRewardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOpenRandomRewardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOpenRandomRewardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResOpenRandomRewardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResOpenRandomRewardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResOpenRandomRewardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &OpenResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqComposeShard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqComposeShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqComposeShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Announcements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Announcements = append(m.Announcements, &Announcement{})
			if err := m.Announcements[len(m.Announcements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sort = append(m.Sort, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sort) == 0 {
					m.Sort = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sort = append(m.Sort, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReadList = append(m.ReadList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReadList) == 0 {
					m.ReadList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReadList = append(m.ReadList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &Mail{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTakeAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTakeAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTakeAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAchievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAchievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAchievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &AchievementProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResTitleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTitleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTitleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TitleList = append(m.TitleList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TitleList) == 0 {
					m.TitleList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TitleList = append(m.TitleList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUseTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUseTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUseTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBuyShiLian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBuyShiLian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBuyShiLian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateClientValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateClientValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateClientValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResClientValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResClientValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResClientValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &ResClientValue_Value{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargedCount", wireType)
			}
			m.RechargedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResClientValue_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCurrentMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCurrentMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCurrentMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ModeList = append(m.ModeList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ModeList) == 0 {
					m.ModeList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ModeList = append(m.ModeList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCurrentMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCurrentMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCurrentMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &ResCurrentMatchInfo_CurrentMatchInfo{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCurrentMatchInfo_CurrentMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeId", wireType)
			}
			m.ModeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayingCount", wireType)
			}
			m.PlayingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayingCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnouncementId", wireType)
			}
			m.AnnouncementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnnouncementId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResReviveCoinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResReviveCoinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResReviveCoinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGained", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGained = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResDailyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResDailyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResDailyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &TaskProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRefreshCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRefreshCount = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDailyTaskCount", wireType)
			}
			m.MaxDailyTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDailyTaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCount", wireType)
			}
			m.RefreshCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRefreshDailyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRefreshDailyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRefreshDailyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResRefreshDailyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResRefreshDailyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResRefreshDailyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &TaskProgress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCount", wireType)
			}
			m.RefreshCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUseGiftCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUseGiftCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUseGiftCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResUseGiftCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResUseGiftCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResUseGiftCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardSlot{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGameLiveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGameLiveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGameLiveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGameLiveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGameLiveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGameLiveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftStartSeconds", wireType)
			}
			m.LeftStartSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftStartSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveHead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiveHead == nil {
				m.LiveHead = &GameLiveHead{}
			}
			if err := m.LiveHead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &GameLiveSegmentUri{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowMillisecond", wireType)
			}
			m.NowMillisecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowMillisecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGameLiveLeftSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGameLiveLeftSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGameLiveLeftSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSegmentId", wireType)
			}
			m.LastSegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSegmentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGameLiveLeftSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGameLiveLeftSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGameLiveLeftSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveState", wireType)
			}
			m.LiveState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveState |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &GameLiveSegmentUri{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowMillisecond", wireType)
			}
			m.NowMillisecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowMillisecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentEndMillisecond", wireType)
			}
			m.SegmentEndMillisecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentEndMillisecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGameLiveList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGameLiveList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGameLiveList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterId", wireType)
			}
			m.FilterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGameLiveList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGameLiveList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGameLiveList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveList = append(m.LiveList, &GameLiveHead{})
			if err := m.LiveList[len(m.LiveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCommentSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCommentSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCommentSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentAllow", wireType)
			}
			m.CommentAllow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentAllow |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateCommentSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateCommentSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateCommentSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentAllow", wireType)
			}
			m.CommentAllow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentAllow |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCommentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCommentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCommentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCommentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCommentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCommentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentAllow", wireType)
			}
			m.CommentAllow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentAllow |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CommentIdList = append(m.CommentIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CommentIdList) == 0 {
					m.CommentIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CommentIdList = append(m.CommentIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentIdList", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReadId", wireType)
			}
			m.LastReadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReadId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCommentContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCommentContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCommentContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CommentIdList = append(m.CommentIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CommentIdList) == 0 {
					m.CommentIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CommentIdList = append(m.CommentIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCommentContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCommentContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCommentContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &CommentItem{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLeaveComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLeaveComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLeaveComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeleteList = append(m.DeleteList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeleteList) == 0 {
					m.DeleteList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeleteList = append(m.DeleteList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReadComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReadComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReadComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadId", wireType)
			}
			m.ReadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRollingNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRollingNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRollingNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notice == nil {
				m.Notice = &RollingNotice{}
			}
			if err := m.Notice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResServerTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResServerTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResServerTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPlatformBillingProducts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPlatformBillingProducts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPlatformBillingProducts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShelvesId", wireType)
			}
			m.ShelvesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShelvesId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResPlatformBillingProducts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResPlatformBillingProducts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResPlatformBillingProducts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &BillingProduct{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateBillingOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateBillingOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateBillingOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentPlatform", wireType)
			}
			m.PaymentPlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentPlatform |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateBillingOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateBillingOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateBillingOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSolveGooglePlayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSolveGooglePlayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSolveGooglePlayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InappPurchaseData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InappPurchaseData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InappDataSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InappDataSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCancelGooglePlayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCancelGooglePlayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCancelGooglePlayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateWechatNativeOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateWechatNativeOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateWechatNativeOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateWechatNativeOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateWechatNativeOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateWechatNativeOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrcodeBuffer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrcodeBuffer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateWechatAppOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateWechatAppOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateWechatAppOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateWechatAppOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateWechatAppOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateWechatAppOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallWechatAppParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallWechatAppParam == nil {
				m.CallWechatAppParam = &ResCreateWechatAppOrder_CallWechatAppParam{}
			}
			if err := m.CallWechatAppParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateWechatAppOrder_CallWechatAppParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallWechatAppParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallWechatAppParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partnerid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partnerid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepayid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prepayid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noncestr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Noncestr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateAlipayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateAlipayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateAlipayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipayTradeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlipayTradeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateAlipayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateAlipayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateAlipayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlipayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateAlipayScanOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateAlipayScanOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateAlipayScanOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateAlipayScanOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateAlipayScanOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateAlipayScanOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrcodeBuffer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrcodeBuffer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateAlipayAppOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateAlipayAppOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateAlipayAppOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateAlipayAppOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateAlipayAppOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateAlipayAppOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlipayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateJPCreditCardOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateJPCreditCardOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateJPCreditCardOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateJPCreditCardOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateJPCreditCardOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateJPCreditCardOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateJPPaypalOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateJPPaypalOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateJPPaypalOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateJPPaypalOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateJPPaypalOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateJPPaypalOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateJPAuOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateJPAuOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateJPAuOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateJPAuOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateJPAuOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateJPAuOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateJPDocomoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateJPDocomoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateJPDocomoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateJPDocomoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateJPDocomoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateJPDocomoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateJPWebMoneyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateJPWebMoneyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateJPWebMoneyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateJPWebMoneyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateJPWebMoneyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateJPWebMoneyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateJPSoftbankOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateJPSoftbankOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateJPSoftbankOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateJPSoftbankOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateJPSoftbankOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateJPSoftbankOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateENPaypalOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateENPaypalOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateENPaypalOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateENPaypalOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateENPaypalOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateENPaypalOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateENJCBOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateENJCBOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateENJCBOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateENJCBOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateENJCBOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateENJCBOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateENMasterCardOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateENMasterCardOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateENMasterCardOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateENMasterCardOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateENMasterCardOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateENMasterCardOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateENVisaOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateENVisaOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateENVisaOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateENVisaOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateENVisaOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateENVisaOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateENAlipayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateENAlipayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateENAlipayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCreateENAlipayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCreateENAlipayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCreateENAlipayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqOpenChest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqOpenChest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqOpenChest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChestId", wireType)
			}
			m.ChestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTicket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseTicket = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResOpenChest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResOpenChest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResOpenChest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &OpenResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOpenCount", wireType)
			}
			m.TotalOpenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOpenCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBuyFromChestShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBuyFromChestShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBuyFromChestShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResBuyFromChestShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResBuyFromChestShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResBuyFromChestShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChestId", wireType)
			}
			m.ChestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeCount", wireType)
			}
			m.ConsumeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResDailySignInInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResDailySignInInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResDailySignInInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignInDays", wireType)
			}
			m.SignInDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignInDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDoActivitySignIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDoActivitySignIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDoActivitySignIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResDoActivitySignIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResDoActivitySignIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResDoActivitySignIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &ResDoActivitySignIn_RewardData{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignInCount", wireType)
			}
			m.SignInCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignInCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResDoActivitySignIn_RewardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Characters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Characters = append(m.Characters, &Character{})
			if err := m.Characters[len(m.Characters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Skins = append(m.Skins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Skins) == 0 {
					m.Skins = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Skins = append(m.Skins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Skins", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainCharacterId", wireType)
			}
			m.MainCharacterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainCharacterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGiftCount", wireType)
			}
			m.SendGiftCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendGiftCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGiftLimit", wireType)
			}
			m.SendGiftLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendGiftLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeMainCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeMainCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeMainCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterId", wireType)
			}
			m.CharacterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CharacterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeCharacterSkin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeCharacterSkin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeCharacterSkin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterId", wireType)
			}
			m.CharacterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CharacterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skin", wireType)
			}
			m.Skin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeCharacterView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeCharacterView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeCharacterView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterId", wireType)
			}
			m.CharacterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CharacterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendGiftToCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendGiftToCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendGiftToCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterId", wireType)
			}
			m.CharacterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CharacterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifts = append(m.Gifts, &ReqSendGiftToCharacter_Gift{})
			if err := m.Gifts[len(m.Gifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendGiftToCharacter_Gift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResSendGiftToCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResSendGiftToCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResSendGiftToCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSellItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSellItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSellItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sells = append(m.Sells, &ReqSellItem_Item{})
			if err := m.Sells[len(m.Sells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSellItem_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCommonView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCommonView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCommonView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, &ResCommonView_Slot{})
			if err := m.Slots[len(m.Slots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCommonView_Slot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeCommonView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeCommonView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeCommonView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpgradeCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpgradeCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpgradeCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterId", wireType)
			}
			m.CharacterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CharacterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResUpgradeCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResUpgradeCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResUpgradeCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Character == nil {
				m.Character = &Character{}
			}
			if err := m.Character.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGMCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGMCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGMCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopInfo == nil {
				m.ShopInfo = &ShopInfo{}
			}
			if err := m.ShopInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBuyFromShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBuyFromShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBuyFromShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillShortCut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillShortCut = append(m.BillShortCut, &BillShortcut{})
			if err := m.BillShortCut[len(m.BillShortCut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealPrice", wireType)
			}
			m.DealPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealPrice |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResBuyFromShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResBuyFromShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResBuyFromShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardSlot{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBuyFromZHP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBuyFromZHP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBuyFromZHP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPayMonthTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPayMonthTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPayMonthTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketId", wireType)
			}
			m.TicketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResPayMonthTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResPayMonthTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResPayMonthTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCount", wireType)
			}
			m.ResourceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResRefreshZHPShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResRefreshZHPShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResRefreshZHPShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zhp == nil {
				m.Zhp = &ZHPShop{}
			}
			if err := m.Zhp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMonthTicketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMonthTicketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMonthTicketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthTicketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonthTicketInfo = append(m.MonthTicketInfo, &MonthTicketInfo{})
			if err := m.MonthTicketInfo[len(m.MonthTicketInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqExchangeCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqExchangeCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqExchangeCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResServerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResServerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResServerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &ServerSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, &AccountSetting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateAccountSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateAccountSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateAccountSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setting == nil {
				m.Setting = &AccountSetting{}
			}
			if err := m.Setting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResModNicknameTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResModNicknameTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResModNicknameTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModTime", wireType)
			}
			m.LastModTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastModTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMisc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMisc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMisc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RechargedList = append(m.RechargedList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RechargedList) == 0 {
					m.RechargedList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RechargedList = append(m.RechargedList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargedList", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faiths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Faiths = append(m.Faiths, &FaithData{})
			if err := m.Faiths[len(m.Faiths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqModifySignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqModifySignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqModifySignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResIDCardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResIDCardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResIDCardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuthed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateIDCardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateIDCardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateIDCardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResVipReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResVipReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResVipReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GainedVipLevels = append(m.GainedVipLevels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GainedVipLevels) == 0 {
					m.GainedVipLevels = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GainedVipLevels = append(m.GainedVipLevels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GainedVipLevels", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGainVipReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGainVipReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGainVipReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCustomizedContestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCustomizedContestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCustomizedContestList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCustomizedContestList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &CustomizedContestBase{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowContests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowContests = append(m.FollowContests, &CustomizedContestBase{})
			if err := m.FollowContests[len(m.FollowContests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCustomizedContestExtendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestExtendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestExtendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UidList = append(m.UidList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UidList) == 0 {
					m.UidList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UidList = append(m.UidList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UidList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCustomizedContestExtendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCustomizedContestExtendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCustomizedContestExtendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendList = append(m.ExtendList, &CustomizedContestExtend{})
			if err := m.ExtendList[len(m.ExtendList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEnterCustomizedContest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEnterCustomizedContest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEnterCustomizedContest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResEnterCustomizedContest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResEnterCustomizedContest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResEnterCustomizedContest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailInfo == nil {
				m.DetailInfo = &CustomizedContestDetail{}
			}
			if err := m.DetailInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerReport == nil {
				m.PlayerReport = &CustomizedContestPlayerReport{}
			}
			if err := m.PlayerReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCustomizedContestOnlineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestOnlineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestOnlineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCustomizedContestOnlineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCustomizedContestOnlineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCustomizedContestOnlineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlinePlayer", wireType)
			}
			m.OnlinePlayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlinePlayer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCustomizedContestByContestId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestByContestId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestByContestId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCustomizedContestByContestId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCustomizedContestByContestId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCustomizedContestByContestId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContestInfo == nil {
				m.ContestInfo = &CustomizedContestAbstract{}
			}
			if err := m.ContestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStartCustomizedContest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStartCustomizedContest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStartCustomizedContest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinCustomizedContestChatRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinCustomizedContestChatRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinCustomizedContestChatRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResJoinCustomizedContestChatRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResJoinCustomizedContestChatRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResJoinCustomizedContestChatRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatHistory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatHistory = append(m.ChatHistory, make([]byte, postIndex-iNdEx))
			copy(m.ChatHistory[len(m.ChatHistory)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSayChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSayChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSayChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCustomizedContestGameLiveList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestGameLiveList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestGameLiveList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCustomizedContestGameLiveList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCustomizedContestGameLiveList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCustomizedContestGameLiveList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveList = append(m.LiveList, &GameLiveHead{})
			if err := m.LiveList[len(m.LiveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchCustomizedContestGameRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestGameRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchCustomizedContestGameRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchCustomizedContestGameRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchCustomizedContestGameRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchCustomizedContestGameRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordList = append(m.RecordList, &RecordGame{})
			if err := m.RecordList[len(m.RecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTargetCustomizedContest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTargetCustomizedContest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTargetCustomizedContest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResActivityList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResActivityList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResActivityList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, &Activity{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountActivityData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAccountActivityData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAccountActivityData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRecords = append(m.ExchangeRecords, &ExchangeRecord{})
			if err := m.ExchangeRecords[len(m.ExchangeRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskProgressList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskProgressList = append(m.TaskProgressList, &TaskProgress{})
			if err := m.TaskProgressList[len(m.TaskProgressList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedPointList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatedPointList = append(m.AccumulatedPointList, &ActivityAccumulatedPointData{})
			if err := m.AccumulatedPointList[len(m.AccumulatedPointList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankDataList = append(m.RankDataList, &ActivityRankPointData{})
			if err := m.RankDataList[len(m.RankDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipTaskProgressList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlipTaskProgressList = append(m.FlipTaskProgressList, &TaskProgress{})
			if err := m.FlipTaskProgressList[len(m.FlipTaskProgressList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignInData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignInData = append(m.SignInData, &ResAccountActivityData_ActivitySignInData{})
			if err := m.SignInData[len(m.SignInData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAccountActivityData_ActivitySignInData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivitySignInData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivitySignInData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignInCount", wireType)
			}
			m.SignInCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignInCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqExchangeActivityItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqExchangeActivityItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqExchangeActivityItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			m.ExchangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResExchangeActivityItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResExchangeActivityItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResExchangeActivityItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecuteReward = append(m.ExecuteReward, &ExecuteReward{})
			if err := m.ExecuteReward[len(m.ExecuteReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCompleteActivityTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCompleteActivityTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCompleteActivityTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRecieveActivityFlipTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRecieveActivityFlipTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRecieveActivityFlipTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResRecieveActivityFlipTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResRecieveActivityFlipTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResRecieveActivityFlipTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchActivityFlipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchActivityFlipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchActivityFlipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchActivityFlipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchActivityFlipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchActivityFlipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rewards = append(m.Rewards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rewards) == 0 {
					m.Rewards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rewards = append(m.Rewards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGainAccumulatedPointActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGainAccumulatedPointActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGainAccumulatedPointActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFetchRankPointLeaderboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFetchRankPointLeaderboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFetchRankPointLeaderboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderboardId", wireType)
			}
			m.LeaderboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderboardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchRankPointLeaderboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResFetchRankPointLeaderboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResFetchRankPointLeaderboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ResFetchRankPointLeaderboard_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshTime", wireType)
			}
			m.LastRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRefreshTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResFetchRankPointLeaderboard_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.View == nil {
				m.View = &PlayerBaseView{}
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGainRankPointReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGainRankPointReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGainRankPointReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderboardId", wireType)
			}
			m.LeaderboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderboardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionMJStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionMJStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionMJStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionNewRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionNewRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionNewRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chang", wireType)
			}
			m.Chang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ju", wireType)
			}
			m.Ju = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ju |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ben", wireType)
			}
			m.Ben = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ben |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = append(m.Tiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dora", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dora = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Scores) == 0 {
					m.Scores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqibang", wireType)
			}
			m.Liqibang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liqibang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais0 = append(m.Tingpais0, &TingPaiDiscardInfo{})
			if err := m.Tingpais0[len(m.Tingpais0)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais1 = append(m.Tingpais1, &TingPaiInfo{})
			if err := m.Tingpais1[len(m.Tingpais1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Al", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Al = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTileCount", wireType)
			}
			m.LeftTileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordNewRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordNewRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordNewRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chang", wireType)
			}
			m.Chang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ju", wireType)
			}
			m.Ju = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ju |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ben", wireType)
			}
			m.Ben = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ben |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dora", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dora = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Scores) == 0 {
					m.Scores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqibang", wireType)
			}
			m.Liqibang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liqibang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles0 = append(m.Tiles0, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles1 = append(m.Tiles1, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles2 = append(m.Tiles2, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles3 = append(m.Tiles3, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpai", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpai = append(m.Tingpai, &RecordNewRound_TingPai{})
			if err := m.Tingpai[len(m.Tingpai)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paishan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paishan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTileCount", wireType)
			}
			m.LeftTileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordNewRound_TingPai) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TingPai: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TingPai: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais1 = append(m.Tingpais1, &TingPaiInfo{})
			if err := m.Tingpais1[len(m.Tingpais1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chang", wireType)
			}
			m.Chang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ju", wireType)
			}
			m.Ju = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ju |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ben", wireType)
			}
			m.Ben = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ben |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPlayer", wireType)
			}
			m.IndexPlayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexPlayer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTileCount", wireType)
			}
			m.LeftTileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hands = append(m.Hands, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqibang", wireType)
			}
			m.Liqibang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liqibang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &GameSnapshot_PlayerSnapshot{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSnapshot_PlayerSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqiposition", wireType)
			}
			m.Liqiposition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liqiposition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tilenum", wireType)
			}
			m.Tilenum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tilenum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qipais", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qipais = append(m.Qipais, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mings = append(m.Mings, &GameSnapshot_PlayerSnapshot_Fulu{})
			if err := m.Mings[len(m.Mings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSnapshot_PlayerSnapshot_Fulu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fulu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fulu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = append(m.Tile, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.From = append(m.From, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.From) == 0 {
					m.From = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.From = append(m.From, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionPrototype) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionPrototype: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionPrototype: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameDetailRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDetailRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDetailRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, make([]byte, postIndex-iNdEx))
			copy(m.Records[len(m.Records)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionalOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionalOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionalOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Combination = append(m.Combination, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionalOperationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionalOperationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionalOperationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationList = append(m.OperationList, &OptionalOperation{})
			if err := m.OperationList[len(m.OperationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeAdd", wireType)
			}
			m.TimeAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeAdd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFixed", wireType)
			}
			m.TimeFixed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFixed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiQiSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiQiSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiQiSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqibang", wireType)
			}
			m.Liqibang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liqibang |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hand = append(m.Hand, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ming = append(m.Ming, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HuTile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HuTile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zimo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zimo = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qinjia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Qinjia = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Liqi = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiDoras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiDoras = append(m.LiDoras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yiman", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Yiman = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fans = append(m.Fans, &FanInfo{})
			if err := m.Fans[len(m.Fans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fu", wireType)
			}
			m.Fu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointRong", wireType)
			}
			m.PointRong = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointRong |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointZimoQin", wireType)
			}
			m.PointZimoQin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointZimoQin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointZimoXian", wireType)
			}
			m.PointZimoXian = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointZimoXian |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointSum", wireType)
			}
			m.PointSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointSum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TingPaiInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TingPaiInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TingPaiInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Haveyi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Haveyi = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yiman", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Yiman = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fu", wireType)
			}
			m.Fu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiaoDoraCount", wireType)
			}
			m.BiaoDoraCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiaoDoraCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TingPaiDiscardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TingPaiDiscardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TingPaiDiscardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &TingPaiInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Scores) == 0 {
					m.Scores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDiscardTile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDiscardTile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDiscardTile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiqi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiqi = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moqie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moqie = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais = append(m.Tingpais, &TingPaiInfo{})
			if err := m.Tingpais[len(m.Tingpais)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWliqi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWliqi = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordDiscardTile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordDiscardTile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordDiscardTile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiqi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiqi = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moqie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moqie = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Zhenting = append(m.Zhenting, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Zhenting) == 0 {
					m.Zhenting = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Zhenting = append(m.Zhenting, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais = append(m.Tingpais, &TingPaiInfo{})
			if err := m.Tingpais[len(m.Tingpais)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWliqi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWliqi = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &OptionalOperationList{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDealTile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDealTile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDealTile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTileCount", wireType)
			}
			m.LeftTileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liqi == nil {
				m.Liqi = &LiQiSuccess{}
			}
			if err := m.Liqi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais = append(m.Tingpais, &TingPaiDiscardInfo{})
			if err := m.Tingpais[len(m.Tingpais)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordDealTile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordDealTile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordDealTile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTileCount", wireType)
			}
			m.LeftTileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liqi == nil {
				m.Liqi = &LiQiSuccess{}
			}
			if err := m.Liqi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Zhenting = append(m.Zhenting, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Zhenting) == 0 {
					m.Zhenting = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Zhenting = append(m.Zhenting, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionChiPengGang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionChiPengGang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionChiPengGang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = append(m.Tiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Froms = append(m.Froms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Froms) == 0 {
					m.Froms = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Froms = append(m.Froms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Froms", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liqi == nil {
				m.Liqi = &LiQiSuccess{}
			}
			if err := m.Liqi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais = append(m.Tingpais, &TingPaiDiscardInfo{})
			if err := m.Tingpais[len(m.Tingpais)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordChiPengGang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordChiPengGang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordChiPengGang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = append(m.Tiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Froms = append(m.Froms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Froms) == 0 {
					m.Froms = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Froms = append(m.Froms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Froms", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liqi == nil {
				m.Liqi = &LiQiSuccess{}
			}
			if err := m.Liqi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Zhenting = append(m.Zhenting, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Zhenting) == 0 {
					m.Zhenting = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Zhenting = append(m.Zhenting, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionAnGangAddGang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionAnGangAddGang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionAnGangAddGang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais = append(m.Tingpais, &TingPaiInfo{})
			if err := m.Tingpais[len(m.Tingpais)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordAnGangAddGang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordAnGangAddGang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordAnGangAddGang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &OptionalOperationList{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionBaBei) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionBaBei: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionBaBei: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OptionalOperationList{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zhenting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zhenting = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpais", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tingpais = append(m.Tingpais, &TingPaiInfo{})
			if err := m.Tingpais[len(m.Tingpais)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moqie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moqie = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordBaBei) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordBaBei: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordBaBei: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &OptionalOperationList{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moqie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moqie = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionHule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionHule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionHule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hules = append(m.Hules, &HuleInfo{})
			if err := m.Hules[len(m.Hules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OldScores = append(m.OldScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OldScores) == 0 {
					m.OldScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OldScores = append(m.OldScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OldScores", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeltaScores = append(m.DeltaScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeltaScores) == 0 {
					m.DeltaScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeltaScores = append(m.DeltaScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaScores", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTimeout", wireType)
			}
			m.WaitTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Scores) == 0 {
					m.Scores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gameend == nil {
				m.Gameend = &GameEnd{}
			}
			if err := m.Gameend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordHule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordHule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordHule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hules = append(m.Hules, &HuleInfo{})
			if err := m.Hules[len(m.Hules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OldScores = append(m.OldScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OldScores) == 0 {
					m.OldScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OldScores = append(m.OldScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OldScores", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeltaScores = append(m.DeltaScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeltaScores) == 0 {
					m.DeltaScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeltaScores = append(m.DeltaScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaScores", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTimeout", wireType)
			}
			m.WaitTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Scores) == 0 {
					m.Scores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gameend == nil {
				m.Gameend = &GameEnd{}
			}
			if err := m.Gameend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionLiuJu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionLiuJu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionLiuJu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gameend == nil {
				m.Gameend = &GameEnd{}
			}
			if err := m.Gameend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = append(m.Tiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liqi == nil {
				m.Liqi = &LiQiSuccess{}
			}
			if err := m.Liqi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allplayertiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allplayertiles = append(m.Allplayertiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordLiuJu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordLiuJu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordLiuJu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gameend == nil {
				m.Gameend = &GameEnd{}
			}
			if err := m.Gameend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = append(m.Tiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liqi == nil {
				m.Liqi = &LiQiSuccess{}
			}
			if err := m.Liqi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allplayertiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allplayertiles = append(m.Allplayertiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoTilePlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoTilePlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoTilePlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tingpai", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tingpai = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hand = append(m.Hand, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tings = append(m.Tings, &TingPaiInfo{})
			if err := m.Tings[len(m.Tings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoTileScoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoTileScoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoTileScoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OldScores = append(m.OldScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OldScores) == 0 {
					m.OldScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OldScores = append(m.OldScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OldScores", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeltaScores = append(m.DeltaScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeltaScores) == 0 {
					m.DeltaScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeltaScores = append(m.DeltaScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaScores", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hand = append(m.Hand, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ming = append(m.Ming, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doras = append(m.Doras, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionNoTile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionNoTile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionNoTile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liujumanguan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Liujumanguan = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &NoTilePlayerInfo{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &NoTileScoreInfo{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gameend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordNoTile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordNoTile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordNoTile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liujumanguan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Liujumanguan = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &NoTilePlayerInfo{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &NoTileScoreInfo{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gameend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAuthGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAuthGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAuthGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResAuthGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResAuthGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResAuthGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerGameView{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SeatList = append(m.SeatList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SeatList) == 0 {
					m.SeatList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SeatList = append(m.SeatList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatList", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGameStart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGameStart = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameConfig == nil {
				m.GameConfig = &GameConfig{}
			}
			if err := m.GameConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReadyIdList = append(m.ReadyIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReadyIdList) == 0 {
					m.ReadyIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReadyIdList = append(m.ReadyIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRestore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRestore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRestore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &GameSnapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &ActionPrototype{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassedWaitingTime", wireType)
			}
			m.PassedWaitingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassedWaitingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameState", wireType)
			}
			m.GameState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameState |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPauseTimeMs", wireType)
			}
			m.LastPauseTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPauseTimeMs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResEnterGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResEnterGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResEnterGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRestore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameRestore == nil {
				m.GameRestore = &GameRestore{}
			}
			if err := m.GameRestore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSyncGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSyncGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSyncGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResSyncGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResSyncGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResSyncGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRestore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameRestore == nil {
				m.GameRestore = &GameRestore{}
			}
			if err := m.GameRestore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSelfOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSelfOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSelfOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOperation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelOperation = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moqie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moqie = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeuse", wireType)
			}
			m.Timeuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeuse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChiPengGang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChiPengGang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChiPengGang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOperation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelOperation = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeuse", wireType)
			}
			m.Timeuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeuse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBroadcastInGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBroadcastInGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBroadcastInGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptSelf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExceptSelf = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGMCommandInGaming) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGMCommandInGaming: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGMCommandInGaming: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResGamePlayerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResGamePlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResGamePlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v GamePlayerState
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GamePlayerState(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StateList = append(m.StateList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.StateList) == 0 {
					m.StateList = make([]GamePlayerState, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GamePlayerState
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GamePlayerState(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StateList = append(m.StateList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StateList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyNewGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyNewGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyNewGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyPlayerLoadGameReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyPlayerLoadGameReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyPlayerLoadGameReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReadyIdList = append(m.ReadyIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiqi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiqi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReadyIdList) == 0 {
					m.ReadyIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiqi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReadyIdList = append(m.ReadyIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameBroadcast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyGameBroadcast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyGameBroadcast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameEndResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyGameEndResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyGameEndResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &GameEndResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameTerminate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyGameTerminate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyGameTerminate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyPlayerConnectionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyPlayerConnectionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyPlayerConnectionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= GamePlayerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAccountLevelChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAccountLevelChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAccountLevelChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &AccountLevel{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Final == nil {
				m.Final = &AccountLevel{}
			}
			if err := m.Final.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameFinishReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyGameFinishReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyGameFinishReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeId", wireType)
			}
			m.ModeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelChange == nil {
				m.LevelChange = &NotifyGameFinishReward_LevelChange{}
			}
			if err := m.LevelChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchChest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchChest == nil {
				m.MatchChest = &NotifyGameFinishReward_MatchChest{}
			}
			if err := m.MatchChest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainCharacter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MainCharacter == nil {
				m.MainCharacter = &NotifyGameFinishReward_MainCharacter{}
			}
			if err := m.MainCharacter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterGift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CharacterGift == nil {
				m.CharacterGift = &NotifyGameFinishReward_CharacterGift{}
			}
			if err := m.CharacterGift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameFinishReward_LevelChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &AccountLevel{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Final == nil {
				m.Final = &AccountLevel{}
			}
			if err := m.Final.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameFinishReward_MatchChest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchChest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchChest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChestId", wireType)
			}
			m.ChestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			m.Final = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Final |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGraded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGraded = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardSlot{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameFinishReward_MainCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			m.Add = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Add |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGameFinishReward_CharacterGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CharacterGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CharacterGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			m.Final = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Final |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			m.Add = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Add |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGraded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGraded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityReward = append(m.ActivityReward, &NotifyActivityReward_ActivityReward{})
			if err := m.ActivityReward[len(m.ActivityReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyActivityReward_ActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardSlot{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyActivityPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyActivityPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyActivityPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityPoints = append(m.ActivityPoints, &NotifyActivityPoint_ActivityPoint{})
			if err := m.ActivityPoints[len(m.ActivityPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyActivityPoint_ActivityPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyLeaderboardPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyLeaderboardPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyLeaderboardPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderboardPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiqi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiqi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderboardPoints = append(m.LeaderboardPoints, &NotifyLeaderboardPoint_LeaderboardPoint{})
			if err := m.LeaderboardPoints[len(m.LeaderboardPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyLeaderboardPoint_LeaderboardPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderboardPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderboardPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderboardId", wireType)
			}
			m.LeaderboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderboardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyGamePause) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyGamePause: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyGamePause: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiqi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiqi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiqi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiqi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiqi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiqi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLiqi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLiqi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLiqi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLiqi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLiqi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiqi   = fmt.Errorf("proto: integer overflow")
)
